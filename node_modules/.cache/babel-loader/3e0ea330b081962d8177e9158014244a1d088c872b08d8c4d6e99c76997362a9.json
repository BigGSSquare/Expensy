{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence-tracker - Copy\\\\expence-tracker\\\\src\\\\components\\\\ImprovedCategoryChart.js\",\n  _s = $RefreshSig$();\n// src/components/ImprovedCategoryChart.js\nimport React, { useState, useEffect } from 'react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImprovedCategoryChart = ({\n  data\n}) => {\n  _s();\n  // Sample data format if you don't provide your own data\n  const sampleData = [{\n    name: 'Food',\n    value: 2000,\n    percentage: 38\n  }, {\n    name: 'Healthcare',\n    value: 1625,\n    percentage: 31\n  }, {\n    name: 'Education',\n    value: 1100,\n    percentage: 21\n  }, {\n    name: 'Housing',\n    value: 157,\n    percentage: 3\n  }, {\n    name: 'Transportation',\n    value: 105,\n    percentage: 2\n  }, {\n    name: 'Entertainment',\n    value: 94,\n    percentage: 1.8\n  }, {\n    name: 'Shopping',\n    value: 78,\n    percentage: 1.5\n  }, {\n    name: 'Utilities',\n    value: 68,\n    percentage: 1.3\n  }, {\n    name: 'Personal Care',\n    value: 42,\n    percentage: 0.8\n  }, {\n    name: 'Other',\n    value: 34,\n    percentage: 0.6\n  }];\n\n  // Use provided data or sample data\n  const expenseData = data || sampleData;\n\n  // Number of top categories to show individually\n  const TOP_CATEGORIES_COUNT = 5;\n\n  // Process data to combine smaller categories into \"Other\"\n  const [processedData, setProcessedData] = useState([]);\n  useEffect(() => {\n    // Sort data by value (descending)\n    const sortedData = [...expenseData].sort((a, b) => b.value - a.value);\n\n    // Take top categories\n    const topCategories = sortedData.slice(0, TOP_CATEGORIES_COUNT);\n\n    // Combine the rest into \"Other\"\n    if (sortedData.length > TOP_CATEGORIES_COUNT) {\n      const otherCategories = sortedData.slice(TOP_CATEGORIES_COUNT);\n      const otherValue = otherCategories.reduce((sum, item) => sum + item.value, 0);\n      const otherPercentage = otherCategories.reduce((sum, item) => sum + item.percentage, 0);\n      topCategories.push({\n        name: 'Other',\n        value: otherValue,\n        percentage: otherPercentage,\n        subCategories: otherCategories // Keep the details for potential drill-down\n      });\n    }\n    setProcessedData(topCategories);\n  }, [expenseData]);\n\n  // Chart colors\n  const COLORS = ['#0088FE', '#FFBB28', '#00C49F', '#FF8042', '#A28AD3', '#FF6B6B'];\n\n  // Custom tooltip\n  const CustomTooltip = ({\n    active,\n    payload\n  }) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-tooltip\",\n        style: {\n          backgroundColor: '#fff',\n          padding: '10px',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '0 0 5px 0',\n            fontWeight: 'bold',\n            color: payload[0].color\n          },\n          children: data.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '0',\n            color: '#666'\n          },\n          children: [\"Amount: $\", data.value.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '0',\n            color: '#666'\n          },\n          children: [data.percentage.toFixed(1), \"% of total\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), data.subCategories && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '8px',\n            borderTop: '1px solid #eee',\n            paddingTop: '8px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              margin: '0 0 5px 0',\n              fontWeight: 'bold'\n            },\n            children: \"Includes:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), data.subCategories.map((subCat, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              margin: '0',\n              fontSize: '12px',\n              color: '#666'\n            },\n            children: [subCat.name, \": $\", subCat.value.toLocaleString(), \" (\", subCat.percentage.toFixed(1), \"%)\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Custom legend that includes percentages\n  const renderCustomizedLegend = props => {\n    const {\n      payload\n    } = props;\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyle: 'none',\n        padding: 0,\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        gap: '12px',\n        marginTop: '20px'\n      },\n      children: payload.map((entry, index) => {\n        const category = processedData.find(item => item.name === entry.value);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            margin: '0',\n            cursor: 'pointer'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: entry.color,\n              marginRight: '8px',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '14px'\n            },\n            children: [entry.value, \": \", category === null || category === void 0 ? void 0 : category.percentage.toFixed(1), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this)]\n        }, `item-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: 400\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: 'center',\n        color: '#333',\n        marginBottom: '8px'\n      },\n      children: \"Spending by Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"85%\",\n      children: /*#__PURE__*/_jsxDEV(PieChart, {\n        children: [/*#__PURE__*/_jsxDEV(Pie, {\n          data: processedData,\n          cx: \"50%\",\n          cy: \"50%\",\n          innerRadius: 0,\n          outerRadius: 130,\n          fill: \"#8884d8\",\n          paddingAngle: 2,\n          dataKey: \"value\"\n          // No label here - keeps chart clean\n          ,\n          children: processedData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n            fill: COLORS[index % COLORS.length]\n          }, `cell-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          content: renderCustomizedLegend,\n          verticalAlign: \"bottom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(ImprovedCategoryChart, \"lA3Up+zz3Kb8kGTCA8bmhCCU3JY=\");\n_c = ImprovedCategoryChart;\nexport default ImprovedCategoryChart;\nvar _c;\n$RefreshReg$(_c, \"ImprovedCategoryChart\");","map":{"version":3,"names":["React","useState","useEffect","PieChart","Pie","Cell","ResponsiveContainer","Tooltip","Legend","jsxDEV","_jsxDEV","ImprovedCategoryChart","data","_s","sampleData","name","value","percentage","expenseData","TOP_CATEGORIES_COUNT","processedData","setProcessedData","sortedData","sort","a","b","topCategories","slice","length","otherCategories","otherValue","reduce","sum","item","otherPercentage","push","subCategories","COLORS","CustomTooltip","active","payload","className","style","backgroundColor","padding","border","borderRadius","boxShadow","children","margin","fontWeight","color","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","toFixed","marginTop","borderTop","paddingTop","map","subCat","index","fontSize","renderCustomizedLegend","props","listStyle","display","flexWrap","justifyContent","gap","entry","category","find","alignItems","cursor","width","height","marginRight","textAlign","marginBottom","cx","cy","innerRadius","outerRadius","fill","paddingAngle","dataKey","content","verticalAlign","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker - Copy/expence-tracker/src/components/ImprovedCategoryChart.js"],"sourcesContent":["// src/components/ImprovedCategoryChart.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\r\n\r\nconst ImprovedCategoryChart = ({ data }) => {\r\n  // Sample data format if you don't provide your own data\r\n  const sampleData = [\r\n    { name: 'Food', value: 2000, percentage: 38 },\r\n    { name: 'Healthcare', value: 1625, percentage: 31 },\r\n    { name: 'Education', value: 1100, percentage: 21 },\r\n    { name: 'Housing', value: 157, percentage: 3 },\r\n    { name: 'Transportation', value: 105, percentage: 2 },\r\n    { name: 'Entertainment', value: 94, percentage: 1.8 },\r\n    { name: 'Shopping', value: 78, percentage: 1.5 },\r\n    { name: 'Utilities', value: 68, percentage: 1.3 },\r\n    { name: 'Personal Care', value: 42, percentage: 0.8 },\r\n    { name: 'Other', value: 34, percentage: 0.6 }\r\n  ];\r\n\r\n  // Use provided data or sample data\r\n  const expenseData = data || sampleData;\r\n  \r\n  // Number of top categories to show individually\r\n  const TOP_CATEGORIES_COUNT = 5;\r\n  \r\n  // Process data to combine smaller categories into \"Other\"\r\n  const [processedData, setProcessedData] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    // Sort data by value (descending)\r\n    const sortedData = [...expenseData].sort((a, b) => b.value - a.value);\r\n    \r\n    // Take top categories\r\n    const topCategories = sortedData.slice(0, TOP_CATEGORIES_COUNT);\r\n    \r\n    // Combine the rest into \"Other\"\r\n    if (sortedData.length > TOP_CATEGORIES_COUNT) {\r\n      const otherCategories = sortedData.slice(TOP_CATEGORIES_COUNT);\r\n      const otherValue = otherCategories.reduce((sum, item) => sum + item.value, 0);\r\n      const otherPercentage = otherCategories.reduce((sum, item) => sum + item.percentage, 0);\r\n      \r\n      topCategories.push({\r\n        name: 'Other',\r\n        value: otherValue,\r\n        percentage: otherPercentage,\r\n        subCategories: otherCategories // Keep the details for potential drill-down\r\n      });\r\n    }\r\n    \r\n    setProcessedData(topCategories);\r\n  }, [expenseData]);\r\n  \r\n  // Chart colors\r\n  const COLORS = ['#0088FE', '#FFBB28', '#00C49F', '#FF8042', '#A28AD3', '#FF6B6B'];\r\n  \r\n  // Custom tooltip\r\n  const CustomTooltip = ({ active, payload }) => {\r\n    if (active && payload && payload.length) {\r\n      const data = payload[0].payload;\r\n      return (\r\n        <div className=\"custom-tooltip\" style={{ \r\n          backgroundColor: '#fff', \r\n          padding: '10px', \r\n          border: '1px solid #ccc',\r\n          borderRadius: '4px',\r\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n        }}>\r\n          <p style={{ \r\n            margin: '0 0 5px 0',\r\n            fontWeight: 'bold',\r\n            color: payload[0].color\r\n          }}>{data.name}</p>\r\n          <p style={{ margin: '0', color: '#666' }}>\r\n            Amount: ${data.value.toLocaleString()}\r\n          </p>\r\n          <p style={{ margin: '0', color: '#666' }}>\r\n            {data.percentage.toFixed(1)}% of total\r\n          </p>\r\n          \r\n          {/* Show subcategories if this is the \"Other\" category */}\r\n          {data.subCategories && (\r\n            <div style={{ marginTop: '8px', borderTop: '1px solid #eee', paddingTop: '8px' }}>\r\n              <p style={{ margin: '0 0 5px 0', fontWeight: 'bold' }}>Includes:</p>\r\n              {data.subCategories.map((subCat, index) => (\r\n                <p key={index} style={{ margin: '0', fontSize: '12px', color: '#666' }}>\r\n                  {subCat.name}: ${subCat.value.toLocaleString()} ({subCat.percentage.toFixed(1)}%)\r\n                </p>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  // Custom legend that includes percentages\r\n  const renderCustomizedLegend = (props) => {\r\n    const { payload } = props;\r\n    \r\n    return (\r\n      <ul style={{ \r\n        listStyle: 'none', \r\n        padding: 0, \r\n        display: 'flex', \r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n        gap: '12px',\r\n        marginTop: '20px'\r\n      }}>\r\n        {payload.map((entry, index) => {\r\n          const category = processedData.find(item => item.name === entry.value);\r\n          return (\r\n            <li key={`item-${index}`} style={{ \r\n              display: 'flex', \r\n              alignItems: 'center',\r\n              margin: '0',\r\n              cursor: 'pointer'\r\n            }}>\r\n              <div style={{ \r\n                width: '12px', \r\n                height: '12px', \r\n                backgroundColor: entry.color,\r\n                marginRight: '8px',\r\n                borderRadius: '2px'\r\n              }} />\r\n              <span style={{ fontSize: '14px' }}>\r\n                {entry.value}: {category?.percentage.toFixed(1)}%\r\n              </span>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <div style={{ width: '100%', height: 400 }}>\r\n      <h3 style={{ \r\n        textAlign: 'center', \r\n        color: '#333',\r\n        marginBottom: '8px'\r\n      }}>Spending by Category</h3>\r\n      <ResponsiveContainer width=\"100%\" height=\"85%\">\r\n        <PieChart>\r\n          <Pie\r\n            data={processedData}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            innerRadius={0}\r\n            outerRadius={130}\r\n            fill=\"#8884d8\"\r\n            paddingAngle={2}\r\n            dataKey=\"value\"\r\n            // No label here - keeps chart clean\r\n          >\r\n            {processedData.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip content={<CustomTooltip />} />\r\n          <Legend \r\n            content={renderCustomizedLegend}\r\n            verticalAlign=\"bottom\"\r\n          />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImprovedCategoryChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}