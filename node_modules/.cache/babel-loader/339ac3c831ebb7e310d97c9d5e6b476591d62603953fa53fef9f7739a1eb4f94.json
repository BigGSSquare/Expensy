{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence-tracker - Copy\\\\expence-tracker\\\\src\\\\context\\\\ExpenseContext.js\",\n  _s = $RefreshSig$();\n// src/context/ExpenseContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { sendBudgetAlertEmail } from '../services/EmailService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ExpenseContext = /*#__PURE__*/createContext();\nexport const ExpenseProvider = ({\n  children\n}) => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const [budgets, setBudgets] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [emailStatus, setEmailStatus] = useState({\n    sent: false,\n    error: null\n  });\n  const [expenseCategories, setExpenseCategories] = useState([]);\n  const [incomeCategories, setIncomeCategories] = useState([]);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n\n  // Default categories if none are found\n  const DEFAULT_EXPENSE_CATEGORIES = ['Food', 'Housing', 'Transportation', 'Entertainment', 'Utilities', 'Healthcare', 'Shopping', 'Personal Care', 'Education', 'Other'];\n  const DEFAULT_INCOME_CATEGORIES = ['Salary', 'Freelance', 'Investment', 'Gift', 'Business', 'Side Hustle', 'Rental', 'Other'];\n\n  // Generate unique storage keys for current user\n  const getUserStorageKey = key => {\n    if (!currentUser) return key;\n    return `${key}_${currentUser.id}`;\n  };\n\n  // Load data from localStorage on initial render or when user changes\n  useEffect(() => {\n    if (currentUser) {\n      try {\n        // Load expenses\n        const savedExpenses = JSON.parse(localStorage.getItem(getUserStorageKey('expenses'))) || [];\n        setExpenses(Array.isArray(savedExpenses) ? savedExpenses : []);\n\n        // Load incomes\n        const savedIncomes = JSON.parse(localStorage.getItem(getUserStorageKey('incomes'))) || [];\n        setIncomes(Array.isArray(savedIncomes) ? savedIncomes : []);\n\n        // Load budgets\n        const savedBudgets = JSON.parse(localStorage.getItem(getUserStorageKey('budgets'))) || {};\n        setBudgets(typeof savedBudgets === 'object' ? savedBudgets : {});\n\n        // Load alerts\n        const savedAlerts = JSON.parse(localStorage.getItem(getUserStorageKey('alerts'))) || [];\n        setAlerts(Array.isArray(savedAlerts) ? savedAlerts : []);\n\n        // Load expense categories\n        const savedExpenseCategories = JSON.parse(localStorage.getItem(getUserStorageKey('expenseCategories'))) || DEFAULT_EXPENSE_CATEGORIES;\n        setExpenseCategories(Array.isArray(savedExpenseCategories) ? savedExpenseCategories : DEFAULT_EXPENSE_CATEGORIES);\n\n        // Load income categories\n        const savedIncomeCategories = JSON.parse(localStorage.getItem(getUserStorageKey('incomeCategories'))) || DEFAULT_INCOME_CATEGORIES;\n        setIncomeCategories(Array.isArray(savedIncomeCategories) ? savedIncomeCategories : DEFAULT_INCOME_CATEGORIES);\n      } catch (error) {\n        console.error('Error loading data from localStorage:', error);\n        // Set defaults if there's an error\n        setExpenses([]);\n        setIncomes([]);\n        setBudgets({});\n        setAlerts([]);\n        setExpenseCategories(DEFAULT_EXPENSE_CATEGORIES);\n        setIncomeCategories(DEFAULT_INCOME_CATEGORIES);\n      }\n    } else {\n      // Clear data when logged out\n      setExpenses([]);\n      setIncomes([]);\n      setBudgets({});\n      setAlerts([]);\n      setExpenseCategories(DEFAULT_EXPENSE_CATEGORIES);\n      setIncomeCategories(DEFAULT_INCOME_CATEGORIES);\n    }\n  }, [currentUser]);\n\n  // Save data to localStorage whenever it changes\n  useEffect(() => {\n    if (currentUser && Array.isArray(expenses)) {\n      localStorage.setItem(getUserStorageKey('expenses'), JSON.stringify(expenses));\n    }\n  }, [expenses, currentUser]);\n  useEffect(() => {\n    if (currentUser && Array.isArray(incomes)) {\n      localStorage.setItem(getUserStorageKey('incomes'), JSON.stringify(incomes));\n    }\n  }, [incomes, currentUser]);\n  useEffect(() => {\n    if (currentUser && budgets && typeof budgets === 'object') {\n      localStorage.setItem(getUserStorageKey('budgets'), JSON.stringify(budgets));\n    }\n  }, [budgets, currentUser]);\n  useEffect(() => {\n    if (currentUser && Array.isArray(alerts)) {\n      localStorage.setItem(getUserStorageKey('alerts'), JSON.stringify(alerts));\n    }\n  }, [alerts, currentUser]);\n\n  // Save categories to localStorage whenever they change\n  useEffect(() => {\n    if (currentUser && Array.isArray(expenseCategories) && expenseCategories.length > 0) {\n      localStorage.setItem(getUserStorageKey('expenseCategories'), JSON.stringify(expenseCategories));\n    }\n  }, [expenseCategories, currentUser]);\n  useEffect(() => {\n    if (currentUser && Array.isArray(incomeCategories) && incomeCategories.length > 0) {\n      localStorage.setItem(getUserStorageKey('incomeCategories'), JSON.stringify(incomeCategories));\n    }\n  }, [incomeCategories, currentUser]);\n\n  // Clear email status after some time\n  useEffect(() => {\n    if (emailStatus.sent || emailStatus.error) {\n      const timer = setTimeout(() => {\n        setEmailStatus({\n          sent: false,\n          error: null\n        });\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [emailStatus]);\n\n  // Add a new expense with validation\n  const addExpense = expense => {\n    if (!currentUser) return false; // Don't proceed if not logged in\n\n    try {\n      // Validate expense data\n      if (!expense.category) {\n        console.error('Missing category in expense');\n        return false;\n      }\n      const amount = parseFloat(expense.amount);\n      if (isNaN(amount) || amount <= 0) {\n        console.error('Invalid expense amount:', expense.amount);\n        return false;\n      }\n\n      // Ensure we have a valid date\n      let expenseDate = expense.date;\n      if (!expenseDate) {\n        expenseDate = new Date().toISOString().slice(0, 10);\n      }\n\n      // Create new expense object\n      const newExpense = {\n        ...expense,\n        amount: amount,\n        id: Date.now(),\n        date: expenseDate,\n        userId: currentUser.id\n      };\n      setExpenses(prevExpenses => {\n        const updatedExpenses = [...prevExpenses, newExpense];\n\n        // Check for budget alerts after state update\n        setTimeout(() => {\n          checkBudgetAlerts(newExpense, updatedExpenses);\n        }, 0);\n        return updatedExpenses;\n      });\n      return true;\n    } catch (error) {\n      console.error('Error adding expense:', error);\n      return false;\n    }\n  };\n\n  // Add a new income with validation\n  const addIncome = income => {\n    if (!currentUser) return false;\n    try {\n      // Validate income data\n      if (!income.source) {\n        console.error('Missing source in income');\n        return false;\n      }\n      const amount = parseFloat(income.amount);\n      if (isNaN(amount) || amount <= 0) {\n        console.error('Invalid income amount:', income.amount);\n        return false;\n      }\n\n      // Ensure we have a valid date\n      let incomeDate = income.date;\n      if (!incomeDate) {\n        incomeDate = new Date().toISOString().slice(0, 10);\n      }\n\n      // Create new income object\n      const newIncome = {\n        ...income,\n        amount: amount,\n        id: Date.now(),\n        date: incomeDate,\n        userId: currentUser.id\n      };\n      setIncomes(prevIncomes => [...prevIncomes, newIncome]);\n      return true;\n    } catch (error) {\n      console.error('Error adding income:', error);\n      return false;\n    }\n  };\n\n  // Delete an expense\n  const deleteExpense = id => {\n    if (!id) return false;\n    try {\n      setExpenses(expenses.filter(expense => expense.id !== id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting expense:', error);\n      return false;\n    }\n  };\n\n  // Delete an income\n  const deleteIncome = id => {\n    if (!id) return false;\n    try {\n      setIncomes(incomes.filter(income => income.id !== id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting income:', error);\n      return false;\n    }\n  };\n\n  // Update budget settings\n  const updateBudget = (category, amount) => {\n    if (!category || category.trim() === '' || isNaN(parseFloat(amount))) {\n      return false;\n    }\n    try {\n      setBudgets(prevBudgets => ({\n        ...prevBudgets,\n        [category]: parseFloat(amount)\n      }));\n      return true;\n    } catch (error) {\n      console.error('Error updating budget:', error);\n      return false;\n    }\n  };\n\n  // Delete a budget\n  const deleteBudget = category => {\n    if (!category) return false;\n    try {\n      const updatedBudgets = {\n        ...budgets\n      };\n      delete updatedBudgets[category];\n      setBudgets(updatedBudgets);\n      return true;\n    } catch (error) {\n      console.error('Error deleting budget:', error);\n      return false;\n    }\n  };\n\n  // Check if adding this expense exceeds the budget\n  const checkBudgetAlerts = (newExpense, allExpenses = expenses) => {\n    if (!currentUser) return; // Don't process if no user is logged in\n    if (!newExpense || !newExpense.category) return;\n    const {\n      category\n    } = newExpense;\n\n    // Check if there's a budget for this category\n    if (budgets[category]) {\n      try {\n        // Get current month expenses for this category\n        const currentDate = new Date();\n        const currentMonth = currentDate.getMonth();\n        const currentYear = currentDate.getFullYear();\n        const monthlyExpenses = allExpenses.filter(expense => {\n          if (!expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear && expense.category === category && expense.userId === currentUser.id;\n          } catch (e) {\n            console.error('Invalid date format:', expense.date);\n            return false;\n          }\n        });\n        const totalSpent = monthlyExpenses.reduce((sum, expense) => {\n          const amount = parseFloat(expense.amount);\n          return sum + (isNaN(amount) ? 0 : amount);\n        }, 0);\n        const budgetAmount = parseFloat(budgets[category]);\n        if (!isNaN(budgetAmount) && totalSpent > budgetAmount) {\n          var _currentUser$preferen;\n          // Create new alert\n          const newAlert = {\n            id: Date.now(),\n            message: `Budget alert: You've exceeded your ${category} budget of $${budgetAmount.toFixed(2)}`,\n            category: category,\n            read: false,\n            date: new Date().toISOString(),\n            userId: currentUser.id\n          };\n          setAlerts(prevAlerts => [...prevAlerts, newAlert]);\n\n          // Send email alert if user has enabled email notifications\n          if ((currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$preferen = currentUser.preferences) === null || _currentUser$preferen === void 0 ? void 0 : _currentUser$preferen.emailNotifications) !== false) {\n            if (currentUser.email) {\n              sendBudgetAlertEmail(currentUser, category, budgetAmount, totalSpent).then(result => {\n                setEmailStatus({\n                  sent: result.success,\n                  error: result.success ? null : result.message\n                });\n              }).catch(error => {\n                setEmailStatus({\n                  sent: false,\n                  error: error.message || 'Error sending email'\n                });\n              });\n            } else {\n              setEmailStatus({\n                sent: false,\n                error: \"No email address found for user\"\n              });\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error checking budget alerts:', error);\n      }\n    }\n  };\n\n  // Mark an alert as read\n  const markAlertAsRead = id => {\n    if (!id) return false;\n    try {\n      setAlerts(alerts.map(alert => alert.id === id ? {\n        ...alert,\n        read: true\n      } : alert));\n      return true;\n    } catch (error) {\n      console.error('Error marking alert as read:', error);\n      return false;\n    }\n  };\n\n  // ===== EXPENSE CATEGORIES MANAGEMENT =====\n\n  // Get available expense categories\n  const getExpenseCategories = () => {\n    return expenseCategories;\n  };\n\n  // Add an expense category\n  const addExpenseCategory = category => {\n    if (!category || category.trim() === '') return false;\n    try {\n      if (!expenseCategories.includes(category)) {\n        setExpenseCategories([...expenseCategories, category]);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error adding expense category:', error);\n      return false;\n    }\n  };\n\n  // Delete an expense category\n  const deleteExpenseCategory = category => {\n    if (!category) return false;\n    try {\n      // Don't allow deleting the \"Other\" category\n      if (category === 'Other') return false;\n\n      // Check if the category is in use\n      const isCategoryInUse = expenses.some(expense => expense.category === category);\n      if (isCategoryInUse) return false;\n      setExpenseCategories(expenseCategories.filter(cat => cat !== category));\n\n      // Also delete any budget for this category\n      if (budgets[category]) {\n        deleteBudget(category);\n      }\n      return true;\n    } catch (error) {\n      console.error('Error deleting expense category:', error);\n      return false;\n    }\n  };\n\n  // Edit an expense category\n  const editExpenseCategory = (oldCategory, newCategory) => {\n    if (!oldCategory || !newCategory || newCategory.trim() === '') return false;\n    try {\n      // Don't allow editing the \"Other\" category\n      if (oldCategory === 'Other') return false;\n\n      // Check if the new category name already exists\n      if (expenseCategories.includes(newCategory) && newCategory !== oldCategory) return false;\n\n      // Check if the category is in use\n      const isCategoryInUse = expenses.some(expense => expense.category === oldCategory);\n      if (isCategoryInUse) return false;\n      setExpenseCategories(expenseCategories.map(cat => cat === oldCategory ? newCategory : cat));\n\n      // Update any budget for this category\n      if (budgets[oldCategory]) {\n        const budgetAmount = budgets[oldCategory];\n        deleteBudget(oldCategory);\n        updateBudget(newCategory, budgetAmount);\n      }\n      return true;\n    } catch (error) {\n      console.error('Error editing expense category:', error);\n      return false;\n    }\n  };\n\n  // ===== INCOME CATEGORIES MANAGEMENT =====\n\n  // Get available income categories\n  const getIncomeCategories = () => {\n    return incomeCategories;\n  };\n\n  // Add an income category\n  const addIncomeCategory = category => {\n    if (!category || category.trim() === '') return false;\n    try {\n      if (!incomeCategories.includes(category)) {\n        setIncomeCategories([...incomeCategories, category]);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error adding income category:', error);\n      return false;\n    }\n  };\n\n  // Delete an income category\n  const deleteIncomeCategory = category => {\n    if (!category) return false;\n    try {\n      // Don't allow deleting the \"Other\" category\n      if (category === 'Other') return false;\n\n      // Check if the category is in use\n      const isCategoryInUse = incomes.some(income => income.source === category);\n      if (isCategoryInUse) return false;\n      setIncomeCategories(incomeCategories.filter(cat => cat !== category));\n      return true;\n    } catch (error) {\n      console.error('Error deleting income category:', error);\n      return false;\n    }\n  };\n\n  // Edit an income category\n  const editIncomeCategory = (oldCategory, newCategory) => {\n    if (!oldCategory || !newCategory || newCategory.trim() === '') return false;\n    try {\n      // Don't allow editing the \"Other\" category\n      if (oldCategory === 'Other') return false;\n\n      // Check if the new category name already exists\n      if (incomeCategories.includes(newCategory) && newCategory !== oldCategory) return false;\n\n      // Check if the category is in use\n      const isCategoryInUse = incomes.some(income => income.source === oldCategory);\n      if (isCategoryInUse) return false;\n      setIncomeCategories(incomeCategories.map(cat => cat === oldCategory ? newCategory : cat));\n      return true;\n    } catch (error) {\n      console.error('Error editing income category:', error);\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ExpenseContext.Provider, {\n    value: {\n      expenses,\n      addExpense,\n      deleteExpense,\n      incomes,\n      addIncome,\n      deleteIncome,\n      budgets,\n      updateBudget,\n      deleteBudget,\n      alerts,\n      markAlertAsRead,\n      emailStatus,\n      // Expense categories\n      expenseCategories,\n      getExpenseCategories,\n      addExpenseCategory,\n      deleteExpenseCategory,\n      editExpenseCategory,\n      // Income categories\n      incomeCategories,\n      getIncomeCategories,\n      addIncomeCategory,\n      deleteIncomeCategory,\n      editIncomeCategory\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 527,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseProvider, \"/v1J/pNinAzDWzhKJ1J24/Q/ekQ=\");\n_c = ExpenseProvider;\nvar _c;\n$RefreshReg$(_c, \"ExpenseProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AuthContext","sendBudgetAlertEmail","jsxDEV","_jsxDEV","ExpenseContext","ExpenseProvider","children","_s","expenses","setExpenses","incomes","setIncomes","budgets","setBudgets","alerts","setAlerts","emailStatus","setEmailStatus","sent","error","expenseCategories","setExpenseCategories","incomeCategories","setIncomeCategories","currentUser","DEFAULT_EXPENSE_CATEGORIES","DEFAULT_INCOME_CATEGORIES","getUserStorageKey","key","id","savedExpenses","JSON","parse","localStorage","getItem","Array","isArray","savedIncomes","savedBudgets","savedAlerts","savedExpenseCategories","savedIncomeCategories","console","setItem","stringify","length","timer","setTimeout","clearTimeout","addExpense","expense","category","amount","parseFloat","isNaN","expenseDate","date","Date","toISOString","slice","newExpense","now","userId","prevExpenses","updatedExpenses","checkBudgetAlerts","addIncome","income","source","incomeDate","newIncome","prevIncomes","deleteExpense","filter","deleteIncome","updateBudget","trim","prevBudgets","deleteBudget","updatedBudgets","allExpenses","currentDate","currentMonth","getMonth","currentYear","getFullYear","monthlyExpenses","e","totalSpent","reduce","sum","budgetAmount","_currentUser$preferen","newAlert","message","toFixed","read","prevAlerts","preferences","emailNotifications","email","then","result","success","catch","markAlertAsRead","map","alert","getExpenseCategories","addExpenseCategory","includes","deleteExpenseCategory","isCategoryInUse","some","cat","editExpenseCategory","oldCategory","newCategory","getIncomeCategories","addIncomeCategory","deleteIncomeCategory","editIncomeCategory","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker - Copy/expence-tracker/src/context/ExpenseContext.js"],"sourcesContent":["// src/context/ExpenseContext.js\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from './AuthContext';\r\nimport { sendBudgetAlertEmail } from '../services/EmailService';\r\n\r\nexport const ExpenseContext = createContext();\r\n\r\nexport const ExpenseProvider = ({ children }) => {\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [incomes, setIncomes] = useState([]);\r\n  const [budgets, setBudgets] = useState({});\r\n  const [alerts, setAlerts] = useState([]);\r\n  const [emailStatus, setEmailStatus] = useState({ sent: false, error: null });\r\n  const [expenseCategories, setExpenseCategories] = useState([]);\r\n  const [incomeCategories, setIncomeCategories] = useState([]);\r\n  \r\n  const { currentUser } = useContext(AuthContext);\r\n  \r\n  // Default categories if none are found\r\n  const DEFAULT_EXPENSE_CATEGORIES = [\r\n    'Food', 'Housing', 'Transportation', 'Entertainment', \r\n    'Utilities', 'Healthcare', 'Shopping', 'Personal Care', 'Education', 'Other'\r\n  ];\r\n  \r\n  const DEFAULT_INCOME_CATEGORIES = [\r\n    'Salary', 'Freelance', 'Investment', 'Gift', \r\n    'Business', 'Side Hustle', 'Rental', 'Other'\r\n  ];\r\n  \r\n  // Generate unique storage keys for current user\r\n  const getUserStorageKey = (key) => {\r\n    if (!currentUser) return key;\r\n    return `${key}_${currentUser.id}`;\r\n  };\r\n  \r\n  // Load data from localStorage on initial render or when user changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      try {\r\n        // Load expenses\r\n        const savedExpenses = JSON.parse(localStorage.getItem(getUserStorageKey('expenses'))) || [];\r\n        setExpenses(Array.isArray(savedExpenses) ? savedExpenses : []);\r\n        \r\n        // Load incomes\r\n        const savedIncomes = JSON.parse(localStorage.getItem(getUserStorageKey('incomes'))) || [];\r\n        setIncomes(Array.isArray(savedIncomes) ? savedIncomes : []);\r\n        \r\n        // Load budgets\r\n        const savedBudgets = JSON.parse(localStorage.getItem(getUserStorageKey('budgets'))) || {};\r\n        setBudgets(typeof savedBudgets === 'object' ? savedBudgets : {});\r\n        \r\n        // Load alerts\r\n        const savedAlerts = JSON.parse(localStorage.getItem(getUserStorageKey('alerts'))) || [];\r\n        setAlerts(Array.isArray(savedAlerts) ? savedAlerts : []);\r\n        \r\n        // Load expense categories\r\n        const savedExpenseCategories = JSON.parse(localStorage.getItem(getUserStorageKey('expenseCategories'))) || DEFAULT_EXPENSE_CATEGORIES;\r\n        setExpenseCategories(Array.isArray(savedExpenseCategories) ? savedExpenseCategories : DEFAULT_EXPENSE_CATEGORIES);\r\n        \r\n        // Load income categories\r\n        const savedIncomeCategories = JSON.parse(localStorage.getItem(getUserStorageKey('incomeCategories'))) || DEFAULT_INCOME_CATEGORIES;\r\n        setIncomeCategories(Array.isArray(savedIncomeCategories) ? savedIncomeCategories : DEFAULT_INCOME_CATEGORIES);\r\n      } catch (error) {\r\n        console.error('Error loading data from localStorage:', error);\r\n        // Set defaults if there's an error\r\n        setExpenses([]);\r\n        setIncomes([]);\r\n        setBudgets({});\r\n        setAlerts([]);\r\n        setExpenseCategories(DEFAULT_EXPENSE_CATEGORIES);\r\n        setIncomeCategories(DEFAULT_INCOME_CATEGORIES);\r\n      }\r\n    } else {\r\n      // Clear data when logged out\r\n      setExpenses([]);\r\n      setIncomes([]);\r\n      setBudgets({});\r\n      setAlerts([]);\r\n      setExpenseCategories(DEFAULT_EXPENSE_CATEGORIES);\r\n      setIncomeCategories(DEFAULT_INCOME_CATEGORIES);\r\n    }\r\n  }, [currentUser]);\r\n  \r\n  // Save data to localStorage whenever it changes\r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(expenses)) {\r\n      localStorage.setItem(getUserStorageKey('expenses'), JSON.stringify(expenses));\r\n    }\r\n  }, [expenses, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(incomes)) {\r\n      localStorage.setItem(getUserStorageKey('incomes'), JSON.stringify(incomes));\r\n    }\r\n  }, [incomes, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser && budgets && typeof budgets === 'object') {\r\n      localStorage.setItem(getUserStorageKey('budgets'), JSON.stringify(budgets));\r\n    }\r\n  }, [budgets, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(alerts)) {\r\n      localStorage.setItem(getUserStorageKey('alerts'), JSON.stringify(alerts));\r\n    }\r\n  }, [alerts, currentUser]);\r\n  \r\n  // Save categories to localStorage whenever they change\r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(expenseCategories) && expenseCategories.length > 0) {\r\n      localStorage.setItem(getUserStorageKey('expenseCategories'), JSON.stringify(expenseCategories));\r\n    }\r\n  }, [expenseCategories, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(incomeCategories) && incomeCategories.length > 0) {\r\n      localStorage.setItem(getUserStorageKey('incomeCategories'), JSON.stringify(incomeCategories));\r\n    }\r\n  }, [incomeCategories, currentUser]);\r\n  \r\n  // Clear email status after some time\r\n  useEffect(() => {\r\n    if (emailStatus.sent || emailStatus.error) {\r\n      const timer = setTimeout(() => {\r\n        setEmailStatus({ sent: false, error: null });\r\n      }, 5000);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [emailStatus]);\r\n  \r\n  // Add a new expense with validation\r\n  const addExpense = (expense) => {\r\n    if (!currentUser) return false; // Don't proceed if not logged in\r\n    \r\n    try {\r\n      // Validate expense data\r\n      if (!expense.category) {\r\n        console.error('Missing category in expense');\r\n        return false;\r\n      }\r\n      \r\n      const amount = parseFloat(expense.amount);\r\n      if (isNaN(amount) || amount <= 0) {\r\n        console.error('Invalid expense amount:', expense.amount);\r\n        return false;\r\n      }\r\n      \r\n      // Ensure we have a valid date\r\n      let expenseDate = expense.date;\r\n      if (!expenseDate) {\r\n        expenseDate = new Date().toISOString().slice(0, 10);\r\n      }\r\n      \r\n      // Create new expense object\r\n      const newExpense = {\r\n        ...expense,\r\n        amount: amount,\r\n        id: Date.now(),\r\n        date: expenseDate,\r\n        userId: currentUser.id\r\n      };\r\n      \r\n      setExpenses(prevExpenses => {\r\n        const updatedExpenses = [...prevExpenses, newExpense];\r\n        \r\n        // Check for budget alerts after state update\r\n        setTimeout(() => {\r\n          checkBudgetAlerts(newExpense, updatedExpenses);\r\n        }, 0);\r\n        \r\n        return updatedExpenses;\r\n      });\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error adding expense:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Add a new income with validation\r\n  const addIncome = (income) => {\r\n    if (!currentUser) return false;\r\n    \r\n    try {\r\n      // Validate income data\r\n      if (!income.source) {\r\n        console.error('Missing source in income');\r\n        return false;\r\n      }\r\n      \r\n      const amount = parseFloat(income.amount);\r\n      if (isNaN(amount) || amount <= 0) {\r\n        console.error('Invalid income amount:', income.amount);\r\n        return false;\r\n      }\r\n      \r\n      // Ensure we have a valid date\r\n      let incomeDate = income.date;\r\n      if (!incomeDate) {\r\n        incomeDate = new Date().toISOString().slice(0, 10);\r\n      }\r\n      \r\n      // Create new income object\r\n      const newIncome = {\r\n        ...income,\r\n        amount: amount,\r\n        id: Date.now(),\r\n        date: incomeDate,\r\n        userId: currentUser.id\r\n      };\r\n      \r\n      setIncomes(prevIncomes => [...prevIncomes, newIncome]);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error adding income:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete an expense\r\n  const deleteExpense = (id) => {\r\n    if (!id) return false;\r\n    \r\n    try {\r\n      setExpenses(expenses.filter(expense => expense.id !== id));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting expense:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete an income\r\n  const deleteIncome = (id) => {\r\n    if (!id) return false;\r\n    \r\n    try {\r\n      setIncomes(incomes.filter(income => income.id !== id));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting income:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Update budget settings\r\n  const updateBudget = (category, amount) => {\r\n    if (!category || category.trim() === '' || isNaN(parseFloat(amount))) {\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      setBudgets(prevBudgets => ({\r\n        ...prevBudgets,\r\n        [category]: parseFloat(amount)\r\n      }));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating budget:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete a budget\r\n  const deleteBudget = (category) => {\r\n    if (!category) return false;\r\n    \r\n    try {\r\n      const updatedBudgets = { ...budgets };\r\n      delete updatedBudgets[category];\r\n      setBudgets(updatedBudgets);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting budget:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Check if adding this expense exceeds the budget\r\n  const checkBudgetAlerts = (newExpense, allExpenses = expenses) => {\r\n    if (!currentUser) return; // Don't process if no user is logged in\r\n    if (!newExpense || !newExpense.category) return;\r\n    \r\n    const { category } = newExpense;\r\n    \r\n    // Check if there's a budget for this category\r\n    if (budgets[category]) {\r\n      try {\r\n        // Get current month expenses for this category\r\n        const currentDate = new Date();\r\n        const currentMonth = currentDate.getMonth();\r\n        const currentYear = currentDate.getFullYear();\r\n        \r\n        const monthlyExpenses = allExpenses.filter(expense => {\r\n          if (!expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getMonth() === currentMonth && \r\n                  expenseDate.getFullYear() === currentYear &&\r\n                  expense.category === category &&\r\n                  expense.userId === currentUser.id;\r\n          } catch (e) {\r\n            console.error('Invalid date format:', expense.date);\r\n            return false;\r\n          }\r\n        });\r\n        \r\n        const totalSpent = monthlyExpenses.reduce((sum, expense) => {\r\n          const amount = parseFloat(expense.amount);\r\n          return sum + (isNaN(amount) ? 0 : amount);\r\n        }, 0);\r\n        \r\n        const budgetAmount = parseFloat(budgets[category]);\r\n        \r\n        if (!isNaN(budgetAmount) && totalSpent > budgetAmount) {\r\n          // Create new alert\r\n          const newAlert = {\r\n            id: Date.now(),\r\n            message: `Budget alert: You've exceeded your ${category} budget of $${budgetAmount.toFixed(2)}`,\r\n            category: category,\r\n            read: false,\r\n            date: new Date().toISOString(),\r\n            userId: currentUser.id\r\n          };\r\n          \r\n          setAlerts(prevAlerts => [...prevAlerts, newAlert]);\r\n          \r\n          // Send email alert if user has enabled email notifications\r\n          if (currentUser?.preferences?.emailNotifications !== false) {\r\n            if (currentUser.email) {\r\n              sendBudgetAlertEmail(\r\n                currentUser,\r\n                category,\r\n                budgetAmount,\r\n                totalSpent\r\n              ).then(result => {\r\n                setEmailStatus({ \r\n                  sent: result.success, \r\n                  error: result.success ? null : result.message \r\n                });\r\n              }).catch(error => {\r\n                setEmailStatus({ \r\n                  sent: false, \r\n                  error: error.message || 'Error sending email'\r\n                });\r\n              });\r\n            } else {\r\n              setEmailStatus({ \r\n                sent: false, \r\n                error: \"No email address found for user\" \r\n              });\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking budget alerts:', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Mark an alert as read\r\n  const markAlertAsRead = (id) => {\r\n    if (!id) return false;\r\n    \r\n    try {\r\n      setAlerts(alerts.map(alert => \r\n        alert.id === id ? { ...alert, read: true } : alert\r\n      ));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error marking alert as read:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // ===== EXPENSE CATEGORIES MANAGEMENT =====\r\n  \r\n  // Get available expense categories\r\n  const getExpenseCategories = () => {\r\n    return expenseCategories;\r\n  };\r\n  \r\n  // Add an expense category\r\n  const addExpenseCategory = (category) => {\r\n    if (!category || category.trim() === '') return false;\r\n    \r\n    try {\r\n      if (!expenseCategories.includes(category)) {\r\n        setExpenseCategories([...expenseCategories, category]);\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error adding expense category:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete an expense category\r\n  const deleteExpenseCategory = (category) => {\r\n    if (!category) return false;\r\n    \r\n    try {\r\n      // Don't allow deleting the \"Other\" category\r\n      if (category === 'Other') return false;\r\n      \r\n      // Check if the category is in use\r\n      const isCategoryInUse = expenses.some(expense => expense.category === category);\r\n      if (isCategoryInUse) return false;\r\n      \r\n      setExpenseCategories(expenseCategories.filter(cat => cat !== category));\r\n      \r\n      // Also delete any budget for this category\r\n      if (budgets[category]) {\r\n        deleteBudget(category);\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting expense category:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Edit an expense category\r\n  const editExpenseCategory = (oldCategory, newCategory) => {\r\n    if (!oldCategory || !newCategory || newCategory.trim() === '') return false;\r\n    \r\n    try {\r\n      // Don't allow editing the \"Other\" category\r\n      if (oldCategory === 'Other') return false;\r\n      \r\n      // Check if the new category name already exists\r\n      if (expenseCategories.includes(newCategory) && newCategory !== oldCategory) return false;\r\n      \r\n      // Check if the category is in use\r\n      const isCategoryInUse = expenses.some(expense => expense.category === oldCategory);\r\n      if (isCategoryInUse) return false;\r\n      \r\n      setExpenseCategories(expenseCategories.map(cat => cat === oldCategory ? newCategory : cat));\r\n      \r\n      // Update any budget for this category\r\n      if (budgets[oldCategory]) {\r\n        const budgetAmount = budgets[oldCategory];\r\n        deleteBudget(oldCategory);\r\n        updateBudget(newCategory, budgetAmount);\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error editing expense category:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // ===== INCOME CATEGORIES MANAGEMENT =====\r\n  \r\n  // Get available income categories\r\n  const getIncomeCategories = () => {\r\n    return incomeCategories;\r\n  };\r\n  \r\n  // Add an income category\r\n  const addIncomeCategory = (category) => {\r\n    if (!category || category.trim() === '') return false;\r\n    \r\n    try {\r\n      if (!incomeCategories.includes(category)) {\r\n        setIncomeCategories([...incomeCategories, category]);\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error adding income category:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete an income category\r\n  const deleteIncomeCategory = (category) => {\r\n    if (!category) return false;\r\n    \r\n    try {\r\n      // Don't allow deleting the \"Other\" category\r\n      if (category === 'Other') return false;\r\n      \r\n      // Check if the category is in use\r\n      const isCategoryInUse = incomes.some(income => income.source === category);\r\n      if (isCategoryInUse) return false;\r\n      \r\n      setIncomeCategories(incomeCategories.filter(cat => cat !== category));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting income category:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Edit an income category\r\n  const editIncomeCategory = (oldCategory, newCategory) => {\r\n    if (!oldCategory || !newCategory || newCategory.trim() === '') return false;\r\n    \r\n    try {\r\n      // Don't allow editing the \"Other\" category\r\n      if (oldCategory === 'Other') return false;\r\n      \r\n      // Check if the new category name already exists\r\n      if (incomeCategories.includes(newCategory) && newCategory !== oldCategory) return false;\r\n      \r\n      // Check if the category is in use\r\n      const isCategoryInUse = incomes.some(income => income.source === oldCategory);\r\n      if (isCategoryInUse) return false;\r\n      \r\n      setIncomeCategories(incomeCategories.map(cat => cat === oldCategory ? newCategory : cat));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error editing income category:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <ExpenseContext.Provider \r\n      value={{ \r\n        expenses, \r\n        addExpense, \r\n        deleteExpense, \r\n        incomes, \r\n        addIncome,\r\n        deleteIncome,\r\n        budgets, \r\n        updateBudget,\r\n        deleteBudget,\r\n        alerts,\r\n        markAlertAsRead,\r\n        emailStatus,\r\n        // Expense categories\r\n        expenseCategories,\r\n        getExpenseCategories,\r\n        addExpenseCategory,\r\n        deleteExpenseCategory,\r\n        editExpenseCategory,\r\n        // Income categories\r\n        incomeCategories,\r\n        getIncomeCategories,\r\n        addIncomeCategory,\r\n        deleteIncomeCategory,\r\n        editIncomeCategory\r\n      }}>\r\n      {children}\r\n    </ExpenseContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}