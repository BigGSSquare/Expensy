{"ast":null,"code":"// src/services/EmailService.js\n// This is a service for sending emails\n\n// In a real application, you would integrate with a real email service like SendGrid, Mailgun, etc.\n// For this demo, we'll simulate email sending with a mock function\n\nexport const sendEmail = async (to, subject, content) => {\n  // For demo purposes, we'll log the email details\n  console.log(`Sending email to: ${to}`);\n  console.log(`Subject: ${subject}`);\n  console.log(`Content: ${content}`);\n\n  // Simulate API call to email service\n  try {\n    // In a real app, this would be an API call to your email service provider\n    // For example: await axios.post('https://api.emailservice.com/send', { to, subject, content })\n\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // For demo, return success\n    return {\n      success: true,\n      message: 'Email sent successfully'\n    };\n  } catch (error) {\n    console.error('Error sending email:', error);\n    return {\n      success: false,\n      message: 'Failed to send email',\n      error: error.message\n    };\n  }\n};\n\n// Function to send budget alert email\nexport const sendBudgetAlertEmail = async (user, category, budget, spent) => {\n  const to = user.email;\n  const subject = `Budget Alert: You've exceeded your ${category} budget`;\n  const content = `\n      <h2>Budget Alert</h2>\n      <p>Hello ${user.name},</p>\n      <p>This is to notify you that you've exceeded your budget for <strong>${category}</strong>.</p>\n      <p>\n        <strong>Budget:</strong> $${budget.toFixed(2)}<br>\n        <strong>Spent:</strong> $${spent.toFixed(2)}<br>\n        <strong>Over Budget:</strong> $${(spent - budget).toFixed(2)}\n      </p>\n      <p>Log in to your FinTrack account to review your expenses and adjust your budget if needed.</p>\n      <p>Thank you,<br>The FinTrack Team</p>\n    `;\n  return await sendEmail(to, subject, content);\n};","map":{"version":3,"names":["sendEmail","to","subject","content","console","log","Promise","resolve","setTimeout","success","message","error","sendBudgetAlertEmail","user","category","budget","spent","email","name","toFixed"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker/src/services/EmailService.js"],"sourcesContent":["// src/services/EmailService.js\r\n// This is a service for sending emails\r\n\r\n// In a real application, you would integrate with a real email service like SendGrid, Mailgun, etc.\r\n// For this demo, we'll simulate email sending with a mock function\r\n\r\nexport const sendEmail = async (to, subject, content) => {\r\n    // For demo purposes, we'll log the email details\r\n    console.log(`Sending email to: ${to}`);\r\n    console.log(`Subject: ${subject}`);\r\n    console.log(`Content: ${content}`);\r\n    \r\n    // Simulate API call to email service\r\n    try {\r\n      // In a real app, this would be an API call to your email service provider\r\n      // For example: await axios.post('https://api.emailservice.com/send', { to, subject, content })\r\n      \r\n      // Simulate network delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // For demo, return success\r\n      return {\r\n        success: true,\r\n        message: 'Email sent successfully'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error sending email:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to send email',\r\n        error: error.message\r\n      };\r\n    }\r\n  };\r\n  \r\n  // Function to send budget alert email\r\n  export const sendBudgetAlertEmail = async (user, category, budget, spent) => {\r\n    const to = user.email;\r\n    const subject = `Budget Alert: You've exceeded your ${category} budget`;\r\n    \r\n    const content = `\r\n      <h2>Budget Alert</h2>\r\n      <p>Hello ${user.name},</p>\r\n      <p>This is to notify you that you've exceeded your budget for <strong>${category}</strong>.</p>\r\n      <p>\r\n        <strong>Budget:</strong> $${budget.toFixed(2)}<br>\r\n        <strong>Spent:</strong> $${spent.toFixed(2)}<br>\r\n        <strong>Over Budget:</strong> $${(spent - budget).toFixed(2)}\r\n      </p>\r\n      <p>Log in to your FinTrack account to review your expenses and adjust your budget if needed.</p>\r\n      <p>Thank you,<br>The FinTrack Team</p>\r\n    `;\r\n    \r\n    return await sendEmail(to, subject, content);\r\n  };"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA,OAAO,MAAMA,SAAS,GAAG,MAAAA,CAAOC,EAAE,EAAEC,OAAO,EAAEC,OAAO,KAAK;EACrD;EACAC,OAAO,CAACC,GAAG,CAAC,qBAAqBJ,EAAE,EAAE,CAAC;EACtCG,OAAO,CAACC,GAAG,CAAC,YAAYH,OAAO,EAAE,CAAC;EAClCE,OAAO,CAACC,GAAG,CAAC,YAAYF,OAAO,EAAE,CAAC;;EAElC;EACA,IAAI;IACF;IACA;;IAEA;IACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA,OAAO;MACLE,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACLF,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,sBAAsB;MAC/BC,KAAK,EAAEA,KAAK,CAACD;IACf,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAME,oBAAoB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,KAAK;EAC3E,MAAMf,EAAE,GAAGY,IAAI,CAACI,KAAK;EACrB,MAAMf,OAAO,GAAG,sCAAsCY,QAAQ,SAAS;EAEvE,MAAMX,OAAO,GAAG;AACpB;AACA,iBAAiBU,IAAI,CAACK,IAAI;AAC1B,8EAA8EJ,QAAQ;AACtF;AACA,oCAAoCC,MAAM,CAACI,OAAO,CAAC,CAAC,CAAC;AACrD,mCAAmCH,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC;AACnD,yCAAyC,CAACH,KAAK,GAAGD,MAAM,EAAEI,OAAO,CAAC,CAAC,CAAC;AACpE;AACA;AACA;AACA,KAAK;EAED,OAAO,MAAMnB,SAAS,CAACC,EAAE,EAAEC,OAAO,EAAEC,OAAO,CAAC;AAC9C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}