{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence tracker final\\\\expence-tracker\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, updateProfile as updateFirebaseProfile, onAuthStateChanged } from 'firebase/auth';\nimport { auth, db } from '../config/firebase';\nimport { doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Listen for auth state changes\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      if (user) {\n        try {\n          // Get additional user data from Firestore\n          const userDoc = await getDoc(doc(db, 'users', user.uid));\n          if (userDoc.exists()) {\n            // Combine auth user with Firestore data\n            setCurrentUser({\n              uid: user.uid,\n              email: user.email,\n              name: user.displayName || '',\n              ...userDoc.data()\n            });\n          } else {\n            // If no additional data exists, just use auth data\n            setCurrentUser({\n              uid: user.uid,\n              email: user.email,\n              name: user.displayName || ''\n            });\n          }\n        } catch (error) {\n          console.error(\"Error getting user document:\", error);\n          setCurrentUser({\n            uid: user.uid,\n            email: user.email,\n            name: user.displayName || ''\n          });\n        }\n      } else {\n        setCurrentUser(null);\n      }\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // Register function\n  const register = async (name, email, password) => {\n    try {\n      // Create user in Firebase Auth\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // Set display name\n      await updateFirebaseProfile(user, {\n        displayName: name\n      });\n\n      // Create user document in Firestore\n      await setDoc(doc(db, 'users', user.uid), {\n        name,\n        email,\n        created: new Date().toISOString(),\n        preferences: {\n          emailNotifications: true\n        }\n      });\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    }\n  };\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      return true;\n    } catch (error) {\n      console.error('Logout error:', error);\n      return false;\n    }\n  };\n\n  // Update profile\n  const updateProfile = async updatedData => {\n    if (!currentUser) return false;\n    try {\n      // Update Firestore document\n      const userRef = doc(db, 'users', currentUser.uid);\n      await updateDoc(userRef, updatedData);\n\n      // Update display name if included\n      if (updatedData.name && auth.currentUser) {\n        await updateFirebaseProfile(auth.currentUser, {\n          displayName: updatedData.name\n        });\n      }\n\n      // Update local state\n      setCurrentUser(prev => ({\n        ...prev,\n        ...updatedData\n      }));\n      return true;\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return false;\n    }\n  };\n\n  // Change password function\n  const changePassword = async (oldPassword, newPassword) => {\n    // This is a placeholder - we'll implement this properly later\n    console.log(\"Password change functionality will be implemented later\");\n    return false;\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      loading,\n      login,\n      register,\n      logout,\n      updateProfile,\n      changePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","updateProfile","updateFirebaseProfile","onAuthStateChanged","auth","db","doc","setDoc","getDoc","updateDoc","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","unsubscribe","user","userDoc","uid","exists","email","name","displayName","data","error","console","register","password","userCredential","created","Date","toISOString","preferences","emailNotifications","login","logout","updatedData","userRef","prev","changePassword","oldPassword","newPassword","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence tracker final/expence-tracker/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  updateProfile as updateFirebaseProfile,\r\n  onAuthStateChanged \r\n} from 'firebase/auth';\r\nimport { auth, db } from '../config/firebase';\r\nimport { doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Listen for auth state changes\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      if (user) {\r\n        try {\r\n          // Get additional user data from Firestore\r\n          const userDoc = await getDoc(doc(db, 'users', user.uid));\r\n          \r\n          if (userDoc.exists()) {\r\n            // Combine auth user with Firestore data\r\n            setCurrentUser({\r\n              uid: user.uid,\r\n              email: user.email,\r\n              name: user.displayName || '',\r\n              ...userDoc.data()\r\n            });\r\n          } else {\r\n            // If no additional data exists, just use auth data\r\n            setCurrentUser({\r\n              uid: user.uid,\r\n              email: user.email,\r\n              name: user.displayName || ''\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error getting user document:\", error);\r\n          setCurrentUser({\r\n            uid: user.uid,\r\n            email: user.email,\r\n            name: user.displayName || ''\r\n          });\r\n        }\r\n      } else {\r\n        setCurrentUser(null);\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Register function\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      // Create user in Firebase Auth\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n      \r\n      // Set display name\r\n      await updateFirebaseProfile(user, { displayName: name });\r\n      \r\n      // Create user document in Firestore\r\n      await setDoc(doc(db, 'users', user.uid), {\r\n        name,\r\n        email,\r\n        created: new Date().toISOString(),\r\n        preferences: {\r\n          emailNotifications: true\r\n        }\r\n      });\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    try {\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = async () => {\r\n    try {\r\n      await signOut(auth);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Update profile\r\n  const updateProfile = async (updatedData) => {\r\n    if (!currentUser) return false;\r\n    \r\n    try {\r\n      // Update Firestore document\r\n      const userRef = doc(db, 'users', currentUser.uid);\r\n      await updateDoc(userRef, updatedData);\r\n      \r\n      // Update display name if included\r\n      if (updatedData.name && auth.currentUser) {\r\n        await updateFirebaseProfile(auth.currentUser, {\r\n          displayName: updatedData.name\r\n        });\r\n      }\r\n      \r\n      // Update local state\r\n      setCurrentUser(prev => ({\r\n        ...prev,\r\n        ...updatedData\r\n      }));\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Profile update error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Change password function\r\n  const changePassword = async (oldPassword, newPassword) => {\r\n    // This is a placeholder - we'll implement this properly later\r\n    console.log(\"Password change functionality will be implemented later\");\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        currentUser,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n        updateProfile,\r\n        changePassword\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}