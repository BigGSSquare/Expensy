{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence tracker final\\\\expence-tracker\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ExpenseContext } from '../context/ExpenseContext';\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\nimport BudgetAlerts from './BudgetAlerts';\n// Import the Lucide React icons properly\nimport { MessageSquare, X, Send } from 'lucide-react';\nimport './Dashboard.css';\n\n// Rest of the file remains the same\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    expenses,\n    budgets,\n    alerts,\n    incomes\n  } = useContext(ExpenseContext);\n  const [chartData, setChartData] = useState([]);\n  const [categoryData, setCategoryData] = useState([]);\n  const [timeframe, setTimeframe] = useState('month');\n  const [isLoading, setIsLoading] = useState(true);\n\n  // AI Chatbot state\n  const [chatOpen, setChatOpen] = useState(false);\n  const [messages, setMessages] = useState([{\n    type: 'bot',\n    text: 'Hi there! I\\'m your financial assistant. Ask me anything about your expenses or budgets.'\n  }]);\n  const [newMessage, setNewMessage] = useState('');\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28AD3', '#FF6B6B', '#4ECDC4'];\n\n  // Initialize data on first load and when dependencies change\n  useEffect(() => {\n    setIsLoading(true);\n    prepareChartData();\n    prepareCategoryData();\n    setIsLoading(false);\n  }, [expenses, timeframe, incomes, budgets]);\n\n  // Safely calculate current month's data\n  const currentMonthData = () => {\n    // Default empty state\n    const defaultData = {\n      totalExpenses: 0,\n      totalIncome: 0,\n      balance: 0\n    };\n\n    // Return default if no data\n    if (!Array.isArray(expenses) || !Array.isArray(incomes)) {\n      return defaultData;\n    }\n    try {\n      const now = new Date();\n      const currentMonth = now.getMonth();\n      const currentYear = now.getFullYear();\n\n      // Filter expenses for current month with error handling\n      const monthlyExpenses = expenses.filter(expense => {\n        if (!expense || !expense.date) return false;\n        try {\n          const expenseDate = new Date(expense.date);\n          return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear;\n        } catch (e) {\n          return false;\n        }\n      });\n\n      // Filter incomes for current month with error handling\n      const monthlyIncome = incomes.filter(income => {\n        if (!income || !income.date) return false;\n        try {\n          const incomeDate = new Date(income.date);\n          return incomeDate.getMonth() === currentMonth && incomeDate.getFullYear() === currentYear;\n        } catch (e) {\n          return false;\n        }\n      });\n\n      // Calculate totals with safeguards against NaN\n      const totalExpenses = monthlyExpenses.reduce((sum, expense) => {\n        const amount = parseFloat(expense.amount);\n        return sum + (isNaN(amount) ? 0 : amount);\n      }, 0);\n      const totalIncome = monthlyIncome.reduce((sum, income) => {\n        const amount = parseFloat(income.amount);\n        return sum + (isNaN(amount) ? 0 : amount);\n      }, 0);\n      return {\n        totalExpenses,\n        totalIncome,\n        balance: totalIncome - totalExpenses\n      };\n    } catch (error) {\n      console.error('Error calculating monthly data:', error);\n      return defaultData;\n    }\n  };\n\n  // Safely prepare chart data\n  const prepareChartData = () => {\n    if (!Array.isArray(expenses) || expenses.length === 0) {\n      setChartData([]);\n      return;\n    }\n    try {\n      const now = new Date();\n      let filteredExpenses = [];\n      if (timeframe === 'week') {\n        // Last 7 days - use a safer approach with milliseconds\n        const lastWeek = new Date(now);\n        lastWeek.setDate(lastWeek.getDate() - 7);\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate >= lastWeek;\n          } catch (error) {\n            return false;\n          }\n        });\n      } else if (timeframe === 'month') {\n        // Current month\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate.getMonth() === now.getMonth() && expenseDate.getFullYear() === now.getFullYear();\n          } catch (error) {\n            return false;\n          }\n        });\n      } else if (timeframe === 'year') {\n        // Current year\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate.getFullYear() === now.getFullYear();\n          } catch (error) {\n            return false;\n          }\n        });\n      }\n\n      // Group by date\n      const groupedData = {};\n      filteredExpenses.forEach(expense => {\n        if (!expense || !expense.date) return;\n        const date = expense.date;\n        if (!groupedData[date]) {\n          groupedData[date] = 0;\n        }\n        const amount = parseFloat(expense.amount);\n        groupedData[date] += isNaN(amount) ? 0 : amount;\n      });\n\n      // Convert to array for recharts\n      const chartDataArray = Object.keys(groupedData).sort().map(date => ({\n        date,\n        amount: groupedData[date]\n      }));\n      setChartData(chartDataArray);\n    } catch (error) {\n      console.error('Error preparing chart data:', error);\n      setChartData([]);\n    }\n  };\n\n  // Safely prepare category data\n  const prepareCategoryData = () => {\n    if (!Array.isArray(expenses) || expenses.length === 0) {\n      setCategoryData([]);\n      return;\n    }\n    try {\n      const now = new Date();\n      let filteredExpenses = [];\n      if (timeframe === 'week') {\n        const lastWeek = new Date(now);\n        lastWeek.setDate(lastWeek.getDate() - 7);\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate >= lastWeek;\n          } catch (error) {\n            return false;\n          }\n        });\n      } else if (timeframe === 'month') {\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate.getMonth() === now.getMonth() && expenseDate.getFullYear() === now.getFullYear();\n          } catch (error) {\n            return false;\n          }\n        });\n      } else if (timeframe === 'year') {\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate.getFullYear() === now.getFullYear();\n          } catch (error) {\n            return false;\n          }\n        });\n      }\n\n      // Group by category\n      const categoryTotals = {};\n      filteredExpenses.forEach(expense => {\n        if (!expense || !expense.category) return;\n        const {\n          category,\n          amount\n        } = expense;\n        if (!categoryTotals[category]) {\n          categoryTotals[category] = 0;\n        }\n        const parsedAmount = parseFloat(amount);\n        categoryTotals[category] += isNaN(parsedAmount) ? 0 : parsedAmount;\n      });\n\n      // Convert to array for recharts\n      const categoryDataArray = Object.keys(categoryTotals).filter(category => categoryTotals[category] > 0) // Only include categories with values\n      .map(category => ({\n        name: category,\n        value: categoryTotals[category]\n      }));\n      setCategoryData(categoryDataArray);\n    } catch (error) {\n      console.error('Error preparing category data:', error);\n      setCategoryData([]);\n    }\n  };\n\n  // AI Assistant functions\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) return;\n\n    // Add user message\n    setMessages([...messages, {\n      type: 'user',\n      text: newMessage\n    }]);\n\n    // Process the message and generate a response\n    const response = generateAIResponse(newMessage);\n\n    // Add AI response with slight delay for natural feeling\n    setTimeout(() => {\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: response\n      }]);\n    }, 500);\n\n    // Clear input\n    setNewMessage('');\n  };\n  const generateAIResponse = message => {\n    // Get financial data for context\n    const financialData = currentMonthData();\n    const {\n      totalExpenses,\n      totalIncome,\n      balance\n    } = financialData;\n\n    // Check for different question types and provide relevant responses\n    const msgLower = message.toLowerCase();\n\n    // Balance related questions\n    if (msgLower.includes('balance') || msgLower.includes('surplus') || msgLower.includes('deficit')) {\n      if (balance >= 0) {\n        return `Your current balance is a surplus of $${balance.toFixed(2)}. You're doing well managing your budget this month!`;\n      } else {\n        return `Your current balance is a deficit of $${Math.abs(balance).toFixed(2)}. You might want to reduce some expenses to balance your budget.`;\n      }\n    }\n\n    // Income related questions\n    if (msgLower.includes('income') || msgLower.includes('earn')) {\n      return `Your total income this month is $${totalIncome.toFixed(2)}.`;\n    }\n\n    // Expense related questions\n    if (msgLower.includes('spend') || msgLower.includes('expense') || msgLower.includes('cost')) {\n      if (categoryData.length > 0) {\n        const topCategory = categoryData.sort((a, b) => b.value - a.value)[0];\n        return `Your total expenses this month are $${totalExpenses.toFixed(2)}. Your highest spending category is \"${topCategory.name}\" at $${topCategory.value.toFixed(2)}.`;\n      } else {\n        return `Your total expenses this month are $${totalExpenses.toFixed(2)}.`;\n      }\n    }\n\n    // Budget related questions\n    if (msgLower.includes('budget') || msgLower.includes('limit')) {\n      if (totalExpenses > totalIncome) {\n        return `You're currently over budget by $${(totalExpenses - totalIncome).toFixed(2)}. Consider cutting back on unnecessary expenses.`;\n      } else {\n        return `You're currently under budget by $${(totalIncome - totalExpenses).toFixed(2)}. Great job managing your finances!`;\n      }\n    }\n\n    // Saving related questions\n    if (msgLower.includes('save') || msgLower.includes('saving')) {\n      const savingRate = balance > 0 ? balance / totalIncome * 100 : 0;\n      return `Based on your current income and expenses, you're saving about ${savingRate.toFixed(1)}% of your income. Financial experts often recommend saving at least 20% of your income.`;\n    }\n\n    // Tips\n    if (msgLower.includes('tip') || msgLower.includes('advice') || msgLower.includes('help')) {\n      const tips = [\"Track all your expenses, even small ones. They add up over time.\", \"Try using the 50/30/20 rule: 50% for needs, 30% for wants, and 20% for savings.\", \"Consider setting up automatic transfers to a savings account when you receive income.\", \"Review your subscriptions regularly to cut unnecessary recurring expenses.\", \"For major purchases, follow the 24-hour rule: wait a day before buying to avoid impulse purchases.\"];\n      return tips[Math.floor(Math.random() * tips.length)];\n    }\n\n    // Default responses\n    const defaultResponses = [\"I can help you understand your spending patterns and budget. What would you like to know?\", \"I can provide insights on your expenses, income, or budget. Feel free to ask specific questions.\", \"Would you like to know about your spending by category, your savings rate, or budget status?\", \"I'm here to help with your financial questions. Ask me about your balance, expenses, or budget.\"];\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n  };\n\n  // Handle enter key for sending message\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  // Safely render the expense line chart\n  const renderExpenseLineChart = () => {\n    if (!chartData || chartData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for the selected timeframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          tick: {\n            fontSize: 12\n          },\n          tickFormatter: date => {\n            try {\n              if (timeframe === 'year') {\n                return new Date(date).toLocaleDateString(undefined, {\n                  month: 'short'\n                });\n              }\n              return new Date(date).toLocaleDateString(undefined, {\n                month: 'numeric',\n                day: 'numeric'\n              });\n            } catch (e) {\n              return date;\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          tickFormatter: value => `$${value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => [`$${parseFloat(value).toFixed(2)}`, 'Amount'],\n          labelFormatter: label => {\n            try {\n              return new Date(label).toLocaleDateString();\n            } catch (e) {\n              return label;\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"amount\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          },\n          name: \"Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Safely render the category pie chart\n  const renderCategoryPieChart = () => {\n    if (!categoryData || categoryData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for the selected timeframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Calculate total for percentage\n    const total = categoryData.reduce((sum, item) => sum + item.value, 0);\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(PieChart, {\n        children: [/*#__PURE__*/_jsxDEV(Pie, {\n          data: categoryData,\n          cx: \"50%\",\n          cy: \"50%\",\n          labelLine: true,\n          outerRadius: 80,\n          fill: \"#8884d8\",\n          dataKey: \"value\",\n          label: ({\n            name,\n            value\n          }) => {\n            const percent = total > 0 ? (value / total * 100).toFixed(0) : 0;\n            return `${name}: ${percent}%`;\n          },\n          children: categoryData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n            fill: COLORS[index % COLORS.length]\n          }, `cell-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => [`$${parseFloat(value).toFixed(2)}`, 'Amount'],\n          labelFormatter: name => name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Safely render the budget comparison bar chart\n  const renderBudgetComparisonChart = () => {\n    if (!categoryData || categoryData.length === 0 || !budgets) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for the selected timeframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Map budget data with safeguards\n    const budgetData = categoryData.filter(item => item.name && typeof item.value === 'number').map(item => {\n      const budgetAmount = parseFloat(budgets[item.name] || 0);\n      return {\n        name: item.name,\n        actual: item.value,\n        budget: isNaN(budgetAmount) ? 0 : budgetAmount\n      };\n    }).filter(item => item.actual > 0 || item.budget > 0); // Only include items with values\n\n    if (budgetData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No budget data available for comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: budgetData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\",\n          tick: {\n            fontSize: 12\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          tickFormatter: value => `$${value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => [`$${parseFloat(value).toFixed(2)}`, 'Amount'],\n          labelFormatter: name => name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"actual\",\n          fill: \"#FF8042\",\n          name: \"Actual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"budget\",\n          fill: \"#8884d8\",\n          name: \"Budget\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Calculate monthly data outside the JSX\n  const monthlyData = currentMonthData();\n  const totalExpenses = monthlyData.totalExpenses;\n  const totalIncome = monthlyData.totalIncome;\n  const balance = monthlyData.balance;\n\n  // Format currency values\n  const formatCurrency = value => {\n    return `$${parseFloat(value).toFixed(2)}`;\n  };\n\n  // Loading indicator\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard loading\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading dashboard data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Expense Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/add\",\n        className: \"action-btn expense-btn\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/add-income\",\n        className: \"action-btn income-btn\",\n        children: \"Add Income\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 7\n    }, this), Array.isArray(alerts) && alerts.filter(alert => !alert.read).length > 0 && /*#__PURE__*/_jsxDEV(BudgetAlerts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-boxes\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-box income-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-title\",\n          children: \"Monthly Income\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-value\",\n          children: formatCurrency(totalIncome)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-box expense-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-title\",\n          children: \"Monthly Expenses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-value\",\n          children: formatCurrency(totalExpenses)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `summary-box balance-box ${balance >= 0 ? 'positive' : 'negative'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-title\",\n          children: \"Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-value\",\n          children: formatCurrency(Math.abs(balance))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-label\",\n          children: balance >= 0 ? 'Surplus' : 'Deficit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeframe-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'week' ? 'active' : '',\n        onClick: () => setTimeframe('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'month' ? 'active' : '',\n        onClick: () => setTimeframe('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'year' ? 'active' : '',\n        onClick: () => setTimeframe('year'),\n        children: \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Spending Over Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 9\n      }, this), renderExpenseLineChart()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Spending by Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 11\n        }, this), renderCategoryPieChart()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Budget vs. Actual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 11\n        }, this), renderBudgetComparisonChart()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-assistant ${chatOpen ? 'open' : ''}`,\n      children: !chatOpen ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chat-toggle-btn\",\n        onClick: () => setChatOpen(true),\n        \"aria-label\": \"Open financial assistant\",\n        children: [/*#__PURE__*/_jsxDEV(MessageSquare, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Financial Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Financial Assistant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chat-close-btn\",\n            onClick: () => setChatOpen(false),\n            \"aria-label\": \"Close financial assistant\",\n            children: /*#__PURE__*/_jsxDEV(X, {\n              size: 18\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-message ${msg.type}`,\n            children: msg.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            onKeyPress: handleKeyPress,\n            placeholder: \"Ask about your finances...\",\n            className: \"chat-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chat-send-btn\",\n            onClick: handleSendMessage,\n            \"aria-label\": \"Send message\",\n            children: /*#__PURE__*/_jsxDEV(Send, {\n              size: 18\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 517,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"7RjWWSO+rOBiJxNii9ZpBhz69Ho=\");\n_c = Dashboard;\nexport default Dashboard;\n\n//OLD PREVOIUS CODE USED HERE:\n/*import React, { useContext, useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; \r\nimport { ExpenseContext } from '../context/ExpenseContext';\r\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\r\nimport BudgetAlerts from './BudgetAlerts';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard = () => {\r\n  const { expenses, budgets, alerts, incomes } = useContext(ExpenseContext);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [categoryData, setCategoryData] = useState([]);\r\n  const [timeframe, setTimeframe] = useState('month');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28AD3', '#FF6B6B', '#4ECDC4'];\r\n  \r\n  // Initialize data on first load and when dependencies change\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    prepareChartData();\r\n    prepareCategoryData();\r\n    setIsLoading(false);\r\n  }, [expenses, timeframe, incomes, budgets]);\r\n  \r\n  // Safely calculate current month's data\r\n  const currentMonthData = () => {\r\n    // Default empty state\r\n    const defaultData = {\r\n      totalExpenses: 0,\r\n      totalIncome: 0,\r\n      balance: 0\r\n    };\r\n    \r\n    // Return default if no data\r\n    if (!Array.isArray(expenses) || !Array.isArray(incomes)) {\r\n      return defaultData;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      const currentMonth = now.getMonth();\r\n      const currentYear = now.getFullYear();\r\n      \r\n      // Filter expenses for current month with error handling\r\n      const monthlyExpenses = expenses.filter(expense => {\r\n        if (!expense || !expense.date) return false;\r\n        \r\n        try {\r\n          const expenseDate = new Date(expense.date);\r\n          return expenseDate.getMonth() === currentMonth && \r\n                 expenseDate.getFullYear() === currentYear;\r\n        } catch (e) {\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      // Filter incomes for current month with error handling\r\n      const monthlyIncome = incomes.filter(income => {\r\n        if (!income || !income.date) return false;\r\n        \r\n        try {\r\n          const incomeDate = new Date(income.date);\r\n          return incomeDate.getMonth() === currentMonth && \r\n                 incomeDate.getFullYear() === currentYear;\r\n        } catch (e) {\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      // Calculate totals with safeguards against NaN\r\n      const totalExpenses = monthlyExpenses.reduce((sum, expense) => {\r\n        const amount = parseFloat(expense.amount);\r\n        return sum + (isNaN(amount) ? 0 : amount);\r\n      }, 0);\r\n      \r\n      const totalIncome = monthlyIncome.reduce((sum, income) => {\r\n        const amount = parseFloat(income.amount);\r\n        return sum + (isNaN(amount) ? 0 : amount);\r\n      }, 0);\r\n      \r\n      return {\r\n        totalExpenses,\r\n        totalIncome,\r\n        balance: totalIncome - totalExpenses\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating monthly data:', error);\r\n      return defaultData;\r\n    }\r\n  };\r\n  \r\n  // Safely prepare chart data\r\n  const prepareChartData = () => {\r\n    if (!Array.isArray(expenses) || expenses.length === 0) {\r\n      setChartData([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      let filteredExpenses = [];\r\n      \r\n      if (timeframe === 'week') {\r\n        // Last 7 days - use a safer approach with milliseconds\r\n        const lastWeek = new Date(now);\r\n        lastWeek.setDate(lastWeek.getDate() - 7);\r\n        \r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate >= lastWeek;\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'month') {\r\n        // Current month\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getMonth() === now.getMonth() && \r\n                   expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'year') {\r\n        // Current year\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Group by date\r\n      const groupedData = {};\r\n      \r\n      filteredExpenses.forEach(expense => {\r\n        if (!expense || !expense.date) return;\r\n        \r\n        const date = expense.date;\r\n        if (!groupedData[date]) {\r\n          groupedData[date] = 0;\r\n        }\r\n        \r\n        const amount = parseFloat(expense.amount);\r\n        groupedData[date] += isNaN(amount) ? 0 : amount;\r\n      });\r\n      \r\n      // Convert to array for recharts\r\n      const chartDataArray = Object.keys(groupedData)\r\n        .sort()\r\n        .map(date => ({\r\n          date,\r\n          amount: groupedData[date]\r\n        }));\r\n        \r\n      setChartData(chartDataArray);\r\n    } catch (error) {\r\n      console.error('Error preparing chart data:', error);\r\n      setChartData([]);\r\n    }\r\n  };\r\n  \r\n  // Safely prepare category data\r\n  const prepareCategoryData = () => {\r\n    if (!Array.isArray(expenses) || expenses.length === 0) {\r\n      setCategoryData([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      let filteredExpenses = [];\r\n      \r\n      if (timeframe === 'week') {\r\n        const lastWeek = new Date(now);\r\n        lastWeek.setDate(lastWeek.getDate() - 7);\r\n        \r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate >= lastWeek;\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'month') {\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getMonth() === now.getMonth() && \r\n                   expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'year') {\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Group by category\r\n      const categoryTotals = {};\r\n      \r\n      filteredExpenses.forEach(expense => {\r\n        if (!expense || !expense.category) return;\r\n        \r\n        const { category, amount } = expense;\r\n        if (!categoryTotals[category]) {\r\n          categoryTotals[category] = 0;\r\n        }\r\n        \r\n        const parsedAmount = parseFloat(amount);\r\n        categoryTotals[category] += isNaN(parsedAmount) ? 0 : parsedAmount;\r\n      });\r\n      \r\n      // Convert to array for recharts\r\n      const categoryDataArray = Object.keys(categoryTotals)\r\n        .filter(category => categoryTotals[category] > 0) // Only include categories with values\r\n        .map(category => ({\r\n          name: category,\r\n          value: categoryTotals[category]\r\n        }));\r\n      \r\n      setCategoryData(categoryDataArray);\r\n    } catch (error) {\r\n      console.error('Error preparing category data:', error);\r\n      setCategoryData([]);\r\n    }\r\n  };\r\n  \r\n  // Safely render the expense line chart\r\n  const renderExpenseLineChart = () => {\r\n    if (!chartData || chartData.length === 0) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <LineChart data={chartData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"date\"\r\n            tick={{ fontSize: 12 }}\r\n            tickFormatter={(date) => {\r\n              try {\r\n                if (timeframe === 'year') {\r\n                  return new Date(date).toLocaleDateString(undefined, { month: 'short' });\r\n                }\r\n                return new Date(date).toLocaleDateString(undefined, { month: 'numeric', day: 'numeric' });\r\n              } catch (e) {\r\n                return date;\r\n              }\r\n            }}\r\n          />\r\n          <YAxis \r\n            tickFormatter={(value) => `$${value}`}\r\n          />\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(label) => {\r\n              try {\r\n                return new Date(label).toLocaleDateString();\r\n              } catch (e) {\r\n                return label;\r\n              }\r\n            }}\r\n          />\r\n          <Legend />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"amount\" \r\n            stroke=\"#8884d8\" \r\n            activeDot={{ r: 8 }} \r\n            name=\"Expense\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n\r\n  // Safely render the category pie chart\r\n  const renderCategoryPieChart = () => {\r\n    if (!categoryData || categoryData.length === 0) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    // Calculate total for percentage\r\n    const total = categoryData.reduce((sum, item) => sum + item.value, 0);\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <PieChart>\r\n          <Pie\r\n            data={categoryData}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            labelLine={true}\r\n            outerRadius={80}\r\n            fill=\"#8884d8\"\r\n            dataKey=\"value\"\r\n            label={({ name, value }) => {\r\n              const percent = total > 0 ? ((value / total) * 100).toFixed(0) : 0;\r\n              return `${name}: ${percent}%`;\r\n            }}\r\n          >\r\n            {categoryData.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(name) => name}\r\n          />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n\r\n  // Safely render the budget comparison bar chart\r\n  const renderBudgetComparisonChart = () => {\r\n    if (!categoryData || categoryData.length === 0 || !budgets) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    // Map budget data with safeguards\r\n    const budgetData = categoryData\r\n      .filter(item => item.name && typeof item.value === 'number')\r\n      .map(item => {\r\n        const budgetAmount = parseFloat(budgets[item.name] || 0);\r\n        return {\r\n          name: item.name,\r\n          actual: item.value,\r\n          budget: isNaN(budgetAmount) ? 0 : budgetAmount\r\n        };\r\n      })\r\n      .filter(item => item.actual > 0 || item.budget > 0); // Only include items with values\r\n\r\n    if (budgetData.length === 0) {\r\n      return <p>No budget data available for comparison</p>;\r\n    }\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart data={budgetData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"name\"\r\n            tick={{ fontSize: 12 }}\r\n          />\r\n          <YAxis \r\n            tickFormatter={(value) => `$${value}`}\r\n          />\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(name) => name}\r\n          />\r\n          <Legend />\r\n          <Bar dataKey=\"actual\" fill=\"#FF8042\" name=\"Actual\" />\r\n          <Bar dataKey=\"budget\" fill=\"#8884d8\" name=\"Budget\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n  \r\n  // Calculate monthly data outside the JSX\r\n  const monthlyData = currentMonthData();\r\n  const totalExpenses = monthlyData.totalExpenses;\r\n  const totalIncome = monthlyData.totalIncome;\r\n  const balance = monthlyData.balance;\r\n  \r\n  // Format currency values\r\n  const formatCurrency = (value) => {\r\n    return `$${parseFloat(value).toFixed(2)}`;\r\n  };\r\n  \r\n  // Loading indicator\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"dashboard loading\">\r\n        <p>Loading dashboard data...</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h1>Expense Dashboard</h1>\r\n      \r\n      <div className=\"action-buttons\">\r\n        <Link to=\"/add\" className=\"action-btn expense-btn\">Add Expense</Link>\r\n        <Link to=\"/add-income\" className=\"action-btn income-btn\">Add Income</Link>\r\n      </div>\r\n      \r\n      {/* Show budget alerts if any exist }*/\n/*{Array.isArray(alerts) && alerts.filter(alert => !alert.read).length > 0 && (\r\n  <BudgetAlerts />\r\n)}\r\n\r\n<div className=\"summary-boxes\">\r\n  <div className=\"summary-box income-box\">\r\n    <div className=\"summary-title\">Monthly Income</div>\r\n    <div className=\"summary-value\">{formatCurrency(totalIncome)}</div>\r\n  </div>\r\n  \r\n  <div className=\"summary-box expense-box\">\r\n    <div className=\"summary-title\">Monthly Expenses</div>\r\n    <div className=\"summary-value\">{formatCurrency(totalExpenses)}</div>\r\n  </div>\r\n  \r\n  <div className={`summary-box balance-box ${balance >= 0 ? 'positive' : 'negative'}`}>\r\n    <div className=\"summary-title\">Balance</div>\r\n    <div className=\"summary-value\">{formatCurrency(Math.abs(balance))}</div>\r\n    <div className=\"summary-label\">{balance >= 0 ? 'Surplus' : 'Deficit'}</div>\r\n  </div>\r\n</div>\r\n\r\n<div className=\"timeframe-selector\">\r\n  <button \r\n    className={timeframe === 'week' ? 'active' : ''} \r\n    onClick={() => setTimeframe('week')}\r\n  >\r\n    Week\r\n  </button>\r\n  <button \r\n    className={timeframe === 'month' ? 'active' : ''} \r\n    onClick={() => setTimeframe('month')}\r\n  >\r\n    Month\r\n  </button>\r\n  <button \r\n    className={timeframe === 'year' ? 'active' : ''} \r\n    onClick={() => setTimeframe('year')}\r\n  >\r\n    Year\r\n  </button>\r\n</div>\r\n\r\n<div className=\"chart-container\">\r\n  <h2>Spending Over Time</h2>\r\n  {renderExpenseLineChart()}\r\n</div>\r\n\r\n<div className=\"charts-row\">\r\n  <div className=\"chart-container\">\r\n    <h2>Spending by Category</h2>\r\n    {renderCategoryPieChart()}\r\n  </div>\r\n  \r\n  <div className=\"chart-container\">\r\n    <h2>Budget vs. Actual</h2>\r\n    {renderBudgetComparisonChart()}\r\n  </div>\r\n</div>\r\n</div>\r\n);\r\n};\r\nexport default Dashboard;*/\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useContext","useState","useEffect","Link","ExpenseContext","LineChart","Line","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","BudgetAlerts","MessageSquare","X","Send","jsxDEV","_jsxDEV","Dashboard","_s","expenses","budgets","alerts","incomes","chartData","setChartData","categoryData","setCategoryData","timeframe","setTimeframe","isLoading","setIsLoading","chatOpen","setChatOpen","messages","setMessages","type","text","newMessage","setNewMessage","COLORS","prepareChartData","prepareCategoryData","currentMonthData","defaultData","totalExpenses","totalIncome","balance","Array","isArray","now","Date","currentMonth","getMonth","currentYear","getFullYear","monthlyExpenses","filter","expense","date","expenseDate","e","monthlyIncome","income","incomeDate","reduce","sum","amount","parseFloat","isNaN","error","console","length","filteredExpenses","lastWeek","setDate","getDate","groupedData","forEach","chartDataArray","Object","keys","sort","map","categoryTotals","category","parsedAmount","categoryDataArray","name","value","handleSendMessage","trim","response","generateAIResponse","setTimeout","prevMessages","message","financialData","msgLower","toLowerCase","includes","toFixed","Math","abs","topCategory","a","b","savingRate","tips","floor","random","defaultResponses","handleKeyPress","key","renderExpenseLineChart","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","data","strokeDasharray","dataKey","tick","fontSize","tickFormatter","toLocaleDateString","undefined","month","day","formatter","labelFormatter","label","stroke","activeDot","r","renderCategoryPieChart","total","item","cx","cy","labelLine","outerRadius","fill","percent","entry","index","renderBudgetComparisonChart","budgetData","budgetAmount","actual","budget","monthlyData","formatCurrency","className","to","alert","read","onClick","size","msg","onChange","target","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence tracker final/expence-tracker/src/components/Dashboard.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; \r\nimport { ExpenseContext } from '../context/ExpenseContext';\r\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\r\nimport BudgetAlerts from './BudgetAlerts';\r\n// Import the Lucide React icons properly\r\nimport { MessageSquare, X, Send } from 'lucide-react';\r\nimport './Dashboard.css';\r\n\r\n// Rest of the file remains the same\r\n\r\nconst Dashboard = () => {\r\n  const { expenses, budgets, alerts, incomes } = useContext(ExpenseContext);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [categoryData, setCategoryData] = useState([]);\r\n  const [timeframe, setTimeframe] = useState('month');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  // AI Chatbot state\r\n  const [chatOpen, setChatOpen] = useState(false);\r\n  const [messages, setMessages] = useState([\r\n    { type: 'bot', text: 'Hi there! I\\'m your financial assistant. Ask me anything about your expenses or budgets.' }\r\n  ]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  \r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28AD3', '#FF6B6B', '#4ECDC4'];\r\n  \r\n  // Initialize data on first load and when dependencies change\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    prepareChartData();\r\n    prepareCategoryData();\r\n    setIsLoading(false);\r\n  }, [expenses, timeframe, incomes, budgets]);\r\n  \r\n  // Safely calculate current month's data\r\n  const currentMonthData = () => {\r\n    // Default empty state\r\n    const defaultData = {\r\n      totalExpenses: 0,\r\n      totalIncome: 0,\r\n      balance: 0\r\n    };\r\n    \r\n    // Return default if no data\r\n    if (!Array.isArray(expenses) || !Array.isArray(incomes)) {\r\n      return defaultData;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      const currentMonth = now.getMonth();\r\n      const currentYear = now.getFullYear();\r\n      \r\n      // Filter expenses for current month with error handling\r\n      const monthlyExpenses = expenses.filter(expense => {\r\n        if (!expense || !expense.date) return false;\r\n        \r\n        try {\r\n          const expenseDate = new Date(expense.date);\r\n          return expenseDate.getMonth() === currentMonth && \r\n                 expenseDate.getFullYear() === currentYear;\r\n        } catch (e) {\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      // Filter incomes for current month with error handling\r\n      const monthlyIncome = incomes.filter(income => {\r\n        if (!income || !income.date) return false;\r\n        \r\n        try {\r\n          const incomeDate = new Date(income.date);\r\n          return incomeDate.getMonth() === currentMonth && \r\n                 incomeDate.getFullYear() === currentYear;\r\n        } catch (e) {\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      // Calculate totals with safeguards against NaN\r\n      const totalExpenses = monthlyExpenses.reduce((sum, expense) => {\r\n        const amount = parseFloat(expense.amount);\r\n        return sum + (isNaN(amount) ? 0 : amount);\r\n      }, 0);\r\n      \r\n      const totalIncome = monthlyIncome.reduce((sum, income) => {\r\n        const amount = parseFloat(income.amount);\r\n        return sum + (isNaN(amount) ? 0 : amount);\r\n      }, 0);\r\n      \r\n      return {\r\n        totalExpenses,\r\n        totalIncome,\r\n        balance: totalIncome - totalExpenses\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating monthly data:', error);\r\n      return defaultData;\r\n    }\r\n  };\r\n  \r\n  // Safely prepare chart data\r\n  const prepareChartData = () => {\r\n    if (!Array.isArray(expenses) || expenses.length === 0) {\r\n      setChartData([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      let filteredExpenses = [];\r\n      \r\n      if (timeframe === 'week') {\r\n        // Last 7 days - use a safer approach with milliseconds\r\n        const lastWeek = new Date(now);\r\n        lastWeek.setDate(lastWeek.getDate() - 7);\r\n        \r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate >= lastWeek;\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'month') {\r\n        // Current month\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getMonth() === now.getMonth() && \r\n                   expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'year') {\r\n        // Current year\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Group by date\r\n      const groupedData = {};\r\n      \r\n      filteredExpenses.forEach(expense => {\r\n        if (!expense || !expense.date) return;\r\n        \r\n        const date = expense.date;\r\n        if (!groupedData[date]) {\r\n          groupedData[date] = 0;\r\n        }\r\n        \r\n        const amount = parseFloat(expense.amount);\r\n        groupedData[date] += isNaN(amount) ? 0 : amount;\r\n      });\r\n      \r\n      // Convert to array for recharts\r\n      const chartDataArray = Object.keys(groupedData)\r\n        .sort()\r\n        .map(date => ({\r\n          date,\r\n          amount: groupedData[date]\r\n        }));\r\n        \r\n      setChartData(chartDataArray);\r\n    } catch (error) {\r\n      console.error('Error preparing chart data:', error);\r\n      setChartData([]);\r\n    }\r\n  };\r\n  \r\n  // Safely prepare category data\r\n  const prepareCategoryData = () => {\r\n    if (!Array.isArray(expenses) || expenses.length === 0) {\r\n      setCategoryData([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      let filteredExpenses = [];\r\n      \r\n      if (timeframe === 'week') {\r\n        const lastWeek = new Date(now);\r\n        lastWeek.setDate(lastWeek.getDate() - 7);\r\n        \r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate >= lastWeek;\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'month') {\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getMonth() === now.getMonth() && \r\n                   expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'year') {\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Group by category\r\n      const categoryTotals = {};\r\n      \r\n      filteredExpenses.forEach(expense => {\r\n        if (!expense || !expense.category) return;\r\n        \r\n        const { category, amount } = expense;\r\n        if (!categoryTotals[category]) {\r\n          categoryTotals[category] = 0;\r\n        }\r\n        \r\n        const parsedAmount = parseFloat(amount);\r\n        categoryTotals[category] += isNaN(parsedAmount) ? 0 : parsedAmount;\r\n      });\r\n      \r\n      // Convert to array for recharts\r\n      const categoryDataArray = Object.keys(categoryTotals)\r\n        .filter(category => categoryTotals[category] > 0) // Only include categories with values\r\n        .map(category => ({\r\n          name: category,\r\n          value: categoryTotals[category]\r\n        }));\r\n      \r\n      setCategoryData(categoryDataArray);\r\n    } catch (error) {\r\n      console.error('Error preparing category data:', error);\r\n      setCategoryData([]);\r\n    }\r\n  };\r\n  \r\n  // AI Assistant functions\r\n  const handleSendMessage = () => {\r\n    if (!newMessage.trim()) return;\r\n    \r\n    // Add user message\r\n    setMessages([...messages, { type: 'user', text: newMessage }]);\r\n    \r\n    // Process the message and generate a response\r\n    const response = generateAIResponse(newMessage);\r\n    \r\n    // Add AI response with slight delay for natural feeling\r\n    setTimeout(() => {\r\n      setMessages(prevMessages => [...prevMessages, { type: 'bot', text: response }]);\r\n    }, 500);\r\n    \r\n    // Clear input\r\n    setNewMessage('');\r\n  };\r\n  \r\n  const generateAIResponse = (message) => {\r\n    // Get financial data for context\r\n    const financialData = currentMonthData();\r\n    const { totalExpenses, totalIncome, balance } = financialData;\r\n    \r\n    // Check for different question types and provide relevant responses\r\n    const msgLower = message.toLowerCase();\r\n    \r\n    // Balance related questions\r\n    if (msgLower.includes('balance') || msgLower.includes('surplus') || msgLower.includes('deficit')) {\r\n      if (balance >= 0) {\r\n        return `Your current balance is a surplus of $${balance.toFixed(2)}. You're doing well managing your budget this month!`;\r\n      } else {\r\n        return `Your current balance is a deficit of $${Math.abs(balance).toFixed(2)}. You might want to reduce some expenses to balance your budget.`;\r\n      }\r\n    }\r\n    \r\n    // Income related questions\r\n    if (msgLower.includes('income') || msgLower.includes('earn')) {\r\n      return `Your total income this month is $${totalIncome.toFixed(2)}.`;\r\n    }\r\n    \r\n    // Expense related questions\r\n    if (msgLower.includes('spend') || msgLower.includes('expense') || msgLower.includes('cost')) {\r\n      if (categoryData.length > 0) {\r\n        const topCategory = categoryData.sort((a, b) => b.value - a.value)[0];\r\n        return `Your total expenses this month are $${totalExpenses.toFixed(2)}. Your highest spending category is \"${topCategory.name}\" at $${topCategory.value.toFixed(2)}.`;\r\n      } else {\r\n        return `Your total expenses this month are $${totalExpenses.toFixed(2)}.`;\r\n      }\r\n    }\r\n    \r\n    // Budget related questions\r\n    if (msgLower.includes('budget') || msgLower.includes('limit')) {\r\n      if (totalExpenses > totalIncome) {\r\n        return `You're currently over budget by $${(totalExpenses - totalIncome).toFixed(2)}. Consider cutting back on unnecessary expenses.`;\r\n      } else {\r\n        return `You're currently under budget by $${(totalIncome - totalExpenses).toFixed(2)}. Great job managing your finances!`;\r\n      }\r\n    }\r\n    \r\n    // Saving related questions\r\n    if (msgLower.includes('save') || msgLower.includes('saving')) {\r\n      const savingRate = balance > 0 ? (balance / totalIncome) * 100 : 0;\r\n      return `Based on your current income and expenses, you're saving about ${savingRate.toFixed(1)}% of your income. Financial experts often recommend saving at least 20% of your income.`;\r\n    }\r\n    \r\n    // Tips\r\n    if (msgLower.includes('tip') || msgLower.includes('advice') || msgLower.includes('help')) {\r\n      const tips = [\r\n        \"Track all your expenses, even small ones. They add up over time.\",\r\n        \"Try using the 50/30/20 rule: 50% for needs, 30% for wants, and 20% for savings.\",\r\n        \"Consider setting up automatic transfers to a savings account when you receive income.\",\r\n        \"Review your subscriptions regularly to cut unnecessary recurring expenses.\",\r\n        \"For major purchases, follow the 24-hour rule: wait a day before buying to avoid impulse purchases.\"\r\n      ];\r\n      return tips[Math.floor(Math.random() * tips.length)];\r\n    }\r\n    \r\n    // Default responses\r\n    const defaultResponses = [\r\n      \"I can help you understand your spending patterns and budget. What would you like to know?\",\r\n      \"I can provide insights on your expenses, income, or budget. Feel free to ask specific questions.\",\r\n      \"Would you like to know about your spending by category, your savings rate, or budget status?\",\r\n      \"I'm here to help with your financial questions. Ask me about your balance, expenses, or budget.\"\r\n    ];\r\n    \r\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\r\n  };\r\n  \r\n  // Handle enter key for sending message\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n  \r\n  // Safely render the expense line chart\r\n  const renderExpenseLineChart = () => {\r\n    if (!chartData || chartData.length === 0) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <LineChart data={chartData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"date\"\r\n            tick={{ fontSize: 12 }}\r\n            tickFormatter={(date) => {\r\n              try {\r\n                if (timeframe === 'year') {\r\n                  return new Date(date).toLocaleDateString(undefined, { month: 'short' });\r\n                }\r\n                return new Date(date).toLocaleDateString(undefined, { month: 'numeric', day: 'numeric' });\r\n              } catch (e) {\r\n                return date;\r\n              }\r\n            }}\r\n          />\r\n          <YAxis \r\n            tickFormatter={(value) => `$${value}`}\r\n          />\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(label) => {\r\n              try {\r\n                return new Date(label).toLocaleDateString();\r\n              } catch (e) {\r\n                return label;\r\n              }\r\n            }}\r\n          />\r\n          <Legend />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"amount\" \r\n            stroke=\"#8884d8\" \r\n            activeDot={{ r: 8 }} \r\n            name=\"Expense\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n\r\n  // Safely render the category pie chart\r\n  const renderCategoryPieChart = () => {\r\n    if (!categoryData || categoryData.length === 0) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    // Calculate total for percentage\r\n    const total = categoryData.reduce((sum, item) => sum + item.value, 0);\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <PieChart>\r\n          <Pie\r\n            data={categoryData}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            labelLine={true}\r\n            outerRadius={80}\r\n            fill=\"#8884d8\"\r\n            dataKey=\"value\"\r\n            label={({ name, value }) => {\r\n              const percent = total > 0 ? ((value / total) * 100).toFixed(0) : 0;\r\n              return `${name}: ${percent}%`;\r\n            }}\r\n          >\r\n            {categoryData.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(name) => name}\r\n          />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n\r\n  // Safely render the budget comparison bar chart\r\n  const renderBudgetComparisonChart = () => {\r\n    if (!categoryData || categoryData.length === 0 || !budgets) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    // Map budget data with safeguards\r\n    const budgetData = categoryData\r\n      .filter(item => item.name && typeof item.value === 'number')\r\n      .map(item => {\r\n        const budgetAmount = parseFloat(budgets[item.name] || 0);\r\n        return {\r\n          name: item.name,\r\n          actual: item.value,\r\n          budget: isNaN(budgetAmount) ? 0 : budgetAmount\r\n        };\r\n      })\r\n      .filter(item => item.actual > 0 || item.budget > 0); // Only include items with values\r\n\r\n    if (budgetData.length === 0) {\r\n      return <p>No budget data available for comparison</p>;\r\n    }\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart data={budgetData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"name\"\r\n            tick={{ fontSize: 12 }}\r\n          />\r\n          <YAxis \r\n            tickFormatter={(value) => `$${value}`}\r\n          />\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(name) => name}\r\n          />\r\n          <Legend />\r\n          <Bar dataKey=\"actual\" fill=\"#FF8042\" name=\"Actual\" />\r\n          <Bar dataKey=\"budget\" fill=\"#8884d8\" name=\"Budget\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n  \r\n  // Calculate monthly data outside the JSX\r\n  const monthlyData = currentMonthData();\r\n  const totalExpenses = monthlyData.totalExpenses;\r\n  const totalIncome = monthlyData.totalIncome;\r\n  const balance = monthlyData.balance;\r\n  \r\n  // Format currency values\r\n  const formatCurrency = (value) => {\r\n    return `$${parseFloat(value).toFixed(2)}`;\r\n  };\r\n  \r\n  // Loading indicator\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"dashboard loading\">\r\n        <p>Loading dashboard data...</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h1>Expense Dashboard</h1>\r\n      \r\n      <div className=\"action-buttons\">\r\n        <Link to=\"/add\" className=\"action-btn expense-btn\">Add Expense</Link>\r\n        <Link to=\"/add-income\" className=\"action-btn income-btn\">Add Income</Link>\r\n      </div>\r\n      \r\n      {/* Show budget alerts if any exist */}\r\n      {Array.isArray(alerts) && alerts.filter(alert => !alert.read).length > 0 && (\r\n        <BudgetAlerts />\r\n      )}\r\n      \r\n      <div className=\"summary-boxes\">\r\n        <div className=\"summary-box income-box\">\r\n          <div className=\"summary-title\">Monthly Income</div>\r\n          <div className=\"summary-value\">{formatCurrency(totalIncome)}</div>\r\n        </div>\r\n        \r\n        <div className=\"summary-box expense-box\">\r\n          <div className=\"summary-title\">Monthly Expenses</div>\r\n          <div className=\"summary-value\">{formatCurrency(totalExpenses)}</div>\r\n        </div>\r\n        \r\n        <div className={`summary-box balance-box ${balance >= 0 ? 'positive' : 'negative'}`}>\r\n          <div className=\"summary-title\">Balance</div>\r\n          <div className=\"summary-value\">{formatCurrency(Math.abs(balance))}</div>\r\n          <div className=\"summary-label\">{balance >= 0 ? 'Surplus' : 'Deficit'}</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"timeframe-selector\">\r\n        <button \r\n          className={timeframe === 'week' ? 'active' : ''} \r\n          onClick={() => setTimeframe('week')}\r\n        >\r\n          Week\r\n        </button>\r\n        <button \r\n          className={timeframe === 'month' ? 'active' : ''} \r\n          onClick={() => setTimeframe('month')}\r\n        >\r\n          Month\r\n        </button>\r\n        <button \r\n          className={timeframe === 'year' ? 'active' : ''} \r\n          onClick={() => setTimeframe('year')}\r\n        >\r\n          Year\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"chart-container\">\r\n        <h2>Spending Over Time</h2>\r\n        {renderExpenseLineChart()}\r\n      </div>\r\n      \r\n      <div className=\"charts-row\">\r\n        <div className=\"chart-container\">\r\n          <h2>Spending by Category</h2>\r\n          {renderCategoryPieChart()}\r\n        </div>\r\n        \r\n        <div className=\"chart-container\">\r\n          <h2>Budget vs. Actual</h2>\r\n          {renderBudgetComparisonChart()}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* AI Chatbot Assistant */}\r\n      <div className={`chat-assistant ${chatOpen ? 'open' : ''}`}>\r\n        {!chatOpen ? (\r\n          <button \r\n            className=\"chat-toggle-btn\" \r\n            onClick={() => setChatOpen(true)}\r\n            aria-label=\"Open financial assistant\"\r\n          >\r\n            <MessageSquare size={24} />\r\n            <span>Financial Assistant</span>\r\n          </button>\r\n        ) : (\r\n          <div className=\"chat-container\">\r\n            <div className=\"chat-header\">\r\n              <h3>Financial Assistant</h3>\r\n              <button \r\n                className=\"chat-close-btn\" \r\n                onClick={() => setChatOpen(false)}\r\n                aria-label=\"Close financial assistant\"\r\n              >\r\n                <X size={18} />\r\n              </button>\r\n            </div>\r\n            <div className=\"chat-messages\">\r\n              {messages.map((msg, index) => (\r\n                <div key={index} className={`chat-message ${msg.type}`}>\r\n                  {msg.text}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"chat-input-container\">\r\n              <input\r\n                type=\"text\"\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n                onKeyPress={handleKeyPress}\r\n                placeholder=\"Ask about your finances...\"\r\n                className=\"chat-input\"\r\n              />\r\n              <button \r\n                className=\"chat-send-btn\"\r\n                onClick={handleSendMessage}\r\n                aria-label=\"Send message\"\r\n              >\r\n                <Send size={18} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n\r\n\r\n\r\n\r\n\r\n//OLD PREVOIUS CODE USED HERE:\r\n/*import React, { useContext, useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; \r\nimport { ExpenseContext } from '../context/ExpenseContext';\r\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\r\nimport BudgetAlerts from './BudgetAlerts';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard = () => {\r\n  const { expenses, budgets, alerts, incomes } = useContext(ExpenseContext);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [categoryData, setCategoryData] = useState([]);\r\n  const [timeframe, setTimeframe] = useState('month');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28AD3', '#FF6B6B', '#4ECDC4'];\r\n  \r\n  // Initialize data on first load and when dependencies change\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    prepareChartData();\r\n    prepareCategoryData();\r\n    setIsLoading(false);\r\n  }, [expenses, timeframe, incomes, budgets]);\r\n  \r\n  // Safely calculate current month's data\r\n  const currentMonthData = () => {\r\n    // Default empty state\r\n    const defaultData = {\r\n      totalExpenses: 0,\r\n      totalIncome: 0,\r\n      balance: 0\r\n    };\r\n    \r\n    // Return default if no data\r\n    if (!Array.isArray(expenses) || !Array.isArray(incomes)) {\r\n      return defaultData;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      const currentMonth = now.getMonth();\r\n      const currentYear = now.getFullYear();\r\n      \r\n      // Filter expenses for current month with error handling\r\n      const monthlyExpenses = expenses.filter(expense => {\r\n        if (!expense || !expense.date) return false;\r\n        \r\n        try {\r\n          const expenseDate = new Date(expense.date);\r\n          return expenseDate.getMonth() === currentMonth && \r\n                 expenseDate.getFullYear() === currentYear;\r\n        } catch (e) {\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      // Filter incomes for current month with error handling\r\n      const monthlyIncome = incomes.filter(income => {\r\n        if (!income || !income.date) return false;\r\n        \r\n        try {\r\n          const incomeDate = new Date(income.date);\r\n          return incomeDate.getMonth() === currentMonth && \r\n                 incomeDate.getFullYear() === currentYear;\r\n        } catch (e) {\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      // Calculate totals with safeguards against NaN\r\n      const totalExpenses = monthlyExpenses.reduce((sum, expense) => {\r\n        const amount = parseFloat(expense.amount);\r\n        return sum + (isNaN(amount) ? 0 : amount);\r\n      }, 0);\r\n      \r\n      const totalIncome = monthlyIncome.reduce((sum, income) => {\r\n        const amount = parseFloat(income.amount);\r\n        return sum + (isNaN(amount) ? 0 : amount);\r\n      }, 0);\r\n      \r\n      return {\r\n        totalExpenses,\r\n        totalIncome,\r\n        balance: totalIncome - totalExpenses\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating monthly data:', error);\r\n      return defaultData;\r\n    }\r\n  };\r\n  \r\n  // Safely prepare chart data\r\n  const prepareChartData = () => {\r\n    if (!Array.isArray(expenses) || expenses.length === 0) {\r\n      setChartData([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      let filteredExpenses = [];\r\n      \r\n      if (timeframe === 'week') {\r\n        // Last 7 days - use a safer approach with milliseconds\r\n        const lastWeek = new Date(now);\r\n        lastWeek.setDate(lastWeek.getDate() - 7);\r\n        \r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate >= lastWeek;\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'month') {\r\n        // Current month\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getMonth() === now.getMonth() && \r\n                   expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'year') {\r\n        // Current year\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Group by date\r\n      const groupedData = {};\r\n      \r\n      filteredExpenses.forEach(expense => {\r\n        if (!expense || !expense.date) return;\r\n        \r\n        const date = expense.date;\r\n        if (!groupedData[date]) {\r\n          groupedData[date] = 0;\r\n        }\r\n        \r\n        const amount = parseFloat(expense.amount);\r\n        groupedData[date] += isNaN(amount) ? 0 : amount;\r\n      });\r\n      \r\n      // Convert to array for recharts\r\n      const chartDataArray = Object.keys(groupedData)\r\n        .sort()\r\n        .map(date => ({\r\n          date,\r\n          amount: groupedData[date]\r\n        }));\r\n        \r\n      setChartData(chartDataArray);\r\n    } catch (error) {\r\n      console.error('Error preparing chart data:', error);\r\n      setChartData([]);\r\n    }\r\n  };\r\n  \r\n  // Safely prepare category data\r\n  const prepareCategoryData = () => {\r\n    if (!Array.isArray(expenses) || expenses.length === 0) {\r\n      setCategoryData([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      let filteredExpenses = [];\r\n      \r\n      if (timeframe === 'week') {\r\n        const lastWeek = new Date(now);\r\n        lastWeek.setDate(lastWeek.getDate() - 7);\r\n        \r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate >= lastWeek;\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'month') {\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getMonth() === now.getMonth() && \r\n                   expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'year') {\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Group by category\r\n      const categoryTotals = {};\r\n      \r\n      filteredExpenses.forEach(expense => {\r\n        if (!expense || !expense.category) return;\r\n        \r\n        const { category, amount } = expense;\r\n        if (!categoryTotals[category]) {\r\n          categoryTotals[category] = 0;\r\n        }\r\n        \r\n        const parsedAmount = parseFloat(amount);\r\n        categoryTotals[category] += isNaN(parsedAmount) ? 0 : parsedAmount;\r\n      });\r\n      \r\n      // Convert to array for recharts\r\n      const categoryDataArray = Object.keys(categoryTotals)\r\n        .filter(category => categoryTotals[category] > 0) // Only include categories with values\r\n        .map(category => ({\r\n          name: category,\r\n          value: categoryTotals[category]\r\n        }));\r\n      \r\n      setCategoryData(categoryDataArray);\r\n    } catch (error) {\r\n      console.error('Error preparing category data:', error);\r\n      setCategoryData([]);\r\n    }\r\n  };\r\n  \r\n  // Safely render the expense line chart\r\n  const renderExpenseLineChart = () => {\r\n    if (!chartData || chartData.length === 0) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <LineChart data={chartData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"date\"\r\n            tick={{ fontSize: 12 }}\r\n            tickFormatter={(date) => {\r\n              try {\r\n                if (timeframe === 'year') {\r\n                  return new Date(date).toLocaleDateString(undefined, { month: 'short' });\r\n                }\r\n                return new Date(date).toLocaleDateString(undefined, { month: 'numeric', day: 'numeric' });\r\n              } catch (e) {\r\n                return date;\r\n              }\r\n            }}\r\n          />\r\n          <YAxis \r\n            tickFormatter={(value) => `$${value}`}\r\n          />\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(label) => {\r\n              try {\r\n                return new Date(label).toLocaleDateString();\r\n              } catch (e) {\r\n                return label;\r\n              }\r\n            }}\r\n          />\r\n          <Legend />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"amount\" \r\n            stroke=\"#8884d8\" \r\n            activeDot={{ r: 8 }} \r\n            name=\"Expense\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n\r\n  // Safely render the category pie chart\r\n  const renderCategoryPieChart = () => {\r\n    if (!categoryData || categoryData.length === 0) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    // Calculate total for percentage\r\n    const total = categoryData.reduce((sum, item) => sum + item.value, 0);\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <PieChart>\r\n          <Pie\r\n            data={categoryData}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            labelLine={true}\r\n            outerRadius={80}\r\n            fill=\"#8884d8\"\r\n            dataKey=\"value\"\r\n            label={({ name, value }) => {\r\n              const percent = total > 0 ? ((value / total) * 100).toFixed(0) : 0;\r\n              return `${name}: ${percent}%`;\r\n            }}\r\n          >\r\n            {categoryData.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(name) => name}\r\n          />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n\r\n  // Safely render the budget comparison bar chart\r\n  const renderBudgetComparisonChart = () => {\r\n    if (!categoryData || categoryData.length === 0 || !budgets) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    // Map budget data with safeguards\r\n    const budgetData = categoryData\r\n      .filter(item => item.name && typeof item.value === 'number')\r\n      .map(item => {\r\n        const budgetAmount = parseFloat(budgets[item.name] || 0);\r\n        return {\r\n          name: item.name,\r\n          actual: item.value,\r\n          budget: isNaN(budgetAmount) ? 0 : budgetAmount\r\n        };\r\n      })\r\n      .filter(item => item.actual > 0 || item.budget > 0); // Only include items with values\r\n\r\n    if (budgetData.length === 0) {\r\n      return <p>No budget data available for comparison</p>;\r\n    }\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart data={budgetData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"name\"\r\n            tick={{ fontSize: 12 }}\r\n          />\r\n          <YAxis \r\n            tickFormatter={(value) => `$${value}`}\r\n          />\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(name) => name}\r\n          />\r\n          <Legend />\r\n          <Bar dataKey=\"actual\" fill=\"#FF8042\" name=\"Actual\" />\r\n          <Bar dataKey=\"budget\" fill=\"#8884d8\" name=\"Budget\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n  \r\n  // Calculate monthly data outside the JSX\r\n  const monthlyData = currentMonthData();\r\n  const totalExpenses = monthlyData.totalExpenses;\r\n  const totalIncome = monthlyData.totalIncome;\r\n  const balance = monthlyData.balance;\r\n  \r\n  // Format currency values\r\n  const formatCurrency = (value) => {\r\n    return `$${parseFloat(value).toFixed(2)}`;\r\n  };\r\n  \r\n  // Loading indicator\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"dashboard loading\">\r\n        <p>Loading dashboard data...</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h1>Expense Dashboard</h1>\r\n      \r\n      <div className=\"action-buttons\">\r\n        <Link to=\"/add\" className=\"action-btn expense-btn\">Add Expense</Link>\r\n        <Link to=\"/add-income\" className=\"action-btn income-btn\">Add Income</Link>\r\n      </div>\r\n      \r\n      {/* Show budget alerts if any exist }*/\r\n      /*{Array.isArray(alerts) && alerts.filter(alert => !alert.read).length > 0 && (\r\n        <BudgetAlerts />\r\n      )}\r\n      \r\n      <div className=\"summary-boxes\">\r\n        <div className=\"summary-box income-box\">\r\n          <div className=\"summary-title\">Monthly Income</div>\r\n          <div className=\"summary-value\">{formatCurrency(totalIncome)}</div>\r\n        </div>\r\n        \r\n        <div className=\"summary-box expense-box\">\r\n          <div className=\"summary-title\">Monthly Expenses</div>\r\n          <div className=\"summary-value\">{formatCurrency(totalExpenses)}</div>\r\n        </div>\r\n        \r\n        <div className={`summary-box balance-box ${balance >= 0 ? 'positive' : 'negative'}`}>\r\n          <div className=\"summary-title\">Balance</div>\r\n          <div className=\"summary-value\">{formatCurrency(Math.abs(balance))}</div>\r\n          <div className=\"summary-label\">{balance >= 0 ? 'Surplus' : 'Deficit'}</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"timeframe-selector\">\r\n        <button \r\n          className={timeframe === 'week' ? 'active' : ''} \r\n          onClick={() => setTimeframe('week')}\r\n        >\r\n          Week\r\n        </button>\r\n        <button \r\n          className={timeframe === 'month' ? 'active' : ''} \r\n          onClick={() => setTimeframe('month')}\r\n        >\r\n          Month\r\n        </button>\r\n        <button \r\n          className={timeframe === 'year' ? 'active' : ''} \r\n          onClick={() => setTimeframe('year')}\r\n        >\r\n          Year\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"chart-container\">\r\n        <h2>Spending Over Time</h2>\r\n        {renderExpenseLineChart()}\r\n      </div>\r\n      \r\n      <div className=\"charts-row\">\r\n        <div className=\"chart-container\">\r\n          <h2>Spending by Category</h2>\r\n          {renderCategoryPieChart()}\r\n        </div>\r\n        \r\n        <div className=\"chart-container\">\r\n          <h2>Budget vs. Actual</h2>\r\n          {renderBudgetComparisonChart()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}