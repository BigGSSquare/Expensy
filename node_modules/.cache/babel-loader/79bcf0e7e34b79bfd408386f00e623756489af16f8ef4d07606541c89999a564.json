{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence-tracker\\\\src\\\\context\\\\ExpenseContext.js\",\n  _s = $RefreshSig$();\n// src/context/ExpenseContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { sendBudgetAlertEmail } from '../services/EmailService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ExpenseContext = /*#__PURE__*/createContext();\nexport const ExpenseProvider = ({\n  children\n}) => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const [budgets, setBudgets] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [emailStatus, setEmailStatus] = useState({\n    sent: false,\n    error: null\n  });\n  const {\n    currentUser\n  } = useContext(AuthContext);\n\n  // Generate unique storage keys for current user\n  const getUserStorageKey = key => {\n    if (!currentUser) return key;\n    return `${key}_${currentUser.id}`;\n  };\n\n  // Load data from localStorage on initial render or when user changes\n  useEffect(() => {\n    if (currentUser) {\n      const savedExpenses = JSON.parse(localStorage.getItem(getUserStorageKey('expenses'))) || [];\n      const savedIncomes = JSON.parse(localStorage.getItem(getUserStorageKey('incomes'))) || [];\n      const savedBudgets = JSON.parse(localStorage.getItem(getUserStorageKey('budgets'))) || {};\n      const savedAlerts = JSON.parse(localStorage.getItem(getUserStorageKey('alerts'))) || [];\n      setExpenses(savedExpenses);\n      setIncomes(savedIncomes);\n      setBudgets(savedBudgets);\n      setAlerts(savedAlerts);\n    } else {\n      // Clear data when logged out\n      setExpenses([]);\n      setIncomes([]);\n      setBudgets({});\n      setAlerts([]);\n    }\n  }, [currentUser]);\n\n  // Save data to localStorage whenever it changes\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem(getUserStorageKey('expenses'), JSON.stringify(expenses));\n    }\n  }, [expenses, currentUser]);\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem(getUserStorageKey('incomes'), JSON.stringify(incomes));\n    }\n  }, [incomes, currentUser]);\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem(getUserStorageKey('budgets'), JSON.stringify(budgets));\n    }\n  }, [budgets, currentUser]);\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem(getUserStorageKey('alerts'), JSON.stringify(alerts));\n    }\n  }, [alerts, currentUser]);\n\n  // Clear email status after some time\n  useEffect(() => {\n    if (emailStatus.sent || emailStatus.error) {\n      const timer = setTimeout(() => {\n        setEmailStatus({\n          sent: false,\n          error: null\n        });\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [emailStatus]);\n\n  // Add a new expense\n  const addExpense = expense => {\n    const newExpense = {\n      ...expense,\n      id: Date.now(),\n      date: expense.date || new Date().toISOString().slice(0, 10),\n      userId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n    };\n    setExpenses(prevExpenses => {\n      const updatedExpenses = [...prevExpenses, newExpense];\n\n      // Check for budget alerts after state update\n      setTimeout(() => {\n        checkBudgetAlerts(newExpense, updatedExpenses);\n      }, 0);\n      return updatedExpenses;\n    });\n  };\n\n  // Add a new income\n  const addIncome = income => {\n    const newIncome = {\n      ...income,\n      id: Date.now(),\n      date: income.date || new Date().toISOString().slice(0, 10),\n      userId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n    };\n    setIncomes([...incomes, newIncome]);\n  };\n\n  // Delete an expense\n  const deleteExpense = id => {\n    setExpenses(expenses.filter(expense => expense.id !== id));\n  };\n\n  // Delete an income\n  const deleteIncome = id => {\n    setIncomes(incomes.filter(income => income.id !== id));\n  };\n\n  // Update budget settings\n  const updateBudget = (category, amount) => {\n    setBudgets({\n      ...budgets,\n      [category]: amount\n    });\n  };\n\n  // Check if adding this expense exceeds the budget\n  const checkBudgetAlerts = (newExpense, allExpenses = expenses) => {\n    const {\n      category\n    } = newExpense;\n    if (budgets[category]) {\n      // Get current month expenses for this category\n      const currentDate = new Date();\n      const currentMonth = currentDate.getMonth();\n      const currentYear = currentDate.getFullYear();\n      const monthlyExpenses = allExpenses.filter(expense => {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear && expense.category === category && expense.userId === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n      });\n      const totalSpent = monthlyExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n      const budgetAmount = parseFloat(budgets[category]);\n      if (totalSpent > budgetAmount) {\n        var _currentUser$preferen;\n        const newAlert = {\n          id: Date.now(),\n          message: `Budget alert: You've exceeded your ${category} budget of $${budgetAmount.toFixed(2)}`,\n          category: category,\n          read: false,\n          date: new Date().toISOString(),\n          userId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n        };\n        setAlerts(prevAlerts => [...prevAlerts, newAlert]);\n\n        // Send email alert if user has enabled email notifications\n        if ((currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$preferen = currentUser.preferences) === null || _currentUser$preferen === void 0 ? void 0 : _currentUser$preferen.emailNotifications) !== false) {\n          console.log(\"Attempting to send email to:\", currentUser.email);\n          sendBudgetAlertEmail(currentUser, category, budgetAmount, totalSpent).then(result => {\n            console.log('Email alert result:', result);\n            setEmailStatus({\n              sent: result.success,\n              error: result.success ? null : result.message\n            });\n          }).catch(error => {\n            console.error('Failed to send email alert:', error);\n            setEmailStatus({\n              sent: false,\n              error: error.message\n            });\n          });\n        }\n      }\n    }\n  };\n\n  // Mark an alert as read\n  const markAlertAsRead = id => {\n    setAlerts(alerts.map(alert => alert.id === id ? {\n      ...alert,\n      read: true\n    } : alert));\n  };\n  return /*#__PURE__*/_jsxDEV(ExpenseContext.Provider, {\n    value: {\n      expenses,\n      addExpense,\n      deleteExpense,\n      incomes,\n      addIncome,\n      deleteIncome,\n      budgets,\n      updateBudget,\n      alerts,\n      markAlertAsRead,\n      emailStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseProvider, \"V2UB3WL+0Xt1Wk707dTvSiU2KlQ=\");\n_c = ExpenseProvider;\nvar _c;\n$RefreshReg$(_c, \"ExpenseProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AuthContext","sendBudgetAlertEmail","jsxDEV","_jsxDEV","ExpenseContext","ExpenseProvider","children","_s","expenses","setExpenses","incomes","setIncomes","budgets","setBudgets","alerts","setAlerts","emailStatus","setEmailStatus","sent","error","currentUser","getUserStorageKey","key","id","savedExpenses","JSON","parse","localStorage","getItem","savedIncomes","savedBudgets","savedAlerts","setItem","stringify","timer","setTimeout","clearTimeout","addExpense","expense","newExpense","Date","now","date","toISOString","slice","userId","prevExpenses","updatedExpenses","checkBudgetAlerts","addIncome","income","newIncome","deleteExpense","filter","deleteIncome","updateBudget","category","amount","allExpenses","currentDate","currentMonth","getMonth","currentYear","getFullYear","monthlyExpenses","expenseDate","totalSpent","reduce","sum","parseFloat","budgetAmount","_currentUser$preferen","newAlert","message","toFixed","read","prevAlerts","preferences","emailNotifications","console","log","email","then","result","success","catch","markAlertAsRead","map","alert","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker/src/context/ExpenseContext.js"],"sourcesContent":["// src/context/ExpenseContext.js\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from './AuthContext';\r\nimport { sendBudgetAlertEmail } from '../services/EmailService';\r\n\r\nexport const ExpenseContext = createContext();\r\n\r\nexport const ExpenseProvider = ({ children }) => {\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [incomes, setIncomes] = useState([]);\r\n  const [budgets, setBudgets] = useState({});\r\n  const [alerts, setAlerts] = useState([]);\r\n  const [emailStatus, setEmailStatus] = useState({ sent: false, error: null });\r\n  \r\n  const { currentUser } = useContext(AuthContext);\r\n  \r\n  // Generate unique storage keys for current user\r\n  const getUserStorageKey = (key) => {\r\n    if (!currentUser) return key;\r\n    return `${key}_${currentUser.id}`;\r\n  };\r\n  \r\n  // Load data from localStorage on initial render or when user changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      const savedExpenses = JSON.parse(localStorage.getItem(getUserStorageKey('expenses'))) || [];\r\n      const savedIncomes = JSON.parse(localStorage.getItem(getUserStorageKey('incomes'))) || [];\r\n      const savedBudgets = JSON.parse(localStorage.getItem(getUserStorageKey('budgets'))) || {};\r\n      const savedAlerts = JSON.parse(localStorage.getItem(getUserStorageKey('alerts'))) || [];\r\n      \r\n      setExpenses(savedExpenses);\r\n      setIncomes(savedIncomes);\r\n      setBudgets(savedBudgets);\r\n      setAlerts(savedAlerts);\r\n    } else {\r\n      // Clear data when logged out\r\n      setExpenses([]);\r\n      setIncomes([]);\r\n      setBudgets({});\r\n      setAlerts([]);\r\n    }\r\n  }, [currentUser]);\r\n  \r\n  // Save data to localStorage whenever it changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem(getUserStorageKey('expenses'), JSON.stringify(expenses));\r\n    }\r\n  }, [expenses, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem(getUserStorageKey('incomes'), JSON.stringify(incomes));\r\n    }\r\n  }, [incomes, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem(getUserStorageKey('budgets'), JSON.stringify(budgets));\r\n    }\r\n  }, [budgets, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem(getUserStorageKey('alerts'), JSON.stringify(alerts));\r\n    }\r\n  }, [alerts, currentUser]);\r\n  \r\n  // Clear email status after some time\r\n  useEffect(() => {\r\n    if (emailStatus.sent || emailStatus.error) {\r\n      const timer = setTimeout(() => {\r\n        setEmailStatus({ sent: false, error: null });\r\n      }, 5000);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [emailStatus]);\r\n  \r\n  // Add a new expense\r\n  const addExpense = (expense) => {\r\n    const newExpense = {\r\n      ...expense,\r\n      id: Date.now(),\r\n      date: expense.date || new Date().toISOString().slice(0, 10),\r\n      userId: currentUser?.id\r\n    };\r\n    \r\n    setExpenses(prevExpenses => {\r\n      const updatedExpenses = [...prevExpenses, newExpense];\r\n      \r\n      // Check for budget alerts after state update\r\n      setTimeout(() => {\r\n        checkBudgetAlerts(newExpense, updatedExpenses);\r\n      }, 0);\r\n      \r\n      return updatedExpenses;\r\n    });\r\n  };\r\n  \r\n  // Add a new income\r\n  const addIncome = (income) => {\r\n    const newIncome = {\r\n      ...income,\r\n      id: Date.now(),\r\n      date: income.date || new Date().toISOString().slice(0, 10),\r\n      userId: currentUser?.id\r\n    };\r\n    \r\n    setIncomes([...incomes, newIncome]);\r\n  };\r\n  \r\n  // Delete an expense\r\n  const deleteExpense = (id) => {\r\n    setExpenses(expenses.filter(expense => expense.id !== id));\r\n  };\r\n  \r\n  // Delete an income\r\n  const deleteIncome = (id) => {\r\n    setIncomes(incomes.filter(income => income.id !== id));\r\n  };\r\n  \r\n  // Update budget settings\r\n  const updateBudget = (category, amount) => {\r\n    setBudgets({\r\n      ...budgets,\r\n      [category]: amount\r\n    });\r\n  };\r\n  \r\n  // Check if adding this expense exceeds the budget\r\n  const checkBudgetAlerts = (newExpense, allExpenses = expenses) => {\r\n    const { category } = newExpense;\r\n    \r\n    if (budgets[category]) {\r\n      // Get current month expenses for this category\r\n      const currentDate = new Date();\r\n      const currentMonth = currentDate.getMonth();\r\n      const currentYear = currentDate.getFullYear();\r\n      \r\n      const monthlyExpenses = allExpenses.filter(expense => {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getMonth() === currentMonth && \r\n               expenseDate.getFullYear() === currentYear &&\r\n               expense.category === category &&\r\n               expense.userId === currentUser?.id;\r\n      });\r\n      \r\n      const totalSpent = monthlyExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\r\n      const budgetAmount = parseFloat(budgets[category]);\r\n      \r\n      if (totalSpent > budgetAmount) {\r\n        const newAlert = {\r\n          id: Date.now(),\r\n          message: `Budget alert: You've exceeded your ${category} budget of $${budgetAmount.toFixed(2)}`,\r\n          category: category,\r\n          read: false,\r\n          date: new Date().toISOString(),\r\n          userId: currentUser?.id\r\n        };\r\n        \r\n        setAlerts(prevAlerts => [...prevAlerts, newAlert]);\r\n        \r\n        // Send email alert if user has enabled email notifications\r\n        if (currentUser?.preferences?.emailNotifications !== false) {\r\n          console.log(\"Attempting to send email to:\", currentUser.email);\r\n          \r\n          sendBudgetAlertEmail(\r\n            currentUser,\r\n            category,\r\n            budgetAmount,\r\n            totalSpent\r\n          ).then(result => {\r\n            console.log('Email alert result:', result);\r\n            setEmailStatus({ \r\n              sent: result.success, \r\n              error: result.success ? null : result.message \r\n            });\r\n          }).catch(error => {\r\n            console.error('Failed to send email alert:', error);\r\n            setEmailStatus({ \r\n              sent: false, \r\n              error: error.message \r\n            });\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Mark an alert as read\r\n  const markAlertAsRead = (id) => {\r\n    setAlerts(alerts.map(alert => \r\n      alert.id === id ? { ...alert, read: true } : alert\r\n    ));\r\n  };\r\n  \r\n  return (\r\n    <ExpenseContext.Provider \r\n      value={{ \r\n        expenses, \r\n        addExpense, \r\n        deleteExpense, \r\n        incomes, \r\n        addIncome,\r\n        deleteIncome,\r\n        budgets, \r\n        updateBudget,\r\n        alerts,\r\n        markAlertAsRead,\r\n        emailStatus\r\n      }}>\r\n      {children}\r\n    </ExpenseContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,oBAAoB,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,OAAO,MAAMC,cAAc,gBAAGR,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMS,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC;IAAEqB,IAAI,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EAE5E,MAAM;IAAEC;EAAY,CAAC,GAAGrB,UAAU,CAACC,WAAW,CAAC;;EAE/C;EACA,MAAMqB,iBAAiB,GAAIC,GAAG,IAAK;IACjC,IAAI,CAACF,WAAW,EAAE,OAAOE,GAAG;IAC5B,OAAO,GAAGA,GAAG,IAAIF,WAAW,CAACG,EAAE,EAAE;EACnC,CAAC;;EAED;EACAzB,SAAS,CAAC,MAAM;IACd,IAAIsB,WAAW,EAAE;MACf,MAAMI,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACP,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE;MAC3F,MAAMQ,YAAY,GAAGJ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACP,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE;MACzF,MAAMS,YAAY,GAAGL,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACP,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;MACzF,MAAMU,WAAW,GAAGN,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACP,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE;MAEvFZ,WAAW,CAACe,aAAa,CAAC;MAC1Bb,UAAU,CAACkB,YAAY,CAAC;MACxBhB,UAAU,CAACiB,YAAY,CAAC;MACxBf,SAAS,CAACgB,WAAW,CAAC;IACxB,CAAC,MAAM;MACL;MACAtB,WAAW,CAAC,EAAE,CAAC;MACfE,UAAU,CAAC,EAAE,CAAC;MACdE,UAAU,CAAC,CAAC,CAAC,CAAC;MACdE,SAAS,CAAC,EAAE,CAAC;IACf;EACF,CAAC,EAAE,CAACK,WAAW,CAAC,CAAC;;EAEjB;EACAtB,SAAS,CAAC,MAAM;IACd,IAAIsB,WAAW,EAAE;MACfO,YAAY,CAACK,OAAO,CAACX,iBAAiB,CAAC,UAAU,CAAC,EAAEI,IAAI,CAACQ,SAAS,CAACzB,QAAQ,CAAC,CAAC;IAC/E;EACF,CAAC,EAAE,CAACA,QAAQ,EAAEY,WAAW,CAAC,CAAC;EAE3BtB,SAAS,CAAC,MAAM;IACd,IAAIsB,WAAW,EAAE;MACfO,YAAY,CAACK,OAAO,CAACX,iBAAiB,CAAC,SAAS,CAAC,EAAEI,IAAI,CAACQ,SAAS,CAACvB,OAAO,CAAC,CAAC;IAC7E;EACF,CAAC,EAAE,CAACA,OAAO,EAAEU,WAAW,CAAC,CAAC;EAE1BtB,SAAS,CAAC,MAAM;IACd,IAAIsB,WAAW,EAAE;MACfO,YAAY,CAACK,OAAO,CAACX,iBAAiB,CAAC,SAAS,CAAC,EAAEI,IAAI,CAACQ,SAAS,CAACrB,OAAO,CAAC,CAAC;IAC7E;EACF,CAAC,EAAE,CAACA,OAAO,EAAEQ,WAAW,CAAC,CAAC;EAE1BtB,SAAS,CAAC,MAAM;IACd,IAAIsB,WAAW,EAAE;MACfO,YAAY,CAACK,OAAO,CAACX,iBAAiB,CAAC,QAAQ,CAAC,EAAEI,IAAI,CAACQ,SAAS,CAACnB,MAAM,CAAC,CAAC;IAC3E;EACF,CAAC,EAAE,CAACA,MAAM,EAAEM,WAAW,CAAC,CAAC;;EAEzB;EACAtB,SAAS,CAAC,MAAM;IACd,IAAIkB,WAAW,CAACE,IAAI,IAAIF,WAAW,CAACG,KAAK,EAAE;MACzC,MAAMe,KAAK,GAAGC,UAAU,CAAC,MAAM;QAC7BlB,cAAc,CAAC;UAAEC,IAAI,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;MAC9C,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,MAAMiB,YAAY,CAACF,KAAK,CAAC;IAClC;EACF,CAAC,EAAE,CAAClB,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMqB,UAAU,GAAIC,OAAO,IAAK;IAC9B,MAAMC,UAAU,GAAG;MACjB,GAAGD,OAAO;MACVf,EAAE,EAAEiB,IAAI,CAACC,GAAG,CAAC,CAAC;MACdC,IAAI,EAAEJ,OAAO,CAACI,IAAI,IAAI,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MAC3DC,MAAM,EAAEzB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG;IACvB,CAAC;IAEDd,WAAW,CAACqC,YAAY,IAAI;MAC1B,MAAMC,eAAe,GAAG,CAAC,GAAGD,YAAY,EAAEP,UAAU,CAAC;;MAErD;MACAJ,UAAU,CAAC,MAAM;QACfa,iBAAiB,CAACT,UAAU,EAAEQ,eAAe,CAAC;MAChD,CAAC,EAAE,CAAC,CAAC;MAEL,OAAOA,eAAe;IACxB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAME,SAAS,GAAIC,MAAM,IAAK;IAC5B,MAAMC,SAAS,GAAG;MAChB,GAAGD,MAAM;MACT3B,EAAE,EAAEiB,IAAI,CAACC,GAAG,CAAC,CAAC;MACdC,IAAI,EAAEQ,MAAM,CAACR,IAAI,IAAI,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MAC1DC,MAAM,EAAEzB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG;IACvB,CAAC;IAEDZ,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEyC,SAAS,CAAC,CAAC;EACrC,CAAC;;EAED;EACA,MAAMC,aAAa,GAAI7B,EAAE,IAAK;IAC5Bd,WAAW,CAACD,QAAQ,CAAC6C,MAAM,CAACf,OAAO,IAAIA,OAAO,CAACf,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC5D,CAAC;;EAED;EACA,MAAM+B,YAAY,GAAI/B,EAAE,IAAK;IAC3BZ,UAAU,CAACD,OAAO,CAAC2C,MAAM,CAACH,MAAM,IAAIA,MAAM,CAAC3B,EAAE,KAAKA,EAAE,CAAC,CAAC;EACxD,CAAC;;EAED;EACA,MAAMgC,YAAY,GAAGA,CAACC,QAAQ,EAAEC,MAAM,KAAK;IACzC5C,UAAU,CAAC;MACT,GAAGD,OAAO;MACV,CAAC4C,QAAQ,GAAGC;IACd,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMT,iBAAiB,GAAGA,CAACT,UAAU,EAAEmB,WAAW,GAAGlD,QAAQ,KAAK;IAChE,MAAM;MAAEgD;IAAS,CAAC,GAAGjB,UAAU;IAE/B,IAAI3B,OAAO,CAAC4C,QAAQ,CAAC,EAAE;MACrB;MACA,MAAMG,WAAW,GAAG,IAAInB,IAAI,CAAC,CAAC;MAC9B,MAAMoB,YAAY,GAAGD,WAAW,CAACE,QAAQ,CAAC,CAAC;MAC3C,MAAMC,WAAW,GAAGH,WAAW,CAACI,WAAW,CAAC,CAAC;MAE7C,MAAMC,eAAe,GAAGN,WAAW,CAACL,MAAM,CAACf,OAAO,IAAI;QACpD,MAAM2B,WAAW,GAAG,IAAIzB,IAAI,CAACF,OAAO,CAACI,IAAI,CAAC;QAC1C,OAAOuB,WAAW,CAACJ,QAAQ,CAAC,CAAC,KAAKD,YAAY,IACvCK,WAAW,CAACF,WAAW,CAAC,CAAC,KAAKD,WAAW,IACzCxB,OAAO,CAACkB,QAAQ,KAAKA,QAAQ,IAC7BlB,OAAO,CAACO,MAAM,MAAKzB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG,EAAE;MAC3C,CAAC,CAAC;MAEF,MAAM2C,UAAU,GAAGF,eAAe,CAACG,MAAM,CAAC,CAACC,GAAG,EAAE9B,OAAO,KAAK8B,GAAG,GAAGC,UAAU,CAAC/B,OAAO,CAACmB,MAAM,CAAC,EAAE,CAAC,CAAC;MAChG,MAAMa,YAAY,GAAGD,UAAU,CAACzD,OAAO,CAAC4C,QAAQ,CAAC,CAAC;MAElD,IAAIU,UAAU,GAAGI,YAAY,EAAE;QAAA,IAAAC,qBAAA;QAC7B,MAAMC,QAAQ,GAAG;UACfjD,EAAE,EAAEiB,IAAI,CAACC,GAAG,CAAC,CAAC;UACdgC,OAAO,EAAE,sCAAsCjB,QAAQ,eAAec,YAAY,CAACI,OAAO,CAAC,CAAC,CAAC,EAAE;UAC/FlB,QAAQ,EAAEA,QAAQ;UAClBmB,IAAI,EAAE,KAAK;UACXjC,IAAI,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;UAC9BE,MAAM,EAAEzB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG;QACvB,CAAC;QAEDR,SAAS,CAAC6D,UAAU,IAAI,CAAC,GAAGA,UAAU,EAAEJ,QAAQ,CAAC,CAAC;;QAElD;QACA,IAAI,CAAApD,WAAW,aAAXA,WAAW,wBAAAmD,qBAAA,GAAXnD,WAAW,CAAEyD,WAAW,cAAAN,qBAAA,uBAAxBA,qBAAA,CAA0BO,kBAAkB,MAAK,KAAK,EAAE;UAC1DC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE5D,WAAW,CAAC6D,KAAK,CAAC;UAE9DhF,oBAAoB,CAClBmB,WAAW,EACXoC,QAAQ,EACRc,YAAY,EACZJ,UACF,CAAC,CAACgB,IAAI,CAACC,MAAM,IAAI;YACfJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEG,MAAM,CAAC;YAC1ClE,cAAc,CAAC;cACbC,IAAI,EAAEiE,MAAM,CAACC,OAAO;cACpBjE,KAAK,EAAEgE,MAAM,CAACC,OAAO,GAAG,IAAI,GAAGD,MAAM,CAACV;YACxC,CAAC,CAAC;UACJ,CAAC,CAAC,CAACY,KAAK,CAAClE,KAAK,IAAI;YAChB4D,OAAO,CAAC5D,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;YACnDF,cAAc,CAAC;cACbC,IAAI,EAAE,KAAK;cACXC,KAAK,EAAEA,KAAK,CAACsD;YACf,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ;MACF;IACF;EACF,CAAC;;EAED;EACA,MAAMa,eAAe,GAAI/D,EAAE,IAAK;IAC9BR,SAAS,CAACD,MAAM,CAACyE,GAAG,CAACC,KAAK,IACxBA,KAAK,CAACjE,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGiE,KAAK;MAAEb,IAAI,EAAE;IAAK,CAAC,GAAGa,KAC/C,CAAC,CAAC;EACJ,CAAC;EAED,oBACErF,OAAA,CAACC,cAAc,CAACqF,QAAQ;IACtBC,KAAK,EAAE;MACLlF,QAAQ;MACR6B,UAAU;MACVe,aAAa;MACb1C,OAAO;MACPuC,SAAS;MACTK,YAAY;MACZ1C,OAAO;MACP2C,YAAY;MACZzC,MAAM;MACNwE,eAAe;MACftE;IACF,CAAE;IAAAV,QAAA,EACDA;EAAQ;IAAAqF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACvF,EAAA,CAhNWF,eAAe;AAAA0F,EAAA,GAAf1F,eAAe;AAAA,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}