{"ast":null,"code":"// src/services/EmailService.js\nimport emailjs from 'emailjs-com';\n\n// Your EmailJS credentials\nconst EMAILJS_PUBLIC_KEY = 'g0Zv3mEDUVljCuJyL';\nconst EMAILJS_SERVICE_ID = 'service_uk2jyu5';\nconst EMAILJS_TEMPLATE_ID = 'template_kjrzsq6';\nconst EMAILJS_SPLIT_TEMPLATE_ID = 'template_mtp8afi';\n\n// Initialize EmailJS with better error handling\ntry {\n  emailjs.init(EMAILJS_PUBLIC_KEY);\n  console.log('ðŸ“§ EmailJS initialized successfully');\n} catch (error) {\n  console.error('ðŸ“§ Failed to initialize EmailJS:', error);\n}\n\n/**\r\n * Sends a split expense notification email to a participant\r\n * @param {object} participant - The participant object containing email and name\r\n * @param {object} splitExpense - The split expense details\r\n * @param {object} creator - The user who created the split expense\r\n * @param {boolean} isReminder - Whether this is a reminder email\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\nexport const sendSplitExpenseEmail = async (participant, splitExpense, creator) => {\n  // Basic validation\n  if (!participant || !participant.email) {\n    console.error('ðŸ“§ Cannot send email: Participant email is missing');\n    return {\n      success: false,\n      message: 'Participant email is missing'\n    };\n  }\n  console.log(`ðŸ“§ Sending split expense notification to: ${participant.email}`);\n\n  // Keep parameters simple to avoid template issues\n  const templateParams = {\n    to_email: participant.email,\n    to_name: participant.name || 'Participant',\n    creator_name: (creator === null || creator === void 0 ? void 0 : creator.name) || 'Someone',\n    from_email: (creator === null || creator === void 0 ? void 0 : creator.email) || '',\n    expense_description: splitExpense.description || 'Split expense',\n    expense_amount: (splitExpense.totalAmount || 0).toFixed(2),\n    share_amount: (participant.shareAmount || 0).toFixed(2),\n    expense_date: new Date(splitExpense.date || new Date()).toLocaleDateString(),\n    expense_category: splitExpense.category || 'Uncategorized',\n    reply_to: (creator === null || creator === void 0 ? void 0 : creator.email) || '',\n    from_name: (creator === null || creator === void 0 ? void 0 : creator.name) || 'FinTrack'\n  };\n  console.log('ðŸ“§ Email parameters:', JSON.stringify(templateParams, null, 2));\n  try {\n    // Send email using EmailJS\n    const response = await emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_SPLIT_TEMPLATE_ID, templateParams);\n    console.log('ðŸ“§ Email sent successfully!', response);\n    return {\n      success: true,\n      message: 'Email sent successfully',\n      response: response\n    };\n  } catch (error) {\n    console.error('ðŸ“§ Error sending email:', error);\n\n    // Provide detailed error information\n    let errorMessage = 'Failed to send email';\n    if (error.text) errorMessage += `: ${error.text}`;\n    return {\n      success: false,\n      message: errorMessage,\n      error: error\n    };\n  }\n};\n\n/**\r\n * Send a test split expense email to verify the configuration\r\n * @param {object} user - The user object containing email and name\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\nexport const sendTestSplitEmail = async user => {\n  if (!user || !user.email) {\n    console.error('ðŸ“§ Cannot send test email: User email is missing');\n    return {\n      success: false,\n      message: 'User email is missing'\n    };\n  }\n\n  // Create a test participant (using the user's info)\n  const participant = {\n    name: user.name || user.email.split('@')[0],\n    email: user.email,\n    shareAmount: 25.00\n  };\n\n  // Create a test split expense\n  const testSplitExpense = {\n    description: 'Test Split Expense',\n    totalAmount: 100.00,\n    date: new Date().toISOString(),\n    category: 'Dining'\n  };\n  return sendSplitExpenseEmail(participant, testSplitExpense, {\n    name: 'Test Creator',\n    email: 'creator@example.com'\n  });\n};\n\n// Budget alert email function\nexport const sendBudgetAlertEmail = async (user, category, budget, spent) => {\n  if (!user || !user.email) {\n    console.error('ðŸ“§ Cannot send email: User email is missing');\n    return {\n      success: false,\n      message: 'User email is missing'\n    };\n  }\n  const templateParams = {\n    to_email: user.email,\n    to_name: user.name || user.email.split('@')[0],\n    category: category,\n    budget: budget.toFixed(2),\n    spent: spent.toFixed(2),\n    over_amount: (spent - budget).toFixed(2),\n    reply_to: user.email,\n    from_name: 'FinTrack Budget Alert'\n  };\n  try {\n    const response = await emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, templateParams);\n    return {\n      success: true,\n      message: 'Email sent successfully',\n      response: response\n    };\n  } catch (error) {\n    console.error('ðŸ“§ Error sending email:', error);\n    return {\n      success: false,\n      message: `Failed to send email: ${error.message || 'Unknown error'}`,\n      error: error\n    };\n  }\n};\n\n/**\r\n * Send a test email to verify the configuration\r\n */\nexport const sendTestEmail = async user => {\n  if (!user || !user.email) {\n    return {\n      success: false,\n      message: 'User email is missing'\n    };\n  }\n  return sendBudgetAlertEmail(user, 'Test Category', 100.00, 150.00);\n};","map":{"version":3,"names":["emailjs","EMAILJS_PUBLIC_KEY","EMAILJS_SERVICE_ID","EMAILJS_TEMPLATE_ID","EMAILJS_SPLIT_TEMPLATE_ID","init","console","log","error","sendSplitExpenseEmail","participant","splitExpense","creator","email","success","message","templateParams","to_email","to_name","name","creator_name","from_email","expense_description","description","expense_amount","totalAmount","toFixed","share_amount","shareAmount","expense_date","Date","date","toLocaleDateString","expense_category","category","reply_to","from_name","JSON","stringify","response","send","errorMessage","text","sendTestSplitEmail","user","split","testSplitExpense","toISOString","sendBudgetAlertEmail","budget","spent","over_amount","sendTestEmail"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence tracker final/expence-tracker/src/services/EmailService.js"],"sourcesContent":["// src/services/EmailService.js\r\nimport emailjs from 'emailjs-com';\r\n\r\n// Your EmailJS credentials\r\nconst EMAILJS_PUBLIC_KEY = 'g0Zv3mEDUVljCuJyL';\r\nconst EMAILJS_SERVICE_ID = 'service_uk2jyu5';\r\nconst EMAILJS_TEMPLATE_ID = 'template_kjrzsq6';\r\nconst EMAILJS_SPLIT_TEMPLATE_ID = 'template_mtp8afi';\r\n\r\n// Initialize EmailJS with better error handling\r\ntry {\r\n  emailjs.init(EMAILJS_PUBLIC_KEY);\r\n  console.log('ðŸ“§ EmailJS initialized successfully');\r\n} catch (error) {\r\n  console.error('ðŸ“§ Failed to initialize EmailJS:', error);\r\n}\r\n\r\n/**\r\n * Sends a split expense notification email to a participant\r\n * @param {object} participant - The participant object containing email and name\r\n * @param {object} splitExpense - The split expense details\r\n * @param {object} creator - The user who created the split expense\r\n * @param {boolean} isReminder - Whether this is a reminder email\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\r\nexport const sendSplitExpenseEmail = async (participant, splitExpense, creator) => {\r\n  // Basic validation\r\n  if (!participant || !participant.email) {\r\n    console.error('ðŸ“§ Cannot send email: Participant email is missing');\r\n    return { success: false, message: 'Participant email is missing' };\r\n  }\r\n\r\n  console.log(`ðŸ“§ Sending split expense notification to: ${participant.email}`);\r\n  \r\n  // Keep parameters simple to avoid template issues\r\n  const templateParams = {\r\n    to_email: participant.email,\r\n    to_name: participant.name || 'Participant', \r\n    creator_name: creator?.name || 'Someone',\r\n    from_email: creator?.email || '',\r\n    expense_description: splitExpense.description || 'Split expense',\r\n    expense_amount: (splitExpense.totalAmount || 0).toFixed(2),\r\n    share_amount: (participant.shareAmount || 0).toFixed(2),\r\n    expense_date: new Date(splitExpense.date || new Date()).toLocaleDateString(),\r\n    expense_category: splitExpense.category || 'Uncategorized',\r\n    reply_to: creator?.email || '',\r\n    from_name: creator?.name || 'FinTrack'\r\n  };\r\n  \r\n  console.log('ðŸ“§ Email parameters:', JSON.stringify(templateParams, null, 2));\r\n  \r\n  try {\r\n    // Send email using EmailJS\r\n    const response = await emailjs.send(\r\n      EMAILJS_SERVICE_ID,\r\n      EMAILJS_SPLIT_TEMPLATE_ID,\r\n      templateParams\r\n    );\r\n    \r\n    console.log('ðŸ“§ Email sent successfully!', response);\r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n      response: response\r\n    };\r\n  } catch (error) {\r\n    console.error('ðŸ“§ Error sending email:', error);\r\n    \r\n    // Provide detailed error information\r\n    let errorMessage = 'Failed to send email';\r\n    if (error.text) errorMessage += `: ${error.text}`;\r\n    \r\n    return {\r\n      success: false,\r\n      message: errorMessage,\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Send a test split expense email to verify the configuration\r\n * @param {object} user - The user object containing email and name\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\r\nexport const sendTestSplitEmail = async (user) => {\r\n  if (!user || !user.email) {\r\n    console.error('ðŸ“§ Cannot send test email: User email is missing');\r\n    return { success: false, message: 'User email is missing' };\r\n  }\r\n  \r\n  // Create a test participant (using the user's info)\r\n  const participant = {\r\n    name: user.name || user.email.split('@')[0],\r\n    email: user.email,\r\n    shareAmount: 25.00\r\n  };\r\n  \r\n  // Create a test split expense\r\n  const testSplitExpense = {\r\n    description: 'Test Split Expense',\r\n    totalAmount: 100.00,\r\n    date: new Date().toISOString(),\r\n    category: 'Dining'\r\n  };\r\n  \r\n  return sendSplitExpenseEmail(\r\n    participant,\r\n    testSplitExpense,\r\n    { name: 'Test Creator', email: 'creator@example.com' }\r\n  );\r\n};\r\n\r\n// Budget alert email function\r\nexport const sendBudgetAlertEmail = async (user, category, budget, spent) => {\r\n  if (!user || !user.email) {\r\n    console.error('ðŸ“§ Cannot send email: User email is missing');\r\n    return { success: false, message: 'User email is missing' };\r\n  }\r\n\r\n  const templateParams = {\r\n    to_email: user.email,\r\n    to_name: user.name || user.email.split('@')[0],\r\n    category: category,\r\n    budget: budget.toFixed(2),\r\n    spent: spent.toFixed(2),\r\n    over_amount: (spent - budget).toFixed(2),\r\n    reply_to: user.email,\r\n    from_name: 'FinTrack Budget Alert'\r\n  };\r\n  \r\n  try {\r\n    const response = await emailjs.send(\r\n      EMAILJS_SERVICE_ID,\r\n      EMAILJS_TEMPLATE_ID,\r\n      templateParams\r\n    );\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n      response: response\r\n    };\r\n  } catch (error) {\r\n    console.error('ðŸ“§ Error sending email:', error);\r\n    return {\r\n      success: false,\r\n      message: `Failed to send email: ${error.message || 'Unknown error'}`,\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Send a test email to verify the configuration\r\n */\r\nexport const sendTestEmail = async (user) => {\r\n  if (!user || !user.email) {\r\n    return { success: false, message: 'User email is missing' };\r\n  }\r\n  \r\n  return sendBudgetAlertEmail(\r\n    user,\r\n    'Test Category',\r\n    100.00,\r\n    150.00\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}