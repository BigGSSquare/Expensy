{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence-tracker\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is already logged in on initial render\n  useEffect(() => {\n    const userData = localStorage.getItem('currentUser');\n    if (userData) {\n      setCurrentUser(JSON.parse(userData));\n    }\n    setLoading(false);\n  }, []);\n\n  // Save user data to localStorage when logging in\n  const login = (email, password) => {\n    // In a real app, this would be an API call to your backend\n    // For this demo, we'll check against the users in localStorage\n    const users = JSON.parse(localStorage.getItem('users')) || [];\n    const user = users.find(user => user.email === email && user.password === password);\n    if (user) {\n      // Don't store password in currentUser for security\n      const {\n        password,\n        ...userWithoutPassword\n      } = user;\n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return true;\n    }\n    return false;\n  };\n\n  // Register a new user\n  const register = (name, email, password) => {\n    // In a real app, this would be an API call to your backend\n    const users = JSON.parse(localStorage.getItem('users')) || [];\n\n    // Check if user already exists\n    const existingUser = users.find(user => user.email === email);\n    if (existingUser) {\n      return false; // User already exists\n    }\n\n    // Create new user\n    const newUser = {\n      id: Date.now(),\n      name,\n      email,\n      password,\n      // In a real app, this would be hashed\n      created: new Date().toISOString()\n    };\n\n    // Save to localStorage\n    localStorage.setItem('users', JSON.stringify([...users, newUser]));\n\n    // Auto login after registration\n    const {\n      password: _,\n      ...userWithoutPassword\n    } = newUser;\n    setCurrentUser(userWithoutPassword);\n    localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n    return true;\n  };\n\n  // Log out user\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n  };\n\n  // Update user profile\n  const updateProfile = updatedData => {\n    // Get all users\n    const users = JSON.parse(localStorage.getItem('users')) || [];\n\n    // Find and update user\n    const updatedUsers = users.map(user => {\n      if (user.id === currentUser.id) {\n        // Preserve password from original user object\n        return {\n          ...user,\n          ...updatedData\n        };\n      }\n      return user;\n    });\n\n    // Update localStorage\n    localStorage.setItem('users', JSON.stringify(updatedUsers));\n\n    // Update current user in state and localStorage\n    const updatedUser = {\n      ...currentUser,\n      ...updatedData\n    };\n    setCurrentUser(updatedUser);\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n    return true;\n  };\n\n  // Change password\n  const changePassword = (oldPassword, newPassword) => {\n    // Get all users\n    const users = JSON.parse(localStorage.getItem('users')) || [];\n\n    // Find user and verify old password\n    const userIndex = users.findIndex(user => user.id === currentUser.id && user.password === oldPassword);\n    if (userIndex === -1) {\n      return false; // Old password doesn't match\n    }\n\n    // Update password\n    users[userIndex].password = newPassword;\n\n    // Update localStorage\n    localStorage.setItem('users', JSON.stringify(users));\n    return true;\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      loading,\n      login,\n      register,\n      logout,\n      updateProfile,\n      changePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","userData","localStorage","getItem","JSON","parse","login","email","password","users","user","find","userWithoutPassword","setItem","stringify","register","name","existingUser","newUser","id","Date","now","created","toISOString","_","logout","removeItem","updateProfile","updatedData","updatedUsers","map","updatedUser","changePassword","oldPassword","newPassword","userIndex","findIndex","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Check if user is already logged in on initial render\r\n  useEffect(() => {\r\n    const userData = localStorage.getItem('currentUser');\r\n    if (userData) {\r\n      setCurrentUser(JSON.parse(userData));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Save user data to localStorage when logging in\r\n  const login = (email, password) => {\r\n    // In a real app, this would be an API call to your backend\r\n    // For this demo, we'll check against the users in localStorage\r\n    const users = JSON.parse(localStorage.getItem('users')) || [];\r\n    const user = users.find(\r\n      (user) => user.email === email && user.password === password\r\n    );\r\n\r\n    if (user) {\r\n      // Don't store password in currentUser for security\r\n      const { password, ...userWithoutPassword } = user;\r\n      setCurrentUser(userWithoutPassword);\r\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Register a new user\r\n  const register = (name, email, password) => {\r\n    // In a real app, this would be an API call to your backend\r\n    const users = JSON.parse(localStorage.getItem('users')) || [];\r\n    \r\n    // Check if user already exists\r\n    const existingUser = users.find((user) => user.email === email);\r\n    if (existingUser) {\r\n      return false; // User already exists\r\n    }\r\n    \r\n    // Create new user\r\n    const newUser = {\r\n      id: Date.now(),\r\n      name,\r\n      email,\r\n      password, // In a real app, this would be hashed\r\n      created: new Date().toISOString(),\r\n    };\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem('users', JSON.stringify([...users, newUser]));\r\n    \r\n    // Auto login after registration\r\n    const { password: _, ...userWithoutPassword } = newUser;\r\n    setCurrentUser(userWithoutPassword);\r\n    localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Log out user\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('currentUser');\r\n  };\r\n\r\n  // Update user profile\r\n  const updateProfile = (updatedData) => {\r\n    // Get all users\r\n    const users = JSON.parse(localStorage.getItem('users')) || [];\r\n    \r\n    // Find and update user\r\n    const updatedUsers = users.map(user => {\r\n      if (user.id === currentUser.id) {\r\n        // Preserve password from original user object\r\n        return { ...user, ...updatedData };\r\n      }\r\n      return user;\r\n    });\r\n    \r\n    // Update localStorage\r\n    localStorage.setItem('users', JSON.stringify(updatedUsers));\r\n    \r\n    // Update current user in state and localStorage\r\n    const updatedUser = { ...currentUser, ...updatedData };\r\n    setCurrentUser(updatedUser);\r\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser));\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Change password\r\n  const changePassword = (oldPassword, newPassword) => {\r\n    // Get all users\r\n    const users = JSON.parse(localStorage.getItem('users')) || [];\r\n    \r\n    // Find user and verify old password\r\n    const userIndex = users.findIndex(user => \r\n      user.id === currentUser.id && user.password === oldPassword\r\n    );\r\n    \r\n    if (userIndex === -1) {\r\n      return false; // Old password doesn't match\r\n    }\r\n    \r\n    // Update password\r\n    users[userIndex].password = newPassword;\r\n    \r\n    // Update localStorage\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n    \r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        currentUser,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n        updateProfile,\r\n        changePassword\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}