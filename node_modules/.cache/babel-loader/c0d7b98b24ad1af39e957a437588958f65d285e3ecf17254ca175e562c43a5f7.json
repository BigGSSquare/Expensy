{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence tracker final\\\\expence-tracker\\\\src\\\\components\\\\ExportData.js\",\n  _s = $RefreshSig$();\n// src/components/ExportData.js\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ExpenseContext } from '../context/ExpenseContext';\nimport { AuthContext } from '../context/AuthContext';\nimport * as XLSX from 'xlsx';\nimport './ExportData.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExportData = () => {\n  _s();\n  const {\n    expenses,\n    incomes,\n    exportData\n  } = useContext(ExpenseContext);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const [exportType, setExportType] = useState('all'); // 'all', 'expenses', 'income'\n  const [dateRange, setDateRange] = useState('all'); // 'all', 'month', 'year', 'custom'\n  const [customStartDate, setCustomStartDate] = useState('');\n  const [customEndDate, setCustomEndDate] = useState('');\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportSuccess, setExportSuccess] = useState(false);\n  const [exportError, setExportError] = useState('');\n\n  // Handle export button click\n  const handleExport = async () => {\n    try {\n      setIsExporting(true);\n      setExportSuccess(false);\n      setExportError('');\n\n      // Get filtered data based on date range\n      const filteredData = getFilteredData();\n\n      // Create workbook with appropriate sheets\n      const workbook = XLSX.utils.book_new();\n\n      // Add metadata sheet\n      const metadataWs = XLSX.utils.json_to_sheet([{\n        key: 'Exported By',\n        value: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) || (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email) || 'User'\n      }, {\n        key: 'Export Date',\n        value: new Date().toLocaleString()\n      }, {\n        key: 'Export Type',\n        value: getExportTypeLabel()\n      }, {\n        key: 'Date Range',\n        value: getDateRangeLabel()\n      }]);\n      XLSX.utils.book_append_sheet(workbook, metadataWs, 'Export Info');\n\n      // Add expenses sheet if needed\n      if (exportType === 'all' || exportType === 'expenses') {\n        if (filteredData.expenses.length > 0) {\n          // Format expense data for export\n          const formattedExpenses = filteredData.expenses.map(expense => ({\n            'Date': formatDate(expense.date),\n            'Category': expense.category || 'Uncategorized',\n            'Description': expense.description || '',\n            'Amount': parseFloat(expense.amount) || 0,\n            'Notes': expense.notes || '',\n            'Created': formatDate(expense.createdAt)\n          }));\n          const expensesWs = XLSX.utils.json_to_sheet(formattedExpenses);\n          XLSX.utils.book_append_sheet(workbook, expensesWs, 'Expenses');\n        } else {\n          // Add empty sheet with headers\n          const emptyExpensesWs = XLSX.utils.json_to_sheet([{\n            'Date': '',\n            'Category': '',\n            'Description': '',\n            'Amount': '',\n            'Notes': '',\n            'Created': ''\n          }]);\n          XLSX.utils.book_append_sheet(workbook, emptyExpensesWs, 'Expenses (No Data)');\n        }\n      }\n\n      // Add income sheet if needed\n      if (exportType === 'all' || exportType === 'income') {\n        if (filteredData.incomes.length > 0) {\n          // Format income data for export\n          const formattedIncomes = filteredData.incomes.map(income => ({\n            'Date': formatDate(income.date),\n            'Source': income.source || 'Uncategorized',\n            'Description': income.description || '',\n            'Amount': parseFloat(income.amount) || 0,\n            'Notes': income.notes || '',\n            'Created': formatDate(income.createdAt)\n          }));\n          const incomesWs = XLSX.utils.json_to_sheet(formattedIncomes);\n          XLSX.utils.book_append_sheet(workbook, incomesWs, 'Income');\n        } else {\n          // Add empty sheet with headers\n          const emptyIncomesWs = XLSX.utils.json_to_sheet([{\n            'Date': '',\n            'Source': '',\n            'Description': '',\n            'Amount': '',\n            'Notes': '',\n            'Created': ''\n          }]);\n          XLSX.utils.book_append_sheet(workbook, emptyIncomesWs, 'Income (No Data)');\n        }\n      }\n\n      // Add summary sheet with totals\n      if (exportType === 'all') {\n        // Calculate totals\n        const expenseTotal = filteredData.expenses.reduce((sum, exp) => sum + (parseFloat(exp.amount) || 0), 0);\n        const incomeTotal = filteredData.incomes.reduce((sum, inc) => sum + (parseFloat(inc.amount) || 0), 0);\n        const balance = incomeTotal - expenseTotal;\n\n        // Create summary data\n        const summaryData = [{\n          Category: 'Total Expenses',\n          Amount: expenseTotal\n        }, {\n          Category: 'Total Income',\n          Amount: incomeTotal\n        }, {\n          Category: 'Net Balance',\n          Amount: balance\n        }];\n        const summaryWs = XLSX.utils.json_to_sheet(summaryData);\n        XLSX.utils.book_append_sheet(workbook, summaryWs, 'Summary');\n      }\n\n      // Generate Excel file name\n      const fileName = `FinanceData_${new Date().toISOString().slice(0, 10)}.xlsx`;\n\n      // Export the workbook to Excel file and trigger download\n      XLSX.writeFile(workbook, fileName);\n      setExportSuccess(true);\n      setTimeout(() => setExportSuccess(false), 3000); // Clear success message after 3 seconds\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      setExportError('Failed to export data. Please try again.');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Filter data based on selected date range\n  const getFilteredData = () => {\n    // Make sure we have valid arrays\n    const safeExpenses = Array.isArray(expenses) ? expenses : [];\n    const safeIncomes = Array.isArray(incomes) ? incomes : [];\n\n    // Get start and end dates based on selected range\n    const {\n      startDate,\n      endDate\n    } = getDateRange();\n\n    // Filter expenses by date\n    const filteredExpenses = safeExpenses.filter(expense => {\n      if (!expense.date) return false;\n      try {\n        const expenseDate = new Date(expense.date);\n        return expenseDate >= startDate && expenseDate <= endDate;\n      } catch (e) {\n        return false;\n      }\n    });\n\n    // Filter incomes by date\n    const filteredIncomes = safeIncomes.filter(income => {\n      if (!income.date) return false;\n      try {\n        const incomeDate = new Date(income.date);\n        return incomeDate >= startDate && incomeDate <= endDate;\n      } catch (e) {\n        return false;\n      }\n    });\n    return {\n      expenses: filteredExpenses,\n      incomes: filteredIncomes\n    };\n  };\n\n  // Get date range based on selection\n  const getDateRange = () => {\n    const now = new Date();\n    let startDate = new Date(0); // Jan 1, 1970\n    let endDate = new Date(); // Today\n\n    if (dateRange === 'month') {\n      // Current month\n      startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n    } else if (dateRange === 'year') {\n      // Current year\n      startDate = new Date(now.getFullYear(), 0, 1);\n    } else if (dateRange === 'custom') {\n      // Custom date range\n      if (customStartDate) {\n        startDate = new Date(customStartDate);\n      }\n      if (customEndDate) {\n        endDate = new Date(customEndDate);\n        // Set to end of day\n        endDate.setHours(23, 59, 59, 999);\n      }\n    }\n    return {\n      startDate,\n      endDate\n    };\n  };\n\n  // Format date for Excel\n  const formatDate = dateString => {\n    if (!dateString) return '';\n    try {\n      const date = new Date(dateString);\n      return date.toLocaleDateString();\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n  // Get export type label for metadata\n  const getExportTypeLabel = () => {\n    switch (exportType) {\n      case 'expenses':\n        return 'Expenses Only';\n      case 'income':\n        return 'Income Only';\n      default:\n        return 'All Financial Data';\n    }\n  };\n\n  // Get date range label for metadata\n  const getDateRangeLabel = () => {\n    switch (dateRange) {\n      case 'month':\n        return 'Current Month';\n      case 'year':\n        return 'Current Year';\n      case 'custom':\n        return `Custom: ${customStartDate || 'All past'} to ${customEndDate || 'Present'}`;\n      default:\n        return 'All Time';\n    }\n  };\n\n  // Count the number of items for each date range\n  useEffect(() => {\n    // We don't need to do anything here, just want the component to re-render\n    // when the date range changes to update the data summary\n  }, [dateRange, customStartDate, customEndDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"export-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Export Financial Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"export-description\",\n      children: \"Export your financial data to an Excel file for further analysis or record-keeping.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), exportError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-error\",\n      children: exportError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 23\n    }, this), exportSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-success\",\n      children: \"Data exported successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"What to Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"radio-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"radio-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"exportType\",\n              value: \"all\",\n              checked: exportType === 'all',\n              onChange: () => setExportType('all')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 15\n            }, this), \"All Financial Data\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"radio-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"exportType\",\n              value: \"expenses\",\n              checked: exportType === 'expenses',\n              onChange: () => setExportType('expenses')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 15\n            }, this), \"Expenses Only\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"radio-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"exportType\",\n              value: \"income\",\n              checked: exportType === 'income',\n              onChange: () => setExportType('income')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 15\n            }, this), \"Income Only\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Date Range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"radio-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"radio-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"dateRange\",\n              value: \"all\",\n              checked: dateRange === 'all',\n              onChange: () => setDateRange('all')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this), \"All Time\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"radio-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"dateRange\",\n              value: \"month\",\n              checked: dateRange === 'month',\n              onChange: () => setDateRange('month')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this), \"Current Month\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"radio-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"dateRange\",\n              value: \"year\",\n              checked: dateRange === 'year',\n              onChange: () => setDateRange('year')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 15\n            }, this), \"Current Year\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"radio-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"dateRange\",\n              value: \"custom\",\n              checked: dateRange === 'custom',\n              onChange: () => setDateRange('custom')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 15\n            }, this), \"Custom Range\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), dateRange === 'custom' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-date-range\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"startDate\",\n              children: \"Start Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              id: \"startDate\",\n              value: customStartDate,\n              onChange: e => setCustomStartDate(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"endDate\",\n              children: \"End Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              id: \"endDate\",\n              value: customEndDate,\n              onChange: e => setCustomEndDate(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"summary-label\",\n          children: \"Available Expenses:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"summary-value\",\n          children: Array.isArray(expenses) ? expenses.length : 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"summary-label\",\n          children: \"Available Income Entries:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"summary-value\",\n          children: Array.isArray(incomes) ? incomes.length : 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"export-button\",\n      onClick: handleExport,\n      disabled: isExporting,\n      children: isExporting ? 'Exporting...' : 'Export to Excel'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-note\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Note:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), \" The exported file will be downloaded to your device and is not sent to any server.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(ExportData, \"QCT+ByIdoOQ8fzvzhKJ6olfkFzg=\");\n_c = ExportData;\nexport default ExportData;\nvar _c;\n$RefreshReg$(_c, \"ExportData\");","map":{"version":3,"names":["React","useState","useContext","useEffect","ExpenseContext","AuthContext","XLSX","jsxDEV","_jsxDEV","ExportData","_s","expenses","incomes","exportData","currentUser","exportType","setExportType","dateRange","setDateRange","customStartDate","setCustomStartDate","customEndDate","setCustomEndDate","isExporting","setIsExporting","exportSuccess","setExportSuccess","exportError","setExportError","handleExport","filteredData","getFilteredData","workbook","utils","book_new","metadataWs","json_to_sheet","key","value","name","email","Date","toLocaleString","getExportTypeLabel","getDateRangeLabel","book_append_sheet","length","formattedExpenses","map","expense","formatDate","date","category","description","parseFloat","amount","notes","createdAt","expensesWs","emptyExpensesWs","formattedIncomes","income","source","incomesWs","emptyIncomesWs","expenseTotal","reduce","sum","exp","incomeTotal","inc","balance","summaryData","Category","Amount","summaryWs","fileName","toISOString","slice","writeFile","setTimeout","error","console","safeExpenses","Array","isArray","safeIncomes","startDate","endDate","getDateRange","filteredExpenses","filter","expenseDate","e","filteredIncomes","incomeDate","now","getFullYear","getMonth","setHours","dateString","toLocaleDateString","className","children","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","htmlFor","id","target","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence tracker final/expence-tracker/src/components/ExportData.js"],"sourcesContent":["// src/components/ExportData.js\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport { ExpenseContext } from '../context/ExpenseContext';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport * as XLSX from 'xlsx';\r\nimport './ExportData.css';\r\n\r\nconst ExportData = () => {\r\n  const { expenses, incomes, exportData } = useContext(ExpenseContext);\r\n  const { currentUser } = useContext(AuthContext);\r\n  const [exportType, setExportType] = useState('all'); // 'all', 'expenses', 'income'\r\n  const [dateRange, setDateRange] = useState('all'); // 'all', 'month', 'year', 'custom'\r\n  const [customStartDate, setCustomStartDate] = useState('');\r\n  const [customEndDate, setCustomEndDate] = useState('');\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [exportSuccess, setExportSuccess] = useState(false);\r\n  const [exportError, setExportError] = useState('');\r\n\r\n  // Handle export button click\r\n  const handleExport = async () => {\r\n    try {\r\n      setIsExporting(true);\r\n      setExportSuccess(false);\r\n      setExportError('');\r\n\r\n      // Get filtered data based on date range\r\n      const filteredData = getFilteredData();\r\n\r\n      // Create workbook with appropriate sheets\r\n      const workbook = XLSX.utils.book_new();\r\n      \r\n      // Add metadata sheet\r\n      const metadataWs = XLSX.utils.json_to_sheet([\r\n        { key: 'Exported By', value: currentUser?.name || currentUser?.email || 'User' },\r\n        { key: 'Export Date', value: new Date().toLocaleString() },\r\n        { key: 'Export Type', value: getExportTypeLabel() },\r\n        { key: 'Date Range', value: getDateRangeLabel() }\r\n      ]);\r\n      XLSX.utils.book_append_sheet(workbook, metadataWs, 'Export Info');\r\n\r\n      // Add expenses sheet if needed\r\n      if (exportType === 'all' || exportType === 'expenses') {\r\n        if (filteredData.expenses.length > 0) {\r\n          // Format expense data for export\r\n          const formattedExpenses = filteredData.expenses.map(expense => ({\r\n            'Date': formatDate(expense.date),\r\n            'Category': expense.category || 'Uncategorized',\r\n            'Description': expense.description || '',\r\n            'Amount': parseFloat(expense.amount) || 0,\r\n            'Notes': expense.notes || '',\r\n            'Created': formatDate(expense.createdAt)\r\n          }));\r\n          \r\n          const expensesWs = XLSX.utils.json_to_sheet(formattedExpenses);\r\n          XLSX.utils.book_append_sheet(workbook, expensesWs, 'Expenses');\r\n        } else {\r\n          // Add empty sheet with headers\r\n          const emptyExpensesWs = XLSX.utils.json_to_sheet([{\r\n            'Date': '', 'Category': '', 'Description': '', 'Amount': '', 'Notes': '', 'Created': ''\r\n          }]);\r\n          XLSX.utils.book_append_sheet(workbook, emptyExpensesWs, 'Expenses (No Data)');\r\n        }\r\n      }\r\n\r\n      // Add income sheet if needed\r\n      if (exportType === 'all' || exportType === 'income') {\r\n        if (filteredData.incomes.length > 0) {\r\n          // Format income data for export\r\n          const formattedIncomes = filteredData.incomes.map(income => ({\r\n            'Date': formatDate(income.date),\r\n            'Source': income.source || 'Uncategorized',\r\n            'Description': income.description || '',\r\n            'Amount': parseFloat(income.amount) || 0,\r\n            'Notes': income.notes || '',\r\n            'Created': formatDate(income.createdAt)\r\n          }));\r\n          \r\n          const incomesWs = XLSX.utils.json_to_sheet(formattedIncomes);\r\n          XLSX.utils.book_append_sheet(workbook, incomesWs, 'Income');\r\n        } else {\r\n          // Add empty sheet with headers\r\n          const emptyIncomesWs = XLSX.utils.json_to_sheet([{\r\n            'Date': '', 'Source': '', 'Description': '', 'Amount': '', 'Notes': '', 'Created': ''\r\n          }]);\r\n          XLSX.utils.book_append_sheet(workbook, emptyIncomesWs, 'Income (No Data)');\r\n        }\r\n      }\r\n\r\n      // Add summary sheet with totals\r\n      if (exportType === 'all') {\r\n        // Calculate totals\r\n        const expenseTotal = filteredData.expenses.reduce((sum, exp) => \r\n          sum + (parseFloat(exp.amount) || 0), 0);\r\n        \r\n        const incomeTotal = filteredData.incomes.reduce((sum, inc) => \r\n          sum + (parseFloat(inc.amount) || 0), 0);\r\n        \r\n        const balance = incomeTotal - expenseTotal;\r\n        \r\n        // Create summary data\r\n        const summaryData = [\r\n          { Category: 'Total Expenses', Amount: expenseTotal },\r\n          { Category: 'Total Income', Amount: incomeTotal },\r\n          { Category: 'Net Balance', Amount: balance }\r\n        ];\r\n        \r\n        const summaryWs = XLSX.utils.json_to_sheet(summaryData);\r\n        XLSX.utils.book_append_sheet(workbook, summaryWs, 'Summary');\r\n      }\r\n\r\n      // Generate Excel file name\r\n      const fileName = `FinanceData_${new Date().toISOString().slice(0, 10)}.xlsx`;\r\n      \r\n      // Export the workbook to Excel file and trigger download\r\n      XLSX.writeFile(workbook, fileName);\r\n      \r\n      setExportSuccess(true);\r\n      setTimeout(() => setExportSuccess(false), 3000); // Clear success message after 3 seconds\r\n    } catch (error) {\r\n      console.error('Error exporting data:', error);\r\n      setExportError('Failed to export data. Please try again.');\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  };\r\n\r\n  // Filter data based on selected date range\r\n  const getFilteredData = () => {\r\n    // Make sure we have valid arrays\r\n    const safeExpenses = Array.isArray(expenses) ? expenses : [];\r\n    const safeIncomes = Array.isArray(incomes) ? incomes : [];\r\n    \r\n    // Get start and end dates based on selected range\r\n    const { startDate, endDate } = getDateRange();\r\n    \r\n    // Filter expenses by date\r\n    const filteredExpenses = safeExpenses.filter(expense => {\r\n      if (!expense.date) return false;\r\n      \r\n      try {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate >= startDate && expenseDate <= endDate;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    });\r\n    \r\n    // Filter incomes by date\r\n    const filteredIncomes = safeIncomes.filter(income => {\r\n      if (!income.date) return false;\r\n      \r\n      try {\r\n        const incomeDate = new Date(income.date);\r\n        return incomeDate >= startDate && incomeDate <= endDate;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    });\r\n    \r\n    return { expenses: filteredExpenses, incomes: filteredIncomes };\r\n  };\r\n\r\n  // Get date range based on selection\r\n  const getDateRange = () => {\r\n    const now = new Date();\r\n    let startDate = new Date(0); // Jan 1, 1970\r\n    let endDate = new Date(); // Today\r\n    \r\n    if (dateRange === 'month') {\r\n      // Current month\r\n      startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n    } else if (dateRange === 'year') {\r\n      // Current year\r\n      startDate = new Date(now.getFullYear(), 0, 1);\r\n    } else if (dateRange === 'custom') {\r\n      // Custom date range\r\n      if (customStartDate) {\r\n        startDate = new Date(customStartDate);\r\n      }\r\n      if (customEndDate) {\r\n        endDate = new Date(customEndDate);\r\n        // Set to end of day\r\n        endDate.setHours(23, 59, 59, 999);\r\n      }\r\n    }\r\n    \r\n    return { startDate, endDate };\r\n  };\r\n\r\n  // Format date for Excel\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return '';\r\n    \r\n    try {\r\n      const date = new Date(dateString);\r\n      return date.toLocaleDateString();\r\n    } catch (e) {\r\n      return dateString;\r\n    }\r\n  };\r\n\r\n  // Get export type label for metadata\r\n  const getExportTypeLabel = () => {\r\n    switch (exportType) {\r\n      case 'expenses': return 'Expenses Only';\r\n      case 'income': return 'Income Only';\r\n      default: return 'All Financial Data';\r\n    }\r\n  };\r\n\r\n  // Get date range label for metadata\r\n  const getDateRangeLabel = () => {\r\n    switch (dateRange) {\r\n      case 'month': return 'Current Month';\r\n      case 'year': return 'Current Year';\r\n      case 'custom': \r\n        return `Custom: ${customStartDate || 'All past'} to ${customEndDate || 'Present'}`;\r\n      default: return 'All Time';\r\n    }\r\n  };\r\n\r\n  // Count the number of items for each date range\r\n  useEffect(() => {\r\n    // We don't need to do anything here, just want the component to re-render\r\n    // when the date range changes to update the data summary\r\n  }, [dateRange, customStartDate, customEndDate]);\r\n\r\n  return (\r\n    <div className=\"export-container\">\r\n      <h2>Export Financial Data</h2>\r\n      <p className=\"export-description\">\r\n        Export your financial data to an Excel file for further analysis or record-keeping.\r\n      </p>\r\n      \r\n      {exportError && <div className=\"export-error\">{exportError}</div>}\r\n      {exportSuccess && <div className=\"export-success\">Data exported successfully!</div>}\r\n      \r\n      <div className=\"export-options\">\r\n        <div className=\"option-group\">\r\n          <h3>What to Export</h3>\r\n          <div className=\"radio-group\">\r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"exportType\"\r\n                value=\"all\"\r\n                checked={exportType === 'all'}\r\n                onChange={() => setExportType('all')}\r\n              />\r\n              All Financial Data\r\n            </label>\r\n            \r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"exportType\"\r\n                value=\"expenses\"\r\n                checked={exportType === 'expenses'}\r\n                onChange={() => setExportType('expenses')}\r\n              />\r\n              Expenses Only\r\n            </label>\r\n            \r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"exportType\"\r\n                value=\"income\"\r\n                checked={exportType === 'income'}\r\n                onChange={() => setExportType('income')}\r\n              />\r\n              Income Only\r\n            </label>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"option-group\">\r\n          <h3>Date Range</h3>\r\n          <div className=\"radio-group\">\r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"dateRange\"\r\n                value=\"all\"\r\n                checked={dateRange === 'all'}\r\n                onChange={() => setDateRange('all')}\r\n              />\r\n              All Time\r\n            </label>\r\n            \r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"dateRange\"\r\n                value=\"month\"\r\n                checked={dateRange === 'month'}\r\n                onChange={() => setDateRange('month')}\r\n              />\r\n              Current Month\r\n            </label>\r\n            \r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"dateRange\"\r\n                value=\"year\"\r\n                checked={dateRange === 'year'}\r\n                onChange={() => setDateRange('year')}\r\n              />\r\n              Current Year\r\n            </label>\r\n            \r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"dateRange\"\r\n                value=\"custom\"\r\n                checked={dateRange === 'custom'}\r\n                onChange={() => setDateRange('custom')}\r\n              />\r\n              Custom Range\r\n            </label>\r\n          </div>\r\n          \r\n          {dateRange === 'custom' && (\r\n            <div className=\"custom-date-range\">\r\n              <div className=\"date-input\">\r\n                <label htmlFor=\"startDate\">Start Date:</label>\r\n                <input\r\n                  type=\"date\"\r\n                  id=\"startDate\"\r\n                  value={customStartDate}\r\n                  onChange={(e) => setCustomStartDate(e.target.value)}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"date-input\">\r\n                <label htmlFor=\"endDate\">End Date:</label>\r\n                <input\r\n                  type=\"date\"\r\n                  id=\"endDate\"\r\n                  value={customEndDate}\r\n                  onChange={(e) => setCustomEndDate(e.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"data-summary\">\r\n        <div className=\"summary-item\">\r\n          <span className=\"summary-label\">Available Expenses:</span>\r\n          <span className=\"summary-value\">{Array.isArray(expenses) ? expenses.length : 0}</span>\r\n        </div>\r\n        <div className=\"summary-item\">\r\n          <span className=\"summary-label\">Available Income Entries:</span>\r\n          <span className=\"summary-value\">{Array.isArray(incomes) ? incomes.length : 0}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <button\r\n        className=\"export-button\"\r\n        onClick={handleExport}\r\n        disabled={isExporting}\r\n      >\r\n        {isExporting ? 'Exporting...' : 'Export to Excel'}\r\n      </button>\r\n      \r\n      <div className=\"export-note\">\r\n        <p>\r\n          <strong>Note:</strong> The exported file will be downloaded to your device and is not sent to any server.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExportData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}