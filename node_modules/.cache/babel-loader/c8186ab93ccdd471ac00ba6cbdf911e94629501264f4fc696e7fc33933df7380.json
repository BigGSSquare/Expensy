{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence-tracker - Copy\\\\expence-tracker\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ExpenseContext } from '../context/ExpenseContext';\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\nimport BudgetAlerts from './BudgetAlerts';\nimport ImprovedCategoryChart from './ImprovedCategoryChart';\nimport ImprovedBarChart from './ImprovedBarChart';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    expenses,\n    budgets,\n    alerts,\n    incomes\n  } = useContext(ExpenseContext);\n  const [chartData, setChartData] = useState([]);\n  const [categoryData, setCategoryData] = useState([]);\n  const [timeframe, setTimeframe] = useState('month');\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28AD3', '#FF6B6B', '#4ECDC4'];\n\n  // Use useCallback to memoize these functions so they don't get recreated on every render\n  const prepareChartData = useCallback(() => {\n    if (expenses.length === 0) return;\n    const now = new Date();\n    let filteredExpenses = [];\n    if (timeframe === 'week') {\n      // Last 7 days\n      const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      filteredExpenses = expenses.filter(expense => new Date(expense.date) >= lastWeek);\n    } else if (timeframe === 'month') {\n      // Current month\n      filteredExpenses = expenses.filter(expense => {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getMonth() === now.getMonth() && expenseDate.getFullYear() === now.getFullYear();\n      });\n    } else if (timeframe === 'year') {\n      // Current year\n      filteredExpenses = expenses.filter(expense => {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getFullYear() === now.getFullYear();\n      });\n    }\n\n    // Group by date\n    const groupedData = {};\n    filteredExpenses.forEach(expense => {\n      const date = expense.date;\n      if (!groupedData[date]) {\n        groupedData[date] = 0;\n      }\n      groupedData[date] += parseFloat(expense.amount);\n    });\n\n    // Convert to array for recharts\n    const chartDataArray = Object.keys(groupedData).sort().map(date => ({\n      date,\n      amount: groupedData[date]\n    }));\n    setChartData(chartDataArray);\n  }, [expenses, timeframe]);\n  const prepareCategoryData = useCallback(() => {\n    if (expenses.length === 0) return;\n    const now = new Date();\n    let filteredExpenses = [];\n    if (timeframe === 'week') {\n      const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      filteredExpenses = expenses.filter(expense => new Date(expense.date) >= lastWeek);\n    } else if (timeframe === 'month') {\n      filteredExpenses = expenses.filter(expense => {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getMonth() === now.getMonth() && expenseDate.getFullYear() === now.getFullYear();\n      });\n    } else if (timeframe === 'year') {\n      filteredExpenses = expenses.filter(expense => {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getFullYear() === now.getFullYear();\n      });\n    }\n\n    // Group by category\n    const categoryTotals = {};\n    let totalAmount = 0;\n    filteredExpenses.forEach(expense => {\n      const {\n        category,\n        amount\n      } = expense;\n      if (!categoryTotals[category]) {\n        categoryTotals[category] = 0;\n      }\n      categoryTotals[category] += parseFloat(amount);\n      totalAmount += parseFloat(amount);\n    });\n\n    // Convert to array for recharts and calculate percentages\n    const categoryDataArray = Object.keys(categoryTotals).map(category => {\n      const value = categoryTotals[category];\n      const percentage = totalAmount > 0 ? value / totalAmount * 100 : 0;\n      return {\n        name: category,\n        value: value,\n        percentage: percentage\n      };\n    });\n    setCategoryData(categoryDataArray);\n  }, [expenses, timeframe]);\n\n  // Effect to update charts when timeframe or expenses change\n  useEffect(() => {\n    prepareChartData();\n    prepareCategoryData();\n  }, [prepareChartData, prepareCategoryData]);\n  const currentMonthData = () => {\n    const now = new Date();\n    const currentMonth = now.getMonth();\n    const currentYear = now.getFullYear();\n    const monthlyExpenses = expenses.filter(expense => {\n      const expenseDate = new Date(expense.date);\n      return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear;\n    });\n    const monthlyIncome = incomes ? incomes.filter(income => {\n      const incomeDate = new Date(income.date);\n      return incomeDate.getMonth() === currentMonth && incomeDate.getFullYear() === currentYear;\n    }) : [];\n    const totalExpenses = monthlyExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n    const totalIncome = monthlyIncome.reduce((sum, income) => sum + parseFloat(income.amount), 0);\n    return {\n      totalExpenses,\n      totalIncome,\n      balance: totalIncome - totalExpenses\n    };\n  };\n\n  // Calculate monthly data\n  const monthlyData = currentMonthData();\n  const totalExpenses = monthlyData.totalExpenses;\n  const totalIncome = monthlyData.totalIncome;\n  const balance = monthlyData.balance;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Expense Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/add\",\n        className: \"action-btn expense-btn\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/add-income\",\n        className: \"action-btn income-btn\",\n        children: \"Add Income\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), alerts.filter(alert => !alert.read).length > 0 && /*#__PURE__*/_jsxDEV(BudgetAlerts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-boxes\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-box income-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-title\",\n          children: \"Monthly Income\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-value\",\n          children: [\"$\", totalIncome.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-box expense-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-title\",\n          children: \"Monthly Expenses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-value\",\n          children: [\"$\", totalExpenses.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `summary-box balance-box ${balance >= 0 ? 'positive' : 'negative'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-title\",\n          children: \"Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-value\",\n          children: [\"$\", Math.abs(balance).toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-label\",\n          children: balance >= 0 ? 'Surplus' : 'Deficit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeframe-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'week' ? 'active' : '',\n        onClick: () => setTimeframe('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'month' ? 'active' : '',\n        onClick: () => setTimeframe('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'year' ? 'active' : '',\n        onClick: () => setTimeframe('year'),\n        children: \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Spending Over Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), chartData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: chartData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => [`$${value}`, 'Amount']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"amount\",\n            stroke: \"#8884d8\",\n            activeDot: {\n              r: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for the selected timeframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Spending by Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), categoryData.length > 0 ? /*#__PURE__*/_jsxDEV(ImprovedCategoryChart, {\n          data: categoryData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No data available for the selected timeframe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Budget vs. Actual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), categoryData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: categoryData.map(item => ({\n              name: item.name,\n              actual: item.value,\n              budget: budgets[item.name] || 0\n            })),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Amount']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"actual\",\n              fill: \"#FF8042\",\n              name: \"Actual\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"budget\",\n              fill: \"#8884d8\",\n              name: \"Budget\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No data available for the selected timeframe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"3TjhvLyWzn6kAI7eaQ0A+/uW8gM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useContext","useState","useEffect","useCallback","Link","ExpenseContext","LineChart","Line","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","BudgetAlerts","ImprovedCategoryChart","ImprovedBarChart","jsxDEV","_jsxDEV","Dashboard","_s","expenses","budgets","alerts","incomes","chartData","setChartData","categoryData","setCategoryData","timeframe","setTimeframe","COLORS","prepareChartData","length","now","Date","filteredExpenses","lastWeek","getTime","filter","expense","date","expenseDate","getMonth","getFullYear","groupedData","forEach","parseFloat","amount","chartDataArray","Object","keys","sort","map","prepareCategoryData","categoryTotals","totalAmount","category","categoryDataArray","value","percentage","name","currentMonthData","currentMonth","currentYear","monthlyExpenses","monthlyIncome","income","incomeDate","totalExpenses","reduce","sum","totalIncome","balance","monthlyData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","alert","read","toFixed","Math","abs","onClick","width","height","data","strokeDasharray","dataKey","formatter","type","stroke","activeDot","r","item","actual","budget","fill","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker - Copy/expence-tracker/src/components/Dashboard.js"],"sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ExpenseContext } from '../context/ExpenseContext';\r\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\r\nimport BudgetAlerts from './BudgetAlerts';\r\nimport ImprovedCategoryChart from './ImprovedCategoryChart';\r\nimport ImprovedBarChart from './ImprovedBarChart';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard = () => {\r\n  const { expenses, budgets, alerts, incomes } = useContext(ExpenseContext);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [categoryData, setCategoryData] = useState([]);\r\n  const [timeframe, setTimeframe] = useState('month');\r\n  \r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28AD3', '#FF6B6B', '#4ECDC4'];\r\n  \r\n  // Use useCallback to memoize these functions so they don't get recreated on every render\r\n  const prepareChartData = useCallback(() => {\r\n    if (expenses.length === 0) return;\r\n    \r\n    const now = new Date();\r\n    let filteredExpenses = [];\r\n    \r\n    if (timeframe === 'week') {\r\n      // Last 7 days\r\n      const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n      filteredExpenses = expenses.filter(expense => new Date(expense.date) >= lastWeek);\r\n    } else if (timeframe === 'month') {\r\n      // Current month\r\n      filteredExpenses = expenses.filter(expense => {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getMonth() === now.getMonth() && \r\n               expenseDate.getFullYear() === now.getFullYear();\r\n      });\r\n    } else if (timeframe === 'year') {\r\n      // Current year\r\n      filteredExpenses = expenses.filter(expense => {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getFullYear() === now.getFullYear();\r\n      });\r\n    }\r\n    \r\n    // Group by date\r\n    const groupedData = {};\r\n    \r\n    filteredExpenses.forEach(expense => {\r\n      const date = expense.date;\r\n      if (!groupedData[date]) {\r\n        groupedData[date] = 0;\r\n      }\r\n      groupedData[date] += parseFloat(expense.amount);\r\n    });\r\n    \r\n    // Convert to array for recharts\r\n    const chartDataArray = Object.keys(groupedData)\r\n      .sort()\r\n      .map(date => ({\r\n        date,\r\n        amount: groupedData[date]\r\n      }));\r\n      \r\n    setChartData(chartDataArray);\r\n  }, [expenses, timeframe]);\r\n  \r\n  const prepareCategoryData = useCallback(() => {\r\n    if (expenses.length === 0) return;\r\n    \r\n    const now = new Date();\r\n    let filteredExpenses = [];\r\n    \r\n    if (timeframe === 'week') {\r\n      const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n      filteredExpenses = expenses.filter(expense => new Date(expense.date) >= lastWeek);\r\n    } else if (timeframe === 'month') {\r\n      filteredExpenses = expenses.filter(expense => {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getMonth() === now.getMonth() && \r\n               expenseDate.getFullYear() === now.getFullYear();\r\n      });\r\n    } else if (timeframe === 'year') {\r\n      filteredExpenses = expenses.filter(expense => {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getFullYear() === now.getFullYear();\r\n      });\r\n    }\r\n    \r\n    // Group by category\r\n    const categoryTotals = {};\r\n    let totalAmount = 0;\r\n    \r\n    filteredExpenses.forEach(expense => {\r\n      const { category, amount } = expense;\r\n      if (!categoryTotals[category]) {\r\n        categoryTotals[category] = 0;\r\n      }\r\n      categoryTotals[category] += parseFloat(amount);\r\n      totalAmount += parseFloat(amount);\r\n    });\r\n    \r\n    // Convert to array for recharts and calculate percentages\r\n    const categoryDataArray = Object.keys(categoryTotals).map(category => {\r\n      const value = categoryTotals[category];\r\n      const percentage = totalAmount > 0 ? (value / totalAmount) * 100 : 0;\r\n      \r\n      return {\r\n        name: category,\r\n        value: value,\r\n        percentage: percentage\r\n      };\r\n    });\r\n    \r\n    setCategoryData(categoryDataArray);\r\n  }, [expenses, timeframe]);\r\n  \r\n  // Effect to update charts when timeframe or expenses change\r\n  useEffect(() => {\r\n    prepareChartData();\r\n    prepareCategoryData();\r\n  }, [prepareChartData, prepareCategoryData]);\r\n  \r\n  const currentMonthData = () => {\r\n    const now = new Date();\r\n    const currentMonth = now.getMonth();\r\n    const currentYear = now.getFullYear();\r\n    \r\n    const monthlyExpenses = expenses.filter(expense => {\r\n      const expenseDate = new Date(expense.date);\r\n      return expenseDate.getMonth() === currentMonth && \r\n             expenseDate.getFullYear() === currentYear;\r\n    });\r\n    \r\n    const monthlyIncome = incomes ? incomes.filter(income => {\r\n      const incomeDate = new Date(income.date);\r\n      return incomeDate.getMonth() === currentMonth && \r\n             incomeDate.getFullYear() === currentYear;\r\n    }) : [];\r\n    \r\n    const totalExpenses = monthlyExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\r\n    const totalIncome = monthlyIncome.reduce((sum, income) => sum + parseFloat(income.amount), 0);\r\n    \r\n    return {\r\n      totalExpenses,\r\n      totalIncome,\r\n      balance: totalIncome - totalExpenses\r\n    };\r\n  };\r\n  \r\n  // Calculate monthly data\r\n  const monthlyData = currentMonthData();\r\n  const totalExpenses = monthlyData.totalExpenses;\r\n  const totalIncome = monthlyData.totalIncome;\r\n  const balance = monthlyData.balance;\r\n  \r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h1>Expense Dashboard</h1>\r\n      \r\n      <div className=\"action-buttons\">\r\n        <Link to=\"/add\" className=\"action-btn expense-btn\">Add Expense</Link>\r\n        <Link to=\"/add-income\" className=\"action-btn income-btn\">Add Income</Link>\r\n      </div>\r\n      \r\n      {alerts.filter(alert => !alert.read).length > 0 && (\r\n        <BudgetAlerts />\r\n      )}\r\n      \r\n      <div className=\"summary-boxes\">\r\n        <div className=\"summary-box income-box\">\r\n          <div className=\"summary-title\">Monthly Income</div>\r\n          <div className=\"summary-value\">${totalIncome.toFixed(2)}</div>\r\n        </div>\r\n        \r\n        <div className=\"summary-box expense-box\">\r\n          <div className=\"summary-title\">Monthly Expenses</div>\r\n          <div className=\"summary-value\">${totalExpenses.toFixed(2)}</div>\r\n        </div>\r\n        \r\n        <div className={`summary-box balance-box ${balance >= 0 ? 'positive' : 'negative'}`}>\r\n          <div className=\"summary-title\">Balance</div>\r\n          <div className=\"summary-value\">${Math.abs(balance).toFixed(2)}</div>\r\n          <div className=\"summary-label\">{balance >= 0 ? 'Surplus' : 'Deficit'}</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"timeframe-selector\">\r\n        <button \r\n          className={timeframe === 'week' ? 'active' : ''} \r\n          onClick={() => setTimeframe('week')}>\r\n          Week\r\n        </button>\r\n        <button \r\n          className={timeframe === 'month' ? 'active' : ''} \r\n          onClick={() => setTimeframe('month')}>\r\n          Month\r\n        </button>\r\n        <button \r\n          className={timeframe === 'year' ? 'active' : ''} \r\n          onClick={() => setTimeframe('year')}>\r\n          Year\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"chart-container\">\r\n        <h2>Spending Over Time</h2>\r\n        {chartData.length > 0 ? (\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <LineChart data={chartData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip formatter={(value) => [`$${value}`, 'Amount']} />\r\n              <Legend />\r\n              <Line type=\"monotone\" dataKey=\"amount\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        ) : (\r\n          <p>No data available for the selected timeframe</p>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"charts-row\">\r\n        <div className=\"chart-container\">\r\n          <h2>Spending by Category</h2>\r\n          {categoryData.length > 0 ? (\r\n            <ImprovedCategoryChart data={categoryData} />\r\n          ) : (\r\n            <p>No data available for the selected timeframe</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"chart-container\">\r\n          <h2>Budget vs. Actual</h2>\r\n          {categoryData.length > 0 ? (\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <BarChart\r\n                data={categoryData.map(item => ({\r\n                  name: item.name,\r\n                  actual: item.value,\r\n                  budget: budgets[item.name] || 0\r\n                }))}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis />\r\n                <Tooltip formatter={(value) => [`$${value.toFixed(2)}`, 'Amount']} />\r\n                <Legend />\r\n                <Bar dataKey=\"actual\" fill=\"#FF8042\" name=\"Actual\" />\r\n                <Bar dataKey=\"budget\" fill=\"#8884d8\" name=\"Budget\" />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          ) : (\r\n            <p>No data available for the selected timeframe</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}