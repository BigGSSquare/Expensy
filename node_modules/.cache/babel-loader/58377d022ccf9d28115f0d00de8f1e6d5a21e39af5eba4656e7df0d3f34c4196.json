{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence tracker final\\\\expence-tracker\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// src/context/AuthContext.js with enhanced error handling\nimport React, { createContext, useState, useEffect } from 'react';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, updateProfile as updateFirebaseProfile, onAuthStateChanged, EmailAuthProvider,\n// Add this import\nreauthenticateWithCredential,\n// Add this import\nupdatePassword // Add this import\n} from 'firebase/auth';\nimport { auth, db } from '../config/firebase';\nimport { doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Listen for auth state changes\n  useEffect(() => {\n    console.log(\"Setting up auth state change listener\");\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      console.log(\"Auth state changed:\", user ? `User logged in: ${user.email}` : \"No user logged in\");\n      if (user) {\n        try {\n          // Get additional user data from Firestore\n          console.log(`Getting user data from Firestore for uid: ${user.uid}`);\n          const userDoc = await getDoc(doc(db, 'users', user.uid));\n          if (userDoc.exists()) {\n            console.log(\"User document found in Firestore\");\n            // Combine auth user with Firestore data\n            setCurrentUser({\n              uid: user.uid,\n              email: user.email,\n              name: user.displayName || '',\n              ...userDoc.data()\n            });\n          } else {\n            console.log(\"No user document found in Firestore, using auth data only\");\n            // If no additional data exists, just use auth data\n            setCurrentUser({\n              uid: user.uid,\n              email: user.email,\n              name: user.displayName || ''\n            });\n          }\n        } catch (error) {\n          console.error(\"Error getting user document:\", error);\n          setCurrentUser({\n            uid: user.uid,\n            email: user.email,\n            name: user.displayName || ''\n          });\n        }\n      } else {\n        setCurrentUser(null);\n      }\n      setLoading(false);\n    }, error => {\n      console.error(\"Auth state change error:\", error);\n      setLoading(false);\n    });\n    return () => {\n      console.log(\"Unsubscribing from auth state changes\");\n      unsubscribe();\n    };\n  }, []);\n\n  // Register function with improved error handling\n  const register = async (name, email, password) => {\n    console.log(`Starting registration for ${email}`);\n    try {\n      // Create user in Firebase Auth\n      console.log(\"Calling createUserWithEmailAndPassword\");\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n      console.log(\"User created successfully:\", user.uid);\n\n      // Set display name\n      console.log(\"Setting user display name\");\n      await updateFirebaseProfile(user, {\n        displayName: name\n      });\n\n      // Create user document in Firestore\n      console.log(\"Creating user document in Firestore\");\n      await setDoc(doc(db, 'users', user.uid), {\n        name,\n        email,\n        created: new Date().toISOString(),\n        preferences: {\n          emailNotifications: true\n        }\n      });\n      console.log(\"Registration complete for:\", email);\n      return true;\n    } catch (error) {\n      // Enhanced error logging\n      console.error('Registration error:', error);\n      console.error('Error code:', error.code);\n      console.error('Error message:', error.message);\n\n      // Check for specific errors\n      if (error.code === 'auth/email-already-in-use') {\n        console.log(\"Email already in use\");\n      } else if (error.code === 'auth/invalid-email') {\n        console.log(\"Invalid email format\");\n      } else if (error.code === 'auth/operation-not-allowed') {\n        console.log(\"Email/password accounts are not enabled\");\n      } else if (error.code === 'auth/weak-password') {\n        console.log(\"Password is too weak\");\n      }\n      return false;\n    }\n  };\n\n  // Login function with better error handling\n  const login = async (email, password) => {\n    console.log(`Attempting login for ${email}`);\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      console.log(\"Login successful for:\", email);\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      console.error('Error code:', error.code);\n      console.error('Error message:', error.message);\n      return false;\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    console.log(\"Attempting logout\");\n    try {\n      await signOut(auth);\n      console.log(\"Logout successful\");\n      return true;\n    } catch (error) {\n      console.error('Logout error:', error);\n      return false;\n    }\n  };\n\n  // Update profile\n  const updateProfile = async updatedData => {\n    if (!currentUser) {\n      console.log(\"Cannot update profile: No user logged in\");\n      return false;\n    }\n    try {\n      console.log(\"Updating user profile:\", updatedData);\n      // Update Firestore document\n      const userRef = doc(db, 'users', currentUser.uid);\n      await updateDoc(userRef, updatedData);\n\n      // Update display name if included\n      if (updatedData.name && auth.currentUser) {\n        console.log(\"Updating display name\");\n        await updateFirebaseProfile(auth.currentUser, {\n          displayName: updatedData.name\n        });\n      }\n\n      // Update local state\n      setCurrentUser(prev => ({\n        ...prev,\n        ...updatedData\n      }));\n      console.log(\"Profile update complete\");\n      return true;\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return false;\n    }\n  };\n\n  // Change password function\n  // Add the changePassword implementation in AuthContext.js\n  const changePassword = async (oldPassword, newPassword) => {\n    if (!currentUser || !auth.currentUser) {\n      console.log(\"Cannot change password: No user logged in\");\n      return false;\n    }\n    try {\n      // Re-authenticate the user first\n      const credential = EmailAuthProvider.credential(auth.currentUser.email, oldPassword);\n      await reauthenticateWithCredential(auth.currentUser, credential);\n\n      // Then change the password\n      await updatePassword(auth.currentUser, newPassword);\n      console.log(\"Password updated successfully\");\n      return true;\n    } catch (error) {\n      console.error('Password change error:', error);\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      loading,\n      login,\n      register,\n      logout,\n      updateProfile,\n      changePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","updateProfile","updateFirebaseProfile","onAuthStateChanged","EmailAuthProvider","reauthenticateWithCredential","updatePassword","auth","db","doc","setDoc","getDoc","updateDoc","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","console","log","unsubscribe","user","email","uid","userDoc","exists","name","displayName","data","error","register","password","userCredential","created","Date","toISOString","preferences","emailNotifications","code","message","login","logout","updatedData","userRef","prev","changePassword","oldPassword","newPassword","credential","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence tracker final/expence-tracker/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js with enhanced error handling\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  updateProfile as updateFirebaseProfile,\r\n  onAuthStateChanged,\r\n  EmailAuthProvider, // Add this import\r\n  reauthenticateWithCredential, // Add this import\r\n  updatePassword // Add this import\r\n} from 'firebase/auth';\r\nimport { auth, db } from '../config/firebase';\r\nimport { doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Listen for auth state changes\r\n  useEffect(() => {\r\n    console.log(\"Setting up auth state change listener\");\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      console.log(\"Auth state changed:\", user ? `User logged in: ${user.email}` : \"No user logged in\");\r\n      \r\n      if (user) {\r\n        try {\r\n          // Get additional user data from Firestore\r\n          console.log(`Getting user data from Firestore for uid: ${user.uid}`);\r\n          const userDoc = await getDoc(doc(db, 'users', user.uid));\r\n          \r\n          if (userDoc.exists()) {\r\n            console.log(\"User document found in Firestore\");\r\n            // Combine auth user with Firestore data\r\n            setCurrentUser({\r\n              uid: user.uid,\r\n              email: user.email,\r\n              name: user.displayName || '',\r\n              ...userDoc.data()\r\n            });\r\n          } else {\r\n            console.log(\"No user document found in Firestore, using auth data only\");\r\n            // If no additional data exists, just use auth data\r\n            setCurrentUser({\r\n              uid: user.uid,\r\n              email: user.email,\r\n              name: user.displayName || ''\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error getting user document:\", error);\r\n          setCurrentUser({\r\n            uid: user.uid,\r\n            email: user.email,\r\n            name: user.displayName || ''\r\n          });\r\n        }\r\n      } else {\r\n        setCurrentUser(null);\r\n      }\r\n      setLoading(false);\r\n    }, (error) => {\r\n      console.error(\"Auth state change error:\", error);\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => {\r\n      console.log(\"Unsubscribing from auth state changes\");\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // Register function with improved error handling\r\n  const register = async (name, email, password) => {\r\n    console.log(`Starting registration for ${email}`);\r\n    try {\r\n      // Create user in Firebase Auth\r\n      console.log(\"Calling createUserWithEmailAndPassword\");\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n      console.log(\"User created successfully:\", user.uid);\r\n      \r\n      // Set display name\r\n      console.log(\"Setting user display name\");\r\n      await updateFirebaseProfile(user, { displayName: name });\r\n      \r\n      // Create user document in Firestore\r\n      console.log(\"Creating user document in Firestore\");\r\n      await setDoc(doc(db, 'users', user.uid), {\r\n        name,\r\n        email,\r\n        created: new Date().toISOString(),\r\n        preferences: {\r\n          emailNotifications: true\r\n        }\r\n      });\r\n      \r\n      console.log(\"Registration complete for:\", email);\r\n      return true;\r\n    } catch (error) {\r\n      // Enhanced error logging\r\n      console.error('Registration error:', error);\r\n      console.error('Error code:', error.code);\r\n      console.error('Error message:', error.message);\r\n      \r\n      // Check for specific errors\r\n      if (error.code === 'auth/email-already-in-use') {\r\n        console.log(\"Email already in use\");\r\n      } else if (error.code === 'auth/invalid-email') {\r\n        console.log(\"Invalid email format\");\r\n      } else if (error.code === 'auth/operation-not-allowed') {\r\n        console.log(\"Email/password accounts are not enabled\");\r\n      } else if (error.code === 'auth/weak-password') {\r\n        console.log(\"Password is too weak\");\r\n      }\r\n      \r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Login function with better error handling\r\n  const login = async (email, password) => {\r\n    console.log(`Attempting login for ${email}`);\r\n    try {\r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n      console.log(\"Login successful for:\", email);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      console.error('Error code:', error.code);\r\n      console.error('Error message:', error.message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = async () => {\r\n    console.log(\"Attempting logout\");\r\n    try {\r\n      await signOut(auth);\r\n      console.log(\"Logout successful\");\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Update profile\r\n  const updateProfile = async (updatedData) => {\r\n    if (!currentUser) {\r\n      console.log(\"Cannot update profile: No user logged in\");\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      console.log(\"Updating user profile:\", updatedData);\r\n      // Update Firestore document\r\n      const userRef = doc(db, 'users', currentUser.uid);\r\n      await updateDoc(userRef, updatedData);\r\n      \r\n      // Update display name if included\r\n      if (updatedData.name && auth.currentUser) {\r\n        console.log(\"Updating display name\");\r\n        await updateFirebaseProfile(auth.currentUser, {\r\n          displayName: updatedData.name\r\n        });\r\n      }\r\n      \r\n      // Update local state\r\n      setCurrentUser(prev => ({\r\n        ...prev,\r\n        ...updatedData\r\n      }));\r\n      \r\n      console.log(\"Profile update complete\");\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Profile update error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Change password function\r\n  // Add the changePassword implementation in AuthContext.js\r\n  const changePassword = async (oldPassword, newPassword) => {\r\n    if (!currentUser || !auth.currentUser) {\r\n      console.log(\"Cannot change password: No user logged in\");\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      // Re-authenticate the user first\r\n      const credential = EmailAuthProvider.credential(\r\n        auth.currentUser.email,\r\n        oldPassword\r\n      );\r\n      \r\n      await reauthenticateWithCredential(auth.currentUser, credential);\r\n      \r\n      // Then change the password\r\n      await updatePassword(auth.currentUser, newPassword);\r\n      \r\n      console.log(\"Password updated successfully\");\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Password change error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        currentUser,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n        updateProfile,\r\n        changePassword\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}