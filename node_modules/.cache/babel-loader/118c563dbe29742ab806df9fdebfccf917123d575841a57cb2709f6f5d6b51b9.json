{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence tracker final\\\\expence-tracker\\\\src\\\\context\\\\SplitExpenseContext.js\",\n  _s = $RefreshSig$();\n// src/context/SplitExpenseContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { ExpenseContext } from './ExpenseContext';\nimport { createSplitExpense, createParticipant, updateParticipantStatus, calculateSplitStatus } from '../models/SplitExpenseModel';\nimport { sendSplitExpenseEmail } from '../services/EmailService';\n// Add Firebase imports\nimport { db } from '../config/firebase';\nimport { collection, addDoc, doc, deleteDoc, updateDoc, query, where, getDocs, onSnapshot, getDoc, setDoc } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SplitExpenseContext = /*#__PURE__*/createContext();\nexport const SplitExpenseProvider = ({\n  children\n}) => {\n  _s();\n  const [splitExpenses, setSplitExpenses] = useState([]);\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [emailStatus, setEmailStatus] = useState({});\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    addExpense\n  } = useContext(ExpenseContext);\n\n  // Load data from Firestore when component mounts or user changes\n  // Load data from Firestore when component mounts or user changes\n  useEffect(() => {\n    if (!currentUser) {\n      setSplitExpenses([]);\n      setContacts([]);\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    console.log('Loading split expenses for user:', currentUser.uid);\n\n    // Query Firestore for split expenses\n    const splitExpensesQuery = query(collection(db, 'splitExpenses'), where('userId', '==', currentUser.uid));\n\n    // Set up real-time listener for split expenses\n    const unsubscribe = onSnapshot(splitExpensesQuery, snapshot => {\n      try {\n        // Process incoming data changes\n        const splitExpensesList = snapshot.docs.map(doc => {\n          const data = doc.data();\n          // Ensure ID is always stored as a string\n          return {\n            id: String(doc.id),\n            ...data,\n            // Ensure participants have string IDs too\n            participants: Array.isArray(data.participants) ? data.participants.map(p => ({\n              ...p,\n              id: String(p.id)\n            })) : data.participants\n          };\n        });\n        console.log('Loaded split expenses:', splitExpensesList.length);\n        setSplitExpenses(splitExpensesList);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error processing split expenses data:\", error);\n        setSplitExpenses([]);\n        setLoading(false);\n      }\n    }, error => {\n      console.error(\"Error getting split expenses:\", error.code, error.message);\n      setLoading(false);\n    });\n\n    // Load contacts after split expenses are loaded\n    const loadContactsData = async () => {\n      try {\n        await loadContacts();\n      } catch (error) {\n        console.error(\"Error loading contacts:\", error);\n      }\n    };\n    loadContactsData();\n    return () => unsubscribe();\n  }, [currentUser]);\n\n  // Function to load contacts from Firestore - with improved error handling\n  const loadContacts = async () => {\n    if (!currentUser) {\n      setContacts([]);\n      setLoading(false);\n      return;\n    }\n    try {\n      console.log('Loading contacts for user:', currentUser.uid);\n      const contactsQuery = query(collection(db, 'contacts'), where('userId', '==', currentUser.uid));\n      const contactsSnapshot = await getDocs(contactsQuery);\n      const contactsList = contactsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log('Loaded contacts:', contactsList.length);\n      setContacts(contactsList);\n    } catch (error) {\n      console.error('Error loading contacts:', error.code, error.message);\n      setContacts([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\r\n   * Create a new split expense with improved error handling\r\n   * @param {Object} expenseData - Expense data (amount, category, etc.)\r\n   * @param {Array} participants - Array of participants\r\n   * @returns {Object} New split expense or null if failed\r\n   */\n  const createNewSplitExpense = async (expenseData, participants) => {\n    if (!currentUser) {\n      console.error('Cannot create split expense: No authenticated user');\n      return null;\n    }\n    try {\n      console.log('Creating new split expense with:', {\n        expenseDetails: expenseData,\n        participantCount: participants.length\n      });\n\n      // Find the creator's participant object to determine their share\n      const creatorParticipant = participants.find(p => p.email && currentUser.email && p.email.toLowerCase() === currentUser.email.toLowerCase() || p.name && currentUser.name && p.name === currentUser.name);\n\n      // If creator isn't found in participants, use the first participant as a fallback\n      const userShare = (creatorParticipant === null || creatorParticipant === void 0 ? void 0 : creatorParticipant.shareAmount) || (participants.length > 0 ? participants[0].shareAmount : 0);\n\n      // First create the base expense with proper split expense attribution\n      const baseExpense = {\n        ...expenseData,\n        // Make sure amount is parsed as a number\n        amount: parseFloat(expenseData.amount),\n        // Mark this as a split expense\n        isSplit: true,\n        // Add the current user's share for proper budget calculations\n        userShare: userShare,\n        // Add the number of participants\n        participantCount: participants.length,\n        // Add userId if not already set\n        userId: currentUser.uid,\n        // Add a descriptive note\n        notes: expenseData.notes || `Split with ${participants.length} people`,\n        // Add creation date\n        createdAt: new Date().toISOString()\n      };\n      console.log('Creating base expense for split:', baseExpense);\n\n      // Try to add the expense\n      const expenseId = await addExpense(baseExpense);\n      if (!expenseId) {\n        throw new Error('Failed to create base expense');\n      }\n      console.log('Base expense created with ID:', expenseId);\n\n      // Create the split expense object\n      const newSplitExpense = createSplitExpense({\n        ...expenseData,\n        // The addExpense function returns the ID, but we need the full object\n        id: expenseId,\n        userId: currentUser.uid\n      }, participants);\n      console.log('Split expense object created:', newSplitExpense);\n\n      // Add to Firestore\n      const splitExpenseData = {\n        ...newSplitExpense,\n        userId: currentUser.uid,\n        createdAt: new Date().toISOString()\n      };\n      const docRef = await addDoc(collection(db, 'splitExpenses'), splitExpenseData);\n      console.log('Split expense added to Firestore with ID:', docRef.id);\n\n      // Add the Firestore document ID\n      const splitExpenseWithId = {\n        ...splitExpenseData,\n        id: docRef.id\n      };\n\n      // Add any new contacts to Firestore\n      const existingContactEmails = contacts.map(c => {\n        var _c$email;\n        return (_c$email = c.email) === null || _c$email === void 0 ? void 0 : _c$email.toLowerCase();\n      }).filter(Boolean);\n      console.log('Checking for new contacts to add...');\n      for (const participant of participants) {\n        // Only add contacts with email addresses\n        if (participant.email && !existingContactEmails.includes(participant.email.toLowerCase())) {\n          console.log('Adding new contact:', participant.name);\n          try {\n            // Create a new contact entry\n            const contactData = {\n              name: participant.name,\n              email: participant.email,\n              userId: currentUser.uid,\n              createdAt: new Date().toISOString()\n            };\n            const contactRef = await addDoc(collection(db, 'contacts'), contactData);\n            console.log('New contact added with ID:', contactRef.id);\n\n            // Update local contacts state\n            setContacts(prev => [...prev, {\n              id: contactRef.id,\n              ...contactData\n            }]);\n          } catch (contactError) {\n            console.error('Error adding contact:', contactError);\n            // Continue with split expense creation even if contact can't be added\n          }\n        }\n      }\n\n      // Send email notifications to participants (except the creator)\n      const otherParticipants = participants.filter(p => p.email && currentUser.email && p.email.toLowerCase() !== currentUser.email.toLowerCase());\n      if (otherParticipants.length > 0) {\n        console.log(`Sending split expense notifications to ${otherParticipants.length} participants`);\n\n        // Create a queue to send emails sequentially to avoid rate limits\n        const sendEmailQueue = async () => {\n          for (let i = 0; i < otherParticipants.length; i++) {\n            const participant = otherParticipants[i];\n            try {\n              // Track email status\n              setEmailStatus(prev => ({\n                ...prev,\n                [participant.id]: {\n                  sending: true\n                }\n              }));\n\n              // Send the email with minimal parameters\n              const result = await sendSplitExpenseEmail(participant, splitExpenseWithId, currentUser);\n              console.log(`Email result for ${participant.name}:`, result);\n\n              // Update email status\n              setEmailStatus(prev => ({\n                ...prev,\n                [participant.id]: {\n                  sending: false,\n                  sent: result.success,\n                  error: result.success ? null : result.message\n                }\n              }));\n\n              // Wait a bit between emails to avoid rate limiting\n              if (i < otherParticipants.length - 1) {\n                await new Promise(resolve => setTimeout(resolve, 1000));\n              }\n            } catch (error) {\n              console.error(`Failed to send split email to ${participant.name}:`, error);\n\n              // Update email status with error\n              setEmailStatus(prev => ({\n                ...prev,\n                [participant.id]: {\n                  sending: false,\n                  sent: false,\n                  error: error.message || 'Unknown error'\n                }\n              }));\n\n              // Continue with the next participant even if this one fails\n              await new Promise(resolve => setTimeout(resolve, 500));\n            }\n          }\n\n          // Clear email status after all emails have been processed (plus a buffer)\n          setTimeout(() => {\n            setEmailStatus({});\n          }, 10000);\n        };\n\n        // Start the email queue\n        sendEmailQueue();\n      }\n      return splitExpenseWithId;\n    } catch (error) {\n      console.error('Error creating split expense:', error);\n      return null;\n    }\n  };\n\n  /**\r\n   * Get a split expense by ID\r\n   * @param {string|number} id - Split expense ID\r\n   * @returns {Object} Split expense or null if not found\r\n   */\n  const getSplitExpense = id => {\n    if (!id) return null;\n    // Always convert IDs to strings for comparison\n    const stringId = String(id);\n    const expense = splitExpenses.find(expense => String(expense.id) === stringId);\n    return expense || null;\n  };\n\n  /**\r\n   * Update a participant's payment status\r\n   * @param {string|number} splitExpenseId - Split expense ID\r\n   * @param {string} participantId - Participant ID\r\n   * @param {string} status - New status (paid, unpaid, declined)\r\n   * @param {string} paymentMethod - Method of payment\r\n   * @returns {boolean} Success status\r\n   */\n  const updatePaymentStatus = async (splitExpenseId, participantId, status, paymentMethod) => {\n    if (!currentUser || !splitExpenseId || !participantId) {\n      console.error('Missing required parameters for updatePaymentStatus');\n      return false;\n    }\n    try {\n      // Convert IDs to strings for consistent comparison\n      const stringExpenseId = String(splitExpenseId);\n      const stringParticipantId = String(participantId);\n      console.log(`Updating payment status for participant ${stringParticipantId} to ${status}`);\n\n      // Find the split expense using string comparison\n      const splitExpense = splitExpenses.find(expense => String(expense.id) === stringExpenseId);\n      if (!splitExpense) {\n        console.error(`Split expense with ID ${stringExpenseId} not found`);\n        return false;\n      }\n\n      // Make sure participants array exists\n      if (!Array.isArray(splitExpense.participants)) {\n        console.error('Participants array is missing or invalid');\n        return false;\n      }\n\n      // Check if participant exists (using string comparison)\n      const participantIndex = splitExpense.participants.findIndex(p => String(p.id) === stringParticipantId);\n      if (participantIndex === -1) {\n        console.error(`Participant with ID ${stringParticipantId} not found`);\n        return false;\n      }\n\n      // Create a deep copy of participants to avoid mutation issues\n      const updatedParticipants = JSON.parse(JSON.stringify(splitExpense.participants));\n\n      // Update the participant\n      updatedParticipants[participantIndex] = {\n        ...updatedParticipants[participantIndex],\n        status: status,\n        paymentMethod: paymentMethod || updatedParticipants[participantIndex].paymentMethod,\n        paidDate: status === 'paid' ? new Date().toISOString() : updatedParticipants[participantIndex].paidDate\n      };\n\n      // Recalculate the overall status\n      const updatedStatus = calculateSplitStatus({\n        ...splitExpense,\n        participants: updatedParticipants\n      });\n      console.log(`New split expense status: ${updatedStatus}`);\n\n      // Update in Firestore with explicit error handling\n      const splitExpenseRef = doc(db, 'splitExpenses', String(splitExpenseId));\n      await updateDoc(splitExpenseRef, {\n        participants: updatedParticipants,\n        status: updatedStatus,\n        updatedAt: new Date().toISOString()\n      });\n      console.log('Payment status updated successfully in Firestore');\n      return true;\n    } catch (error) {\n      console.error('Error updating payment status:', error);\n      console.error('Error details:', error.code, error.message);\n      return false;\n    }\n  };\n\n  /**\r\n   * Add a new contact with improved validation and error handling\r\n   * @param {string} name - Contact name\r\n   * @param {string} email - Contact email\r\n   * @returns {boolean} Success status\r\n   */\n  const addContact = async (name, email) => {\n    if (!currentUser) {\n      console.error('Cannot add contact: No authenticated user');\n      return false;\n    }\n    if (!name || name.trim() === '') {\n      console.error('Contact name is required');\n      return false;\n    }\n    try {\n      console.log(`Adding new contact: ${name} (${email || 'No email'})`);\n\n      // Check if contact with this email already exists (case insensitive)\n      if (email && email.trim() !== '') {\n        const normalizedEmail = email.trim().toLowerCase();\n\n        // First check against local state to avoid unnecessary Firestore query\n        const existingContact = contacts.find(c => c.email && c.email.toLowerCase() === normalizedEmail);\n        if (existingContact) {\n          console.log(`Contact with email ${email} already exists`);\n          return false;\n        }\n\n        // Double-check with Firestore to be sure\n        const existingContactsQuery = query(collection(db, 'contacts'), where('userId', '==', currentUser.uid), where('email', '==', email.trim()));\n        const existingContacts = await getDocs(existingContactsQuery);\n        if (!existingContacts.empty) {\n          console.log(`Contact with email ${email} exists in Firestore but not in local state`);\n          return false;\n        }\n      }\n\n      // Create new contact object\n      const newContactData = {\n        name: name.trim(),\n        email: email ? email.trim() : '',\n        userId: currentUser.uid,\n        createdAt: new Date().toISOString()\n      };\n\n      // Add to Firestore\n      const docRef = await addDoc(collection(db, 'contacts'), newContactData);\n      console.log('Contact added with ID:', docRef.id);\n      const newContact = {\n        ...newContactData,\n        id: docRef.id\n      };\n\n      // Update local state\n      setContacts(prevContacts => [...prevContacts, newContact]);\n      return true;\n    } catch (error) {\n      console.error('Error adding contact:', error);\n      return false;\n    }\n  };\n\n  /**\r\n   * Delete a contact\r\n   * @param {string} contactId - Contact ID\r\n   * @returns {boolean} Success status\r\n   */\n  const deleteContact = async contactId => {\n    if (!currentUser || !contactId) {\n      console.error('Cannot delete contact: Missing user or contact ID');\n      return false;\n    }\n    try {\n      console.log(`Deleting contact with ID: ${contactId}`);\n\n      // Delete from Firestore\n      await deleteDoc(doc(db, 'contacts', contactId));\n\n      // Update local state\n      setContacts(prevContacts => prevContacts.filter(contact => contact.id !== contactId));\n      return true;\n    } catch (error) {\n      console.error('Error deleting contact:', error);\n      return false;\n    }\n  };\n\n  /**\r\n   * Get all split expenses\r\n   * @returns {Array} Array of split expenses\r\n   */\n  const getAllSplitExpenses = () => {\n    return splitExpenses;\n  };\n\n  /**\r\n   * Get all contacts\r\n   * @returns {Array} Array of contacts\r\n   */\n  const getAllContacts = () => {\n    return contacts;\n  };\n\n  /**\r\n   * Delete a split expense\r\n   * @param {string|number} splitExpenseId - Split expense ID\r\n   * @returns {boolean} Success status\r\n   */\n  const deleteSplitExpense = async splitExpenseId => {\n    if (!currentUser || !splitExpenseId) {\n      console.error('Cannot delete split expense: Missing user or split expense ID');\n      return false;\n    }\n    try {\n      console.log(`Deleting split expense with ID: ${splitExpenseId}`);\n\n      // Delete from Firestore\n      await deleteDoc(doc(db, 'splitExpenses', splitExpenseId.toString()));\n      return true;\n    } catch (error) {\n      console.error('Error deleting split expense:', error);\n      return false;\n    }\n  };\n\n  /**\r\n   * Remind a participant to pay\r\n   * @param {string|number} splitExpenseId - Split expense ID\r\n   * @param {string} participantId - Participant ID\r\n   * @returns {boolean} Success status\r\n   */\n  const sendPaymentReminder = async (splitExpenseId, participantId) => {\n    if (!currentUser || !splitExpenseId || !participantId) {\n      console.error('Missing required parameters for sendPaymentReminder');\n      return false;\n    }\n    try {\n      console.log(`Sending payment reminder for participant ${participantId}`);\n      const splitExpense = getSplitExpense(splitExpenseId);\n      if (!splitExpense) {\n        console.error(`Split expense with ID ${splitExpenseId} not found`);\n        return false;\n      }\n      const participant = splitExpense.participants.find(p => p.id === participantId);\n      if (!participant) {\n        console.error(`Participant with ID ${participantId} not found in split expense`);\n        return false;\n      }\n      if (!participant.email) {\n        console.error(`Participant ${participantId} has no email address`);\n        return false;\n      }\n\n      // Set status to sending\n      setEmailStatus(prev => ({\n        ...prev,\n        [participantId]: {\n          sending: true\n        }\n      }));\n\n      // Create complete email parameters\n      const emailParams = {\n        to_email: participant.email,\n        to_name: participant.name || 'Participant',\n        creator_name: currentUser.name || 'Group member',\n        expense_description: splitExpense.description || 'Split expense',\n        expense_category: splitExpense.category || 'Uncategorized',\n        expense_date: new Date(splitExpense.date || new Date()).toLocaleDateString(),\n        expense_amount: splitExpense.totalAmount.toFixed(2),\n        share_amount: participant.shareAmount.toFixed(2),\n        is_reminder: true,\n        reminder_message: `This is a friendly reminder that your payment of $${participant.shareAmount.toFixed(2)} for \"${splitExpense.description}\" is still pending.`,\n        // Essential parameters for EmailJS template\n        name: currentUser.name || 'FinTrack',\n        email: currentUser.email || '',\n        reply_to: currentUser.email || '',\n        subject: `Payment Reminder: ${splitExpense.description || 'Split expense'}`\n      };\n      try {\n        // Send reminder email with explicit error handling\n        const result = await sendSplitExpenseEmail(participant, splitExpense, currentUser, true, emailParams);\n        console.log(`Reminder email result for ${participant.name}:`, result);\n\n        // Update email status\n        setEmailStatus(prev => ({\n          ...prev,\n          [participantId]: {\n            sending: false,\n            sent: result.success,\n            error: result.success ? null : result.message\n          }\n        }));\n\n        // Log reminder in Firestore\n        if (result.success) {\n          const reminderLog = {\n            splitExpenseId,\n            participantId,\n            timestamp: new Date().toISOString(),\n            userId: currentUser.uid,\n            success: true\n          };\n          await addDoc(collection(db, 'reminderLogs'), reminderLog);\n        }\n      } catch (error) {\n        console.error(`Failed to send reminder email to ${participant.name}:`, error);\n\n        // Update email status with error\n        setEmailStatus(prev => ({\n          ...prev,\n          [participantId]: {\n            sending: false,\n            sent: false,\n            error: error.message || 'Failed to send email'\n          }\n        }));\n      }\n\n      // Clear status after some time\n      setTimeout(() => {\n        setEmailStatus(prev => {\n          const newStatus = {\n            ...prev\n          };\n          delete newStatus[participantId];\n          return newStatus;\n        });\n      }, 10000);\n      return true;\n    } catch (error) {\n      console.error('Error sending payment reminder:', error);\n\n      // Make sure the sending status is cleared if there's an error\n      setEmailStatus(prev => ({\n        ...prev,\n        [participantId]: {\n          sending: false,\n          sent: false,\n          error: error.message || 'Unknown error occurred'\n        }\n      }));\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SplitExpenseContext.Provider, {\n    value: {\n      loading,\n      createNewSplitExpense,\n      getSplitExpense,\n      updatePaymentStatus,\n      addContact,\n      deleteContact,\n      getAllSplitExpenses,\n      getAllContacts,\n      deleteSplitExpense,\n      sendPaymentReminder,\n      createParticipant,\n      emailStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 708,\n    columnNumber: 5\n  }, this);\n};\n_s(SplitExpenseProvider, \"pgg9QacgraqPaGkP56UAW662QoU=\");\n_c = SplitExpenseProvider;\nexport default SplitExpenseProvider;\nvar _c;\n$RefreshReg$(_c, \"SplitExpenseProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AuthContext","ExpenseContext","createSplitExpense","createParticipant","updateParticipantStatus","calculateSplitStatus","sendSplitExpenseEmail","db","collection","addDoc","doc","deleteDoc","updateDoc","query","where","getDocs","onSnapshot","getDoc","setDoc","jsxDEV","_jsxDEV","SplitExpenseContext","SplitExpenseProvider","children","_s","splitExpenses","setSplitExpenses","contacts","setContacts","loading","setLoading","emailStatus","setEmailStatus","currentUser","addExpense","console","log","uid","splitExpensesQuery","unsubscribe","snapshot","splitExpensesList","docs","map","data","id","String","participants","Array","isArray","p","length","error","code","message","loadContactsData","loadContacts","contactsQuery","contactsSnapshot","contactsList","createNewSplitExpense","expenseData","expenseDetails","participantCount","creatorParticipant","find","email","toLowerCase","name","userShare","shareAmount","baseExpense","amount","parseFloat","isSplit","userId","notes","createdAt","Date","toISOString","expenseId","Error","newSplitExpense","splitExpenseData","docRef","splitExpenseWithId","existingContactEmails","c","_c$email","filter","Boolean","participant","includes","contactData","contactRef","prev","contactError","otherParticipants","sendEmailQueue","i","sending","result","sent","success","Promise","resolve","setTimeout","getSplitExpense","stringId","expense","updatePaymentStatus","splitExpenseId","participantId","status","paymentMethod","stringExpenseId","stringParticipantId","splitExpense","participantIndex","findIndex","updatedParticipants","JSON","parse","stringify","paidDate","updatedStatus","splitExpenseRef","updatedAt","addContact","trim","normalizedEmail","existingContact","existingContactsQuery","existingContacts","empty","newContactData","newContact","prevContacts","deleteContact","contactId","contact","getAllSplitExpenses","getAllContacts","deleteSplitExpense","toString","sendPaymentReminder","emailParams","to_email","to_name","creator_name","expense_description","description","expense_category","category","expense_date","date","toLocaleDateString","expense_amount","totalAmount","toFixed","share_amount","is_reminder","reminder_message","reply_to","subject","reminderLog","timestamp","newStatus","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence tracker final/expence-tracker/src/context/SplitExpenseContext.js"],"sourcesContent":["// src/context/SplitExpenseContext.js\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from './AuthContext';\r\nimport { ExpenseContext } from './ExpenseContext';\r\nimport { \r\n  createSplitExpense, \r\n  createParticipant, \r\n  updateParticipantStatus, \r\n  calculateSplitStatus \r\n} from '../models/SplitExpenseModel';\r\nimport { sendSplitExpenseEmail } from '../services/EmailService';\r\n// Add Firebase imports\r\nimport { db } from '../config/firebase';\r\nimport { \r\n  collection, \r\n  addDoc, \r\n  doc, \r\n  deleteDoc, \r\n  updateDoc, \r\n  query, \r\n  where, \r\n  getDocs, \r\n  onSnapshot, \r\n  getDoc,\r\n  setDoc\r\n} from 'firebase/firestore';\r\n\r\nexport const SplitExpenseContext = createContext();\r\n\r\nexport const SplitExpenseProvider = ({ children }) => {\r\n  const [splitExpenses, setSplitExpenses] = useState([]);\r\n  const [contacts, setContacts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [emailStatus, setEmailStatus] = useState({});\r\n  \r\n  const { currentUser } = useContext(AuthContext);\r\n  const { addExpense } = useContext(ExpenseContext);\r\n  \r\n  // Load data from Firestore when component mounts or user changes\r\n  // Load data from Firestore when component mounts or user changes\r\n  useEffect(() => {\r\n    if (!currentUser) {\r\n      setSplitExpenses([]);\r\n      setContacts([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    console.log('Loading split expenses for user:', currentUser.uid);\r\n    \r\n    // Query Firestore for split expenses\r\n    const splitExpensesQuery = query(\r\n      collection(db, 'splitExpenses'),\r\n      where('userId', '==', currentUser.uid)\r\n    );\r\n    \r\n    // Set up real-time listener for split expenses\r\n    const unsubscribe = onSnapshot(\r\n      splitExpensesQuery, \r\n      (snapshot) => {\r\n        try {\r\n          // Process incoming data changes\r\n          const splitExpensesList = snapshot.docs.map(doc => {\r\n            const data = doc.data();\r\n            // Ensure ID is always stored as a string\r\n            return {\r\n              id: String(doc.id),\r\n              ...data,\r\n              // Ensure participants have string IDs too\r\n              participants: Array.isArray(data.participants) \r\n                ? data.participants.map(p => ({...p, id: String(p.id)})) \r\n                : data.participants\r\n            };\r\n          });\r\n          \r\n          console.log('Loaded split expenses:', splitExpensesList.length);\r\n          setSplitExpenses(splitExpensesList);\r\n          setLoading(false);\r\n        } catch (error) {\r\n          console.error(\"Error processing split expenses data:\", error);\r\n          setSplitExpenses([]);\r\n          setLoading(false);\r\n        }\r\n      }, \r\n      (error) => {\r\n        console.error(\"Error getting split expenses:\", error.code, error.message);\r\n        setLoading(false);\r\n      }\r\n    );\r\n    \r\n    // Load contacts after split expenses are loaded\r\n    const loadContactsData = async () => {\r\n      try {\r\n        await loadContacts();\r\n      } catch (error) {\r\n        console.error(\"Error loading contacts:\", error);\r\n      }\r\n    };\r\n    \r\n    loadContactsData();\r\n    \r\n    return () => unsubscribe();\r\n  }, [currentUser]);\r\n  \r\n  // Function to load contacts from Firestore - with improved error handling\r\n  const loadContacts = async () => {\r\n    if (!currentUser) {\r\n      setContacts([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Loading contacts for user:', currentUser.uid);\r\n      \r\n      const contactsQuery = query(\r\n        collection(db, 'contacts'),\r\n        where('userId', '==', currentUser.uid)\r\n      );\r\n      \r\n      const contactsSnapshot = await getDocs(contactsQuery);\r\n      const contactsList = contactsSnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n      \r\n      console.log('Loaded contacts:', contactsList.length);\r\n      setContacts(contactsList);\r\n    } catch (error) {\r\n      console.error('Error loading contacts:', error.code, error.message);\r\n      setContacts([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Create a new split expense with improved error handling\r\n   * @param {Object} expenseData - Expense data (amount, category, etc.)\r\n   * @param {Array} participants - Array of participants\r\n   * @returns {Object} New split expense or null if failed\r\n   */\r\n  const createNewSplitExpense = async (expenseData, participants) => {\r\n    if (!currentUser) {\r\n      console.error('Cannot create split expense: No authenticated user');\r\n      return null;\r\n    }\r\n    \r\n    try {\r\n      console.log('Creating new split expense with:', { \r\n        expenseDetails: expenseData,\r\n        participantCount: participants.length\r\n      });\r\n      \r\n      // Find the creator's participant object to determine their share\r\n      const creatorParticipant = participants.find(p => \r\n        (p.email && currentUser.email && p.email.toLowerCase() === currentUser.email.toLowerCase()) || \r\n        (p.name && currentUser.name && p.name === currentUser.name)\r\n      );\r\n      \r\n      // If creator isn't found in participants, use the first participant as a fallback\r\n      const userShare = creatorParticipant?.shareAmount || \r\n                       (participants.length > 0 ? participants[0].shareAmount : 0);\r\n      \r\n      // First create the base expense with proper split expense attribution\r\n      const baseExpense = {\r\n        ...expenseData,\r\n        // Make sure amount is parsed as a number\r\n        amount: parseFloat(expenseData.amount),\r\n        // Mark this as a split expense\r\n        isSplit: true,\r\n        // Add the current user's share for proper budget calculations\r\n        userShare: userShare,\r\n        // Add the number of participants\r\n        participantCount: participants.length,\r\n        // Add userId if not already set\r\n        userId: currentUser.uid,\r\n        // Add a descriptive note\r\n        notes: expenseData.notes || `Split with ${participants.length} people`,\r\n        // Add creation date\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      \r\n      console.log('Creating base expense for split:', baseExpense);\r\n      \r\n      // Try to add the expense\r\n      const expenseId = await addExpense(baseExpense);\r\n      \r\n      if (!expenseId) {\r\n        throw new Error('Failed to create base expense');\r\n      }\r\n      \r\n      console.log('Base expense created with ID:', expenseId);\r\n      \r\n      // Create the split expense object\r\n      const newSplitExpense = createSplitExpense(\r\n        {\r\n          ...expenseData,\r\n          // The addExpense function returns the ID, but we need the full object\r\n          id: expenseId,\r\n          userId: currentUser.uid\r\n        },\r\n        participants\r\n      );\r\n      \r\n      console.log('Split expense object created:', newSplitExpense);\r\n      \r\n      // Add to Firestore\r\n      const splitExpenseData = {\r\n        ...newSplitExpense,\r\n        userId: currentUser.uid,\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      \r\n      const docRef = await addDoc(collection(db, 'splitExpenses'), splitExpenseData);\r\n      console.log('Split expense added to Firestore with ID:', docRef.id);\r\n      \r\n      // Add the Firestore document ID\r\n      const splitExpenseWithId = {\r\n        ...splitExpenseData,\r\n        id: docRef.id\r\n      };\r\n      \r\n      // Add any new contacts to Firestore\r\n      const existingContactEmails = contacts\r\n        .map(c => c.email?.toLowerCase())\r\n        .filter(Boolean);\r\n      \r\n      console.log('Checking for new contacts to add...');\r\n      \r\n      for (const participant of participants) {\r\n        // Only add contacts with email addresses\r\n        if (participant.email && \r\n            !existingContactEmails.includes(participant.email.toLowerCase())) {\r\n          \r\n          console.log('Adding new contact:', participant.name);\r\n          \r\n          try {\r\n            // Create a new contact entry\r\n            const contactData = {\r\n              name: participant.name,\r\n              email: participant.email,\r\n              userId: currentUser.uid,\r\n              createdAt: new Date().toISOString()\r\n            };\r\n            \r\n            const contactRef = await addDoc(collection(db, 'contacts'), contactData);\r\n            console.log('New contact added with ID:', contactRef.id);\r\n            \r\n            // Update local contacts state\r\n            setContacts(prev => [...prev, {\r\n              id: contactRef.id,\r\n              ...contactData\r\n            }]);\r\n          } catch (contactError) {\r\n            console.error('Error adding contact:', contactError);\r\n            // Continue with split expense creation even if contact can't be added\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Send email notifications to participants (except the creator)\r\n      const otherParticipants = participants.filter(p => \r\n        p.email && currentUser.email && p.email.toLowerCase() !== currentUser.email.toLowerCase()\r\n      );\r\n      \r\n      if (otherParticipants.length > 0) {\r\n        console.log(`Sending split expense notifications to ${otherParticipants.length} participants`);\r\n        \r\n        // Create a queue to send emails sequentially to avoid rate limits\r\n        const sendEmailQueue = async () => {\r\n          for (let i = 0; i < otherParticipants.length; i++) {\r\n            const participant = otherParticipants[i];\r\n            \r\n            try {\r\n              // Track email status\r\n              setEmailStatus(prev => ({\r\n                ...prev,\r\n                [participant.id]: { sending: true }\r\n              }));\r\n              \r\n              // Send the email with minimal parameters\r\n              const result = await sendSplitExpenseEmail(\r\n                participant, \r\n                splitExpenseWithId, \r\n                currentUser\r\n              );\r\n              \r\n              console.log(`Email result for ${participant.name}:`, result);\r\n              \r\n              // Update email status\r\n              setEmailStatus(prev => ({\r\n                ...prev,\r\n                [participant.id]: { \r\n                  sending: false,\r\n                  sent: result.success, \r\n                  error: result.success ? null : result.message \r\n                }\r\n              }));\r\n              \r\n              // Wait a bit between emails to avoid rate limiting\r\n              if (i < otherParticipants.length - 1) {\r\n                await new Promise(resolve => setTimeout(resolve, 1000));\r\n              }\r\n            } catch (error) {\r\n              console.error(`Failed to send split email to ${participant.name}:`, error);\r\n              \r\n              // Update email status with error\r\n              setEmailStatus(prev => ({\r\n                ...prev,\r\n                [participant.id]: { \r\n                  sending: false,\r\n                  sent: false, \r\n                  error: error.message || 'Unknown error' \r\n                }\r\n              }));\r\n              \r\n              // Continue with the next participant even if this one fails\r\n              await new Promise(resolve => setTimeout(resolve, 500));\r\n            }\r\n          }\r\n          \r\n          // Clear email status after all emails have been processed (plus a buffer)\r\n          setTimeout(() => {\r\n            setEmailStatus({});\r\n          }, 10000);\r\n        };\r\n        \r\n        // Start the email queue\r\n        sendEmailQueue();\r\n      }\r\n      \r\n      return splitExpenseWithId;\r\n    } catch (error) {\r\n      console.error('Error creating split expense:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get a split expense by ID\r\n   * @param {string|number} id - Split expense ID\r\n   * @returns {Object} Split expense or null if not found\r\n   */\r\n  const getSplitExpense = (id) => {\r\n    if (!id) return null;\r\n    // Always convert IDs to strings for comparison\r\n    const stringId = String(id);\r\n    const expense = splitExpenses.find(expense => String(expense.id) === stringId);\r\n    return expense || null;\r\n  };\r\n  \r\n  /**\r\n   * Update a participant's payment status\r\n   * @param {string|number} splitExpenseId - Split expense ID\r\n   * @param {string} participantId - Participant ID\r\n   * @param {string} status - New status (paid, unpaid, declined)\r\n   * @param {string} paymentMethod - Method of payment\r\n   * @returns {boolean} Success status\r\n   */\r\n  const updatePaymentStatus = async (splitExpenseId, participantId, status, paymentMethod) => {\r\n    if (!currentUser || !splitExpenseId || !participantId) {\r\n      console.error('Missing required parameters for updatePaymentStatus');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      // Convert IDs to strings for consistent comparison\r\n      const stringExpenseId = String(splitExpenseId);\r\n      const stringParticipantId = String(participantId);\r\n      \r\n      console.log(`Updating payment status for participant ${stringParticipantId} to ${status}`);\r\n      \r\n      // Find the split expense using string comparison\r\n      const splitExpense = splitExpenses.find(expense => String(expense.id) === stringExpenseId);\r\n      \r\n      if (!splitExpense) {\r\n        console.error(`Split expense with ID ${stringExpenseId} not found`);\r\n        return false;\r\n      }\r\n      \r\n      // Make sure participants array exists\r\n      if (!Array.isArray(splitExpense.participants)) {\r\n        console.error('Participants array is missing or invalid');\r\n        return false;\r\n      }\r\n      \r\n      // Check if participant exists (using string comparison)\r\n      const participantIndex = splitExpense.participants.findIndex(p => String(p.id) === stringParticipantId);\r\n      if (participantIndex === -1) {\r\n        console.error(`Participant with ID ${stringParticipantId} not found`);\r\n        return false;\r\n      }\r\n      \r\n      // Create a deep copy of participants to avoid mutation issues\r\n      const updatedParticipants = JSON.parse(JSON.stringify(splitExpense.participants));\r\n      \r\n      // Update the participant\r\n      updatedParticipants[participantIndex] = {\r\n        ...updatedParticipants[participantIndex],\r\n        status: status,\r\n        paymentMethod: paymentMethod || updatedParticipants[participantIndex].paymentMethod,\r\n        paidDate: status === 'paid' ? new Date().toISOString() : updatedParticipants[participantIndex].paidDate\r\n      };\r\n      \r\n      // Recalculate the overall status\r\n      const updatedStatus = calculateSplitStatus({\r\n        ...splitExpense,\r\n        participants: updatedParticipants\r\n      });\r\n      \r\n      console.log(`New split expense status: ${updatedStatus}`);\r\n      \r\n      // Update in Firestore with explicit error handling\r\n      const splitExpenseRef = doc(db, 'splitExpenses', String(splitExpenseId));\r\n      \r\n      await updateDoc(splitExpenseRef, {\r\n        participants: updatedParticipants,\r\n        status: updatedStatus,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      \r\n      console.log('Payment status updated successfully in Firestore');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating payment status:', error);\r\n      console.error('Error details:', error.code, error.message);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Add a new contact with improved validation and error handling\r\n   * @param {string} name - Contact name\r\n   * @param {string} email - Contact email\r\n   * @returns {boolean} Success status\r\n   */\r\n  const addContact = async (name, email) => {\r\n    if (!currentUser) {\r\n      console.error('Cannot add contact: No authenticated user');\r\n      return false;\r\n    }\r\n    \r\n    if (!name || name.trim() === '') {\r\n      console.error('Contact name is required');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      console.log(`Adding new contact: ${name} (${email || 'No email'})`);\r\n      \r\n      // Check if contact with this email already exists (case insensitive)\r\n      if (email && email.trim() !== '') {\r\n        const normalizedEmail = email.trim().toLowerCase();\r\n        \r\n        // First check against local state to avoid unnecessary Firestore query\r\n        const existingContact = contacts.find(c => \r\n          c.email && c.email.toLowerCase() === normalizedEmail\r\n        );\r\n        \r\n        if (existingContact) {\r\n          console.log(`Contact with email ${email} already exists`);\r\n          return false;\r\n        }\r\n        \r\n        // Double-check with Firestore to be sure\r\n        const existingContactsQuery = query(\r\n          collection(db, 'contacts'),\r\n          where('userId', '==', currentUser.uid),\r\n          where('email', '==', email.trim())\r\n        );\r\n        \r\n        const existingContacts = await getDocs(existingContactsQuery);\r\n        if (!existingContacts.empty) {\r\n          console.log(`Contact with email ${email} exists in Firestore but not in local state`);\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      // Create new contact object\r\n      const newContactData = {\r\n        name: name.trim(),\r\n        email: email ? email.trim() : '',\r\n        userId: currentUser.uid,\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      \r\n      // Add to Firestore\r\n      const docRef = await addDoc(collection(db, 'contacts'), newContactData);\r\n      console.log('Contact added with ID:', docRef.id);\r\n      \r\n      const newContact = {\r\n        ...newContactData,\r\n        id: docRef.id\r\n      };\r\n      \r\n      // Update local state\r\n      setContacts(prevContacts => [...prevContacts, newContact]);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error adding contact:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Delete a contact\r\n   * @param {string} contactId - Contact ID\r\n   * @returns {boolean} Success status\r\n   */\r\n  const deleteContact = async (contactId) => {\r\n    if (!currentUser || !contactId) {\r\n      console.error('Cannot delete contact: Missing user or contact ID');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      console.log(`Deleting contact with ID: ${contactId}`);\r\n      \r\n      // Delete from Firestore\r\n      await deleteDoc(doc(db, 'contacts', contactId));\r\n      \r\n      // Update local state\r\n      setContacts(prevContacts => prevContacts.filter(contact => contact.id !== contactId));\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting contact:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get all split expenses\r\n   * @returns {Array} Array of split expenses\r\n   */\r\n  const getAllSplitExpenses = () => {\r\n    return splitExpenses;\r\n  };\r\n  \r\n  /**\r\n   * Get all contacts\r\n   * @returns {Array} Array of contacts\r\n   */\r\n  const getAllContacts = () => {\r\n    return contacts;\r\n  };\r\n  \r\n  /**\r\n   * Delete a split expense\r\n   * @param {string|number} splitExpenseId - Split expense ID\r\n   * @returns {boolean} Success status\r\n   */\r\n  const deleteSplitExpense = async (splitExpenseId) => {\r\n    if (!currentUser || !splitExpenseId) {\r\n      console.error('Cannot delete split expense: Missing user or split expense ID');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      console.log(`Deleting split expense with ID: ${splitExpenseId}`);\r\n      \r\n      // Delete from Firestore\r\n      await deleteDoc(doc(db, 'splitExpenses', splitExpenseId.toString()));\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting split expense:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Remind a participant to pay\r\n   * @param {string|number} splitExpenseId - Split expense ID\r\n   * @param {string} participantId - Participant ID\r\n   * @returns {boolean} Success status\r\n   */\r\n  const sendPaymentReminder = async (splitExpenseId, participantId) => {\r\n    if (!currentUser || !splitExpenseId || !participantId) {\r\n      console.error('Missing required parameters for sendPaymentReminder');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      console.log(`Sending payment reminder for participant ${participantId}`);\r\n      \r\n      const splitExpense = getSplitExpense(splitExpenseId);\r\n      if (!splitExpense) {\r\n        console.error(`Split expense with ID ${splitExpenseId} not found`);\r\n        return false;\r\n      }\r\n      \r\n      const participant = splitExpense.participants.find(p => p.id === participantId);\r\n      if (!participant) {\r\n        console.error(`Participant with ID ${participantId} not found in split expense`);\r\n        return false;\r\n      }\r\n      \r\n      if (!participant.email) {\r\n        console.error(`Participant ${participantId} has no email address`);\r\n        return false;\r\n      }\r\n      \r\n      // Set status to sending\r\n      setEmailStatus(prev => ({\r\n        ...prev,\r\n        [participantId]: { sending: true }\r\n      }));\r\n      \r\n      // Create complete email parameters\r\n      const emailParams = {\r\n        to_email: participant.email,\r\n        to_name: participant.name || 'Participant',\r\n        creator_name: currentUser.name || 'Group member',\r\n        expense_description: splitExpense.description || 'Split expense',\r\n        expense_category: splitExpense.category || 'Uncategorized',\r\n        expense_date: new Date(splitExpense.date || new Date()).toLocaleDateString(),\r\n        expense_amount: splitExpense.totalAmount.toFixed(2),\r\n        share_amount: participant.shareAmount.toFixed(2),\r\n        is_reminder: true,\r\n        reminder_message: `This is a friendly reminder that your payment of $${participant.shareAmount.toFixed(2)} for \"${splitExpense.description}\" is still pending.`,\r\n        // Essential parameters for EmailJS template\r\n        name: currentUser.name || 'FinTrack',\r\n        email: currentUser.email || '',\r\n        reply_to: currentUser.email || '',\r\n        subject: `Payment Reminder: ${splitExpense.description || 'Split expense'}`\r\n      };\r\n      \r\n      try {\r\n        // Send reminder email with explicit error handling\r\n        const result = await sendSplitExpenseEmail(\r\n          participant, \r\n          splitExpense, \r\n          currentUser, \r\n          true, \r\n          emailParams\r\n        );\r\n        \r\n        console.log(`Reminder email result for ${participant.name}:`, result);\r\n        \r\n        // Update email status\r\n        setEmailStatus(prev => ({\r\n          ...prev,\r\n          [participantId]: { \r\n            sending: false,\r\n            sent: result.success, \r\n            error: result.success ? null : result.message \r\n          }\r\n        }));\r\n        \r\n        // Log reminder in Firestore\r\n        if (result.success) {\r\n          const reminderLog = {\r\n            splitExpenseId,\r\n            participantId,\r\n            timestamp: new Date().toISOString(),\r\n            userId: currentUser.uid,\r\n            success: true\r\n          };\r\n          \r\n          await addDoc(collection(db, 'reminderLogs'), reminderLog);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Failed to send reminder email to ${participant.name}:`, error);\r\n        \r\n        // Update email status with error\r\n        setEmailStatus(prev => ({\r\n          ...prev,\r\n          [participantId]: { \r\n            sending: false,\r\n            sent: false, \r\n            error: error.message || 'Failed to send email' \r\n          }\r\n        }));\r\n      }\r\n      \r\n      // Clear status after some time\r\n      setTimeout(() => {\r\n        setEmailStatus(prev => {\r\n          const newStatus = { ...prev };\r\n          delete newStatus[participantId];\r\n          return newStatus;\r\n        });\r\n      }, 10000);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error sending payment reminder:', error);\r\n      \r\n      // Make sure the sending status is cleared if there's an error\r\n      setEmailStatus(prev => ({\r\n        ...prev,\r\n        [participantId]: { \r\n          sending: false,\r\n          sent: false, \r\n          error: error.message || 'Unknown error occurred' \r\n        }\r\n      }));\r\n      \r\n      return false;\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <SplitExpenseContext.Provider\r\n      value={{\r\n        loading,\r\n        createNewSplitExpense,\r\n        getSplitExpense,\r\n        updatePaymentStatus,\r\n        addContact,\r\n        deleteContact,\r\n        getAllSplitExpenses,\r\n        getAllContacts,\r\n        deleteSplitExpense,\r\n        sendPaymentReminder,\r\n        createParticipant,\r\n        emailStatus\r\n      }}\r\n    >\r\n      {children}\r\n    </SplitExpenseContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SplitExpenseProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}