{"ast":null,"code":"// src/services/EmailService.js\nimport emailjs from 'emailjs-com';\n\n// Your EmailJS credentials\nconst EMAILJS_PUBLIC_KEY = 'g0Zv3mEDUVljCuJyL'; // This should be your public key\nconst EMAILJS_SERVICE_ID = 'service_uk2jyu5';\nconst EMAILJS_TEMPLATE_ID = 'template_kjrzsq6';\nconst EMAILJS_SPLIT_TEMPLATE_ID = 'template_mtp8afi'; // Your split expense template ID\n\n// Initialize EmailJS (only needed once in your application)\n// Note: As of EmailJS v3, we should use init with the public key\ntry {\n  emailjs.init(EMAILJS_PUBLIC_KEY);\n  console.log('ðŸ“§ EmailJS initialized successfully');\n} catch (error) {\n  console.error('ðŸ“§ Failed to initialize EmailJS:', error);\n}\n\n/**\r\n * Sends a budget alert email when a user exceeds their budget\r\n * @param {object} user - The user object containing email and name\r\n * @param {string} category - The budget category that was exceeded\r\n * @param {number} budget - The budget amount\r\n * @param {number} spent - The amount spent\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\nexport const sendBudgetAlertEmail = async (user, category, budget, spent) => {\n  console.log('ðŸ“§ Attempting to send budget alert email...');\n  console.log('ðŸ“§ Service ID:', EMAILJS_SERVICE_ID);\n  console.log('ðŸ“§ Template ID:', EMAILJS_TEMPLATE_ID);\n\n  // Verify that we have a user with an email address\n  if (!user || !user.email) {\n    console.error('ðŸ“§ Cannot send email: User email is missing', user);\n    return {\n      success: false,\n      message: 'User email is missing'\n    };\n  }\n  console.log(`ðŸ“§ Sending budget alert email to: ${user.email}`);\n  const to = user.email;\n  const userName = user.name || to.split('@')[0];\n  const over_amount = (spent - budget).toFixed(2);\n\n  // Create template parameters that EmailJS will use\n  // These must match the variables in your EmailJS template\n  const templateParams = {\n    to_email: to,\n    to_name: userName,\n    category: category,\n    budget: budget.toFixed(2),\n    spent: spent.toFixed(2),\n    over_amount: over_amount,\n    // Adding additional parameters for completeness\n    reply_to: to,\n    from_name: 'FinTrack Budget Alert'\n  };\n  console.log('ðŸ“§ Email template parameters:', templateParams);\n  try {\n    // Send email using EmailJS\n    console.log('ðŸ“§ Sending email via EmailJS...');\n    const response = await emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, templateParams);\n    console.log('ðŸ“§ Email sent successfully!', response);\n    console.log('ðŸ“§ Response status:', response.status);\n    console.log('ðŸ“§ Response text:', response.text);\n    return {\n      success: true,\n      message: 'Email sent successfully',\n      response: response\n    };\n  } catch (error) {\n    console.error('ðŸ“§ Error sending email:', error);\n\n    // Provide detailed error information\n    let errorMessage = 'Failed to send email';\n    if (error.text) {\n      errorMessage += `: ${error.text}`;\n    }\n    if (error.status) {\n      errorMessage += ` (Status: ${error.status})`;\n    }\n\n    // Additional debugging for common issues\n    if (error.message && error.message.includes('Network Error')) {\n      console.error('ðŸ“§ Network issue detected. Check your internet connection.');\n      errorMessage = 'Network error: Check your internet connection';\n    }\n    if (error.message && error.message.includes('Invalid ID format')) {\n      console.error('ðŸ“§ EmailJS ID format issue detected.');\n      errorMessage = 'EmailJS configuration error: Invalid ID format';\n    }\n\n    // Check for rate limiting issues\n    if (error.status === 429 || error.text && error.text.includes('rate limit')) {\n      console.error('ðŸ“§ Rate limiting detected. Too many emails sent in a short period.');\n      errorMessage = 'Rate limit exceeded: Please try again later';\n    }\n    return {\n      success: false,\n      message: errorMessage,\n      error: error\n    };\n  }\n};\n\n/**\r\n * Sends a split expense notification email to a participant\r\n * @param {object} participant - The participant object containing email and name\r\n * @param {object} splitExpense - The split expense details\r\n * @param {object} creator - The user who created the split expense\r\n * @param {boolean} isReminder - Whether this is a reminder email\r\n * @param {object} customParams - Custom parameters to override defaults\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\nexport const sendSplitExpenseEmail = async (participant, splitExpense, creator, isReminder = false, customParams = null) => {\n  console.log(`ðŸ“§ Attempting to send ${isReminder ? 'reminder' : 'notification'} for split expense...`);\n  console.log('ðŸ“§ Service ID:', EMAILJS_SERVICE_ID);\n  console.log('ðŸ“§ Template ID:', EMAILJS_SPLIT_TEMPLATE_ID);\n\n  // Verify that we have a participant with an email address\n  if (!participant || !participant.email) {\n    console.error('ðŸ“§ Cannot send email: Participant email is missing', participant);\n    return {\n      success: false,\n      message: 'Participant email is missing'\n    };\n  }\n  console.log(`ðŸ“§ Sending split expense ${isReminder ? 'reminder' : 'notification'} to: ${participant.email}`);\n  const to = participant.email;\n  const participantName = participant.name || to.split('@')[0];\n  const creatorName = (creator === null || creator === void 0 ? void 0 : creator.name) || 'Someone';\n\n  // Create template parameters that match EXACTLY what your EmailJS template expects\n  // Check your EmailJS template and make sure these variable names match\n  let templateParams = {\n    to_email: to,\n    to_name: participantName,\n    expense_description: splitExpense.description || 'Split expense',\n    expense_amount: (splitExpense.totalAmount || 0).toFixed(2),\n    share_amount: (participant.shareAmount || 0).toFixed(2),\n    creator_name: creatorName,\n    expense_date: new Date(splitExpense.date || new Date()).toLocaleDateString(),\n    expense_category: splitExpense.category || 'Uncategorized',\n    is_reminder: isReminder ? \"true\" : \"false\",\n    // Convert to string for EmailJS\n    reminder_message: isReminder ? `This is a friendly reminder that your payment of $${(participant.shareAmount || 0).toFixed(2)} is still pending.` : '',\n    // Essential EmailJS parameters\n    reply_to: (creator === null || creator === void 0 ? void 0 : creator.email) || '',\n    from_name: (creator === null || creator === void 0 ? void 0 : creator.name) || 'Expensy'\n  };\n\n  // Override with custom params if provided\n  if (customParams) {\n    templateParams = {\n      ...templateParams,\n      ...customParams\n    };\n  }\n\n  // Log exact parameters being sent\n  console.log('ðŸ“§ Email template parameters:', JSON.stringify(templateParams, null, 2));\n  try {\n    // Send email using EmailJS with retry logic\n    console.log('ðŸ“§ Sending email via EmailJS...');\n\n    // Try up to 2 times with a short delay between attempts\n    let response;\n    let attempts = 0;\n    const maxAttempts = 2;\n    while (attempts < maxAttempts) {\n      try {\n        attempts++;\n        response = await emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_SPLIT_TEMPLATE_ID, templateParams);\n        break; // If successful, exit the retry loop\n      } catch (retryError) {\n        console.warn(`ðŸ“§ Email attempt ${attempts} failed:`, retryError);\n\n        // If we've hit max attempts, throw the error to be caught by outer catch\n        if (attempts >= maxAttempts) {\n          throw retryError;\n        }\n\n        // Wait before trying again (1 second)\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n    console.log('ðŸ“§ Email sent successfully!', response);\n    console.log('ðŸ“§ Response status:', response.status);\n    console.log('ðŸ“§ Response text:', response.text);\n    return {\n      success: true,\n      message: 'Email sent successfully',\n      response: response\n    };\n  } catch (error) {\n    console.error('ðŸ“§ Error sending split expense email:', error);\n\n    // Provide detailed error information\n    let errorMessage = 'Failed to send email';\n    if (error.text) {\n      errorMessage += `: ${error.text}`;\n    }\n    if (error.status) {\n      errorMessage += ` (Status: ${error.status})`;\n    }\n\n    // Additional debugging for common issues\n    if (error.message && error.message.includes('Network Error')) {\n      console.error('ðŸ“§ Network issue detected. Check your internet connection.');\n      errorMessage = 'Network error: Check your internet connection';\n    }\n    if (error.message && error.message.includes('Invalid ID format')) {\n      console.error('ðŸ“§ EmailJS ID format issue detected.');\n      errorMessage = 'EmailJS configuration error: Invalid ID format';\n    }\n\n    // Check for rate limiting issues\n    if (error.status === 429 || error.text && error.text.includes('rate limit')) {\n      console.error('ðŸ“§ Rate limiting detected. Too many emails sent in a short period.');\n      errorMessage = 'Rate limit exceeded: Please try again later';\n    }\n    return {\n      success: false,\n      message: errorMessage,\n      details: JSON.stringify(error, Object.getOwnPropertyNames(error)),\n      error: error\n    };\n  }\n};\n\n/**\r\n * Send a test email to verify the configuration\r\n * @param {object} user - The user object containing email and name\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\nexport const sendTestEmail = async user => {\n  if (!user || !user.email) {\n    console.error('ðŸ“§ Cannot send test email: User email is missing', user);\n    return {\n      success: false,\n      message: 'User email is missing'\n    };\n  }\n  return sendBudgetAlertEmail(user, 'Test Category', 100.00,\n  // Budget\n  150.00 // Spent\n  );\n};\n\n/**\r\n * Send a test split expense email to verify the configuration\r\n * @param {object} user - The user object containing email and name\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\nexport const sendTestSplitEmail = async user => {\n  if (!user || !user.email) {\n    console.error('ðŸ“§ Cannot send test split email: User email is missing', user);\n    return {\n      success: false,\n      message: 'User email is missing'\n    };\n  }\n\n  // Create a test participant (the user themselves)\n  const participant = {\n    name: user.name || user.email.split('@')[0],\n    email: user.email,\n    shareAmount: 25.00\n  };\n\n  // Create a test split expense\n  const testSplitExpense = {\n    description: 'Test Split Expense',\n    totalAmount: 100.00,\n    date: new Date().toISOString(),\n    category: 'Dining'\n  };\n\n  // Only include parameters that the EmailJS template expects\n  const customParams = {\n    from_name: 'FinTrack',\n    reply_to: user.email\n  };\n  return sendSplitExpenseEmail(participant, testSplitExpense, user, false,\n  // Not a reminder\n  customParams);\n};","map":{"version":3,"names":["emailjs","EMAILJS_PUBLIC_KEY","EMAILJS_SERVICE_ID","EMAILJS_TEMPLATE_ID","EMAILJS_SPLIT_TEMPLATE_ID","init","console","log","error","sendBudgetAlertEmail","user","category","budget","spent","email","success","message","to","userName","name","split","over_amount","toFixed","templateParams","to_email","to_name","reply_to","from_name","response","send","status","text","errorMessage","includes","sendSplitExpenseEmail","participant","splitExpense","creator","isReminder","customParams","participantName","creatorName","expense_description","description","expense_amount","totalAmount","share_amount","shareAmount","creator_name","expense_date","Date","date","toLocaleDateString","expense_category","is_reminder","reminder_message","JSON","stringify","attempts","maxAttempts","retryError","warn","Promise","resolve","setTimeout","details","Object","getOwnPropertyNames","sendTestEmail","sendTestSplitEmail","testSplitExpense","toISOString"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence tracker final/expence-tracker/src/services/EmailService.js"],"sourcesContent":["// src/services/EmailService.js\r\nimport emailjs from 'emailjs-com';\r\n\r\n// Your EmailJS credentials\r\nconst EMAILJS_PUBLIC_KEY = 'g0Zv3mEDUVljCuJyL';  // This should be your public key\r\nconst EMAILJS_SERVICE_ID = 'service_uk2jyu5';\r\nconst EMAILJS_TEMPLATE_ID = 'template_kjrzsq6';\r\nconst EMAILJS_SPLIT_TEMPLATE_ID = 'template_mtp8afi'; // Your split expense template ID\r\n\r\n// Initialize EmailJS (only needed once in your application)\r\n// Note: As of EmailJS v3, we should use init with the public key\r\ntry {\r\n  emailjs.init(EMAILJS_PUBLIC_KEY);\r\n  console.log('ðŸ“§ EmailJS initialized successfully');\r\n} catch (error) {\r\n  console.error('ðŸ“§ Failed to initialize EmailJS:', error);\r\n}\r\n\r\n/**\r\n * Sends a budget alert email when a user exceeds their budget\r\n * @param {object} user - The user object containing email and name\r\n * @param {string} category - The budget category that was exceeded\r\n * @param {number} budget - The budget amount\r\n * @param {number} spent - The amount spent\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\r\nexport const sendBudgetAlertEmail = async (user, category, budget, spent) => {\r\n  console.log('ðŸ“§ Attempting to send budget alert email...');\r\n  console.log('ðŸ“§ Service ID:', EMAILJS_SERVICE_ID);\r\n  console.log('ðŸ“§ Template ID:', EMAILJS_TEMPLATE_ID);\r\n  \r\n  // Verify that we have a user with an email address\r\n  if (!user || !user.email) {\r\n    console.error('ðŸ“§ Cannot send email: User email is missing', user);\r\n    return {\r\n      success: false,\r\n      message: 'User email is missing'\r\n    };\r\n  }\r\n\r\n  console.log(`ðŸ“§ Sending budget alert email to: ${user.email}`);\r\n  \r\n  const to = user.email;\r\n  const userName = user.name || to.split('@')[0];\r\n  const over_amount = (spent - budget).toFixed(2);\r\n  \r\n  // Create template parameters that EmailJS will use\r\n  // These must match the variables in your EmailJS template\r\n  const templateParams = {\r\n    to_email: to,\r\n    to_name: userName,\r\n    category: category,\r\n    budget: budget.toFixed(2),\r\n    spent: spent.toFixed(2),\r\n    over_amount: over_amount,\r\n    // Adding additional parameters for completeness\r\n    reply_to: to,\r\n    from_name: 'FinTrack Budget Alert'\r\n  };\r\n  \r\n  console.log('ðŸ“§ Email template parameters:', templateParams);\r\n  \r\n  try {\r\n    // Send email using EmailJS\r\n    console.log('ðŸ“§ Sending email via EmailJS...');\r\n    const response = await emailjs.send(\r\n      EMAILJS_SERVICE_ID,\r\n      EMAILJS_TEMPLATE_ID,\r\n      templateParams\r\n    );\r\n    \r\n    console.log('ðŸ“§ Email sent successfully!', response);\r\n    console.log('ðŸ“§ Response status:', response.status);\r\n    console.log('ðŸ“§ Response text:', response.text);\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n      response: response\r\n    };\r\n  } catch (error) {\r\n    console.error('ðŸ“§ Error sending email:', error);\r\n    \r\n    // Provide detailed error information\r\n    let errorMessage = 'Failed to send email';\r\n    \r\n    if (error.text) {\r\n      errorMessage += `: ${error.text}`;\r\n    }\r\n    \r\n    if (error.status) {\r\n      errorMessage += ` (Status: ${error.status})`;\r\n    }\r\n    \r\n    // Additional debugging for common issues\r\n    if (error.message && error.message.includes('Network Error')) {\r\n      console.error('ðŸ“§ Network issue detected. Check your internet connection.');\r\n      errorMessage = 'Network error: Check your internet connection';\r\n    }\r\n    \r\n    if (error.message && error.message.includes('Invalid ID format')) {\r\n      console.error('ðŸ“§ EmailJS ID format issue detected.');\r\n      errorMessage = 'EmailJS configuration error: Invalid ID format';\r\n    }\r\n    \r\n    // Check for rate limiting issues\r\n    if (error.status === 429 || (error.text && error.text.includes('rate limit'))) {\r\n      console.error('ðŸ“§ Rate limiting detected. Too many emails sent in a short period.');\r\n      errorMessage = 'Rate limit exceeded: Please try again later';\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: errorMessage,\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Sends a split expense notification email to a participant\r\n * @param {object} participant - The participant object containing email and name\r\n * @param {object} splitExpense - The split expense details\r\n * @param {object} creator - The user who created the split expense\r\n * @param {boolean} isReminder - Whether this is a reminder email\r\n * @param {object} customParams - Custom parameters to override defaults\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\r\nexport const sendSplitExpenseEmail = async (participant, splitExpense, creator, isReminder = false, customParams = null) => {\r\n  console.log(`ðŸ“§ Attempting to send ${isReminder ? 'reminder' : 'notification'} for split expense...`);\r\n  console.log('ðŸ“§ Service ID:', EMAILJS_SERVICE_ID);\r\n  console.log('ðŸ“§ Template ID:', EMAILJS_SPLIT_TEMPLATE_ID);\r\n  \r\n  // Verify that we have a participant with an email address\r\n  if (!participant || !participant.email) {\r\n    console.error('ðŸ“§ Cannot send email: Participant email is missing', participant);\r\n    return {\r\n      success: false,\r\n      message: 'Participant email is missing'\r\n    };\r\n  }\r\n\r\n  console.log(`ðŸ“§ Sending split expense ${isReminder ? 'reminder' : 'notification'} to: ${participant.email}`);\r\n  \r\n  const to = participant.email;\r\n  const participantName = participant.name || to.split('@')[0];\r\n  const creatorName = creator?.name || 'Someone';\r\n  \r\n  // Create template parameters that match EXACTLY what your EmailJS template expects\r\n  // Check your EmailJS template and make sure these variable names match\r\n  let templateParams = {\r\n    to_email: to,\r\n    to_name: participantName,\r\n    expense_description: splitExpense.description || 'Split expense',\r\n    expense_amount: (splitExpense.totalAmount || 0).toFixed(2),\r\n    share_amount: (participant.shareAmount || 0).toFixed(2),\r\n    creator_name: creatorName,\r\n    expense_date: new Date(splitExpense.date || new Date()).toLocaleDateString(),\r\n    expense_category: splitExpense.category || 'Uncategorized',\r\n    is_reminder: isReminder ? \"true\" : \"false\", // Convert to string for EmailJS\r\n    reminder_message: isReminder \r\n      ? `This is a friendly reminder that your payment of $${(participant.shareAmount || 0).toFixed(2)} is still pending.` \r\n      : '',\r\n    // Essential EmailJS parameters\r\n    reply_to: creator?.email || '',\r\n    from_name: creator?.name || 'Expensy'\r\n  };\r\n  \r\n  // Override with custom params if provided\r\n  if (customParams) {\r\n    templateParams = {\r\n      ...templateParams,\r\n      ...customParams\r\n    };\r\n  }\r\n  \r\n  // Log exact parameters being sent\r\n  console.log('ðŸ“§ Email template parameters:', JSON.stringify(templateParams, null, 2));\r\n  \r\n  try {\r\n    // Send email using EmailJS with retry logic\r\n    console.log('ðŸ“§ Sending email via EmailJS...');\r\n    \r\n    // Try up to 2 times with a short delay between attempts\r\n    let response;\r\n    let attempts = 0;\r\n    const maxAttempts = 2;\r\n    \r\n    while (attempts < maxAttempts) {\r\n      try {\r\n        attempts++;\r\n        response = await emailjs.send(\r\n          EMAILJS_SERVICE_ID,\r\n          EMAILJS_SPLIT_TEMPLATE_ID,\r\n          templateParams\r\n        );\r\n        break; // If successful, exit the retry loop\r\n      } catch (retryError) {\r\n        console.warn(`ðŸ“§ Email attempt ${attempts} failed:`, retryError);\r\n        \r\n        // If we've hit max attempts, throw the error to be caught by outer catch\r\n        if (attempts >= maxAttempts) {\r\n          throw retryError;\r\n        }\r\n        \r\n        // Wait before trying again (1 second)\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      }\r\n    }\r\n    \r\n    console.log('ðŸ“§ Email sent successfully!', response);\r\n    console.log('ðŸ“§ Response status:', response.status);\r\n    console.log('ðŸ“§ Response text:', response.text);\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n      response: response\r\n    };\r\n  } catch (error) {\r\n    console.error('ðŸ“§ Error sending split expense email:', error);\r\n    \r\n    // Provide detailed error information\r\n    let errorMessage = 'Failed to send email';\r\n    \r\n    if (error.text) {\r\n      errorMessage += `: ${error.text}`;\r\n    }\r\n    \r\n    if (error.status) {\r\n      errorMessage += ` (Status: ${error.status})`;\r\n    }\r\n    \r\n    // Additional debugging for common issues\r\n    if (error.message && error.message.includes('Network Error')) {\r\n      console.error('ðŸ“§ Network issue detected. Check your internet connection.');\r\n      errorMessage = 'Network error: Check your internet connection';\r\n    }\r\n    \r\n    if (error.message && error.message.includes('Invalid ID format')) {\r\n      console.error('ðŸ“§ EmailJS ID format issue detected.');\r\n      errorMessage = 'EmailJS configuration error: Invalid ID format';\r\n    }\r\n    \r\n    // Check for rate limiting issues\r\n    if (error.status === 429 || (error.text && error.text.includes('rate limit'))) {\r\n      console.error('ðŸ“§ Rate limiting detected. Too many emails sent in a short period.');\r\n      errorMessage = 'Rate limit exceeded: Please try again later';\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: errorMessage,\r\n      details: JSON.stringify(error, Object.getOwnPropertyNames(error)),\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Send a test email to verify the configuration\r\n * @param {object} user - The user object containing email and name\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\r\nexport const sendTestEmail = async (user) => {\r\n  if (!user || !user.email) {\r\n    console.error('ðŸ“§ Cannot send test email: User email is missing', user);\r\n    return {\r\n      success: false,\r\n      message: 'User email is missing'\r\n    };\r\n  }\r\n  \r\n  return sendBudgetAlertEmail(\r\n    user,\r\n    'Test Category',\r\n    100.00, // Budget\r\n    150.00  // Spent\r\n  );\r\n};\r\n\r\n/**\r\n * Send a test split expense email to verify the configuration\r\n * @param {object} user - The user object containing email and name\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\r\nexport const sendTestSplitEmail = async (user) => {\r\n  if (!user || !user.email) {\r\n    console.error('ðŸ“§ Cannot send test split email: User email is missing', user);\r\n    return {\r\n      success: false,\r\n      message: 'User email is missing'\r\n    };\r\n  }\r\n  \r\n  // Create a test participant (the user themselves)\r\n  const participant = {\r\n    name: user.name || user.email.split('@')[0],\r\n    email: user.email,\r\n    shareAmount: 25.00\r\n  };\r\n  \r\n  // Create a test split expense\r\n  const testSplitExpense = {\r\n    description: 'Test Split Expense',\r\n    totalAmount: 100.00,\r\n    date: new Date().toISOString(),\r\n    category: 'Dining'\r\n  };\r\n  \r\n  // Only include parameters that the EmailJS template expects\r\n  const customParams = {\r\n    from_name: 'FinTrack',\r\n    reply_to: user.email\r\n  };\r\n  \r\n  return sendSplitExpenseEmail(\r\n    participant,\r\n    testSplitExpense,\r\n    user,\r\n    false, // Not a reminder\r\n    customParams\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}