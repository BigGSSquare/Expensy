{"ast":null,"code":"// src/models/SplitExpenseModel.js\n\n/**\r\n * Data structure for split expenses\r\n * \r\n * A split expense represents a single expense that is shared between multiple participants.\r\n * Each participant can have their own share of the expense, and their own payment status.\r\n */\n\n/**\r\n * Creates a new split expense\r\n * @param {Object} expense - The base expense object\r\n * @param {Array} participants - Array of participants\r\n * @returns {Object} Split expense object\r\n */\nexport const createSplitExpense = (expense, participants) => {\n  // Create a unique ID for the split expense\n  const splitId = Date.now();\n\n  // Calculate shares if not provided\n  const calculatedParticipants = participants.map(participant => {\n    // If share percentage is not specified, calculate it as equal split\n    if (!participant.sharePercentage) {\n      const equalShare = 100 / participants.length;\n      return {\n        ...participant,\n        sharePercentage: equalShare,\n        shareAmount: expense.amount * equalShare / 100\n      };\n    }\n    // If share amount is not specified, calculate it from percentage\n    if (!participant.shareAmount) {\n      return {\n        ...participant,\n        shareAmount: expense.amount * participant.sharePercentage / 100\n      };\n    }\n    return participant;\n  });\n\n  // Create the split expense object\n  return {\n    id: splitId,\n    expenseId: expense.id,\n    createdAt: new Date().toISOString(),\n    status: 'pending',\n    // pending, settled, partial\n    totalAmount: expense.amount,\n    category: expense.category,\n    description: expense.description,\n    date: expense.date,\n    userId: expense.userId,\n    // The user who created the split\n    receiptImageUrl: expense.receiptImageUrl || null,\n    participants: calculatedParticipants,\n    notes: expense.notes || ''\n  };\n};\n\n/**\r\n * Participant object structure\r\n * @typedef {Object} Participant\r\n * @property {string} id - Unique identifier for the participant\r\n * @property {string} name - Name of the participant\r\n * @property {string} email - Optional email for the participant\r\n * @property {number} sharePercentage - Percentage of the expense this participant is responsible for\r\n * @property {number} shareAmount - Actual amount this participant is responsible for\r\n * @property {string} status - Payment status (unpaid, paid, declined)\r\n * @property {string} paymentMethod - How they paid (cash, transfer, etc.)\r\n * @property {Date} paidDate - When they paid their share\r\n */\n\n/**\r\n * Creates a new participant\r\n * @param {string} name - Name of the participant\r\n * @param {string} email - Email of the participant (optional)\r\n * @param {number} sharePercentage - Percentage of the expense (optional)\r\n * @param {number} shareAmount - Actual amount (optional)\r\n * @returns {Participant} Participant object\r\n */\nexport const createParticipant = (name, email = '', sharePercentage = null, shareAmount = null) => {\n  return {\n    id: `p_${Date.now()}_${Math.random().toString(36).slice(2, 9)}`,\n    name,\n    email,\n    sharePercentage,\n    shareAmount,\n    status: 'unpaid',\n    paymentMethod: null,\n    paidDate: null\n  };\n};\n\n/**\r\n * Update a participant's payment status\r\n * @param {Participant} participant - The participant to update\r\n * @param {string} status - New status (paid, unpaid, declined)\r\n * @param {string} paymentMethod - Method of payment\r\n * @returns {Participant} Updated participant\r\n */\nexport const updateParticipantStatus = (participant, status, paymentMethod = null) => {\n  return {\n    ...participant,\n    status,\n    paymentMethod,\n    paidDate: status === 'paid' ? new Date().toISOString() : participant.paidDate\n  };\n};\n\n/**\r\n * Calculate the overall status of a split expense\r\n * @param {Object} splitExpense - The split expense to evaluate\r\n * @returns {string} Status (pending, settled, partial)\r\n */\nexport const calculateSplitStatus = splitExpense => {\n  if (!splitExpense || !Array.isArray(splitExpense.participants)) {\n    return 'pending';\n  }\n  const paidCount = splitExpense.participants.filter(p => p.status === 'paid').length;\n  if (paidCount === 0) {\n    return 'pending';\n  } else if (paidCount === splitExpense.participants.length) {\n    return 'settled';\n  } else {\n    return 'partial';\n  }\n};\n\n/**\r\n * Get a summary of a split expense\r\n * @param {Object} splitExpense - The split expense\r\n * @returns {Object} Summary information\r\n */\nexport const getSplitSummary = splitExpense => {\n  if (!splitExpense || !Array.isArray(splitExpense.participants)) {\n    return {\n      totalAmount: 0,\n      paidAmount: 0,\n      pendingAmount: 0,\n      participantCount: 0,\n      paidCount: 0,\n      status: 'pending'\n    };\n  }\n  const paidAmount = splitExpense.participants.filter(p => p.status === 'paid').reduce((sum, p) => sum + (p.shareAmount || 0), 0);\n  const pendingAmount = splitExpense.participants.filter(p => p.status !== 'paid').reduce((sum, p) => sum + (p.shareAmount || 0), 0);\n  const paidCount = splitExpense.participants.filter(p => p.status === 'paid').length;\n  return {\n    totalAmount: splitExpense.totalAmount,\n    paidAmount,\n    pendingAmount,\n    participantCount: splitExpense.participants.length,\n    paidCount,\n    status: calculateSplitStatus(splitExpense)\n  };\n};","map":{"version":3,"names":["createSplitExpense","expense","participants","splitId","Date","now","calculatedParticipants","map","participant","sharePercentage","equalShare","length","shareAmount","amount","id","expenseId","createdAt","toISOString","status","totalAmount","category","description","date","userId","receiptImageUrl","notes","createParticipant","name","email","Math","random","toString","slice","paymentMethod","paidDate","updateParticipantStatus","calculateSplitStatus","splitExpense","Array","isArray","paidCount","filter","p","getSplitSummary","paidAmount","pendingAmount","participantCount","reduce","sum"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence tracker final/expence-tracker/src/models/SplitExpenseModel.js"],"sourcesContent":["// src/models/SplitExpenseModel.js\r\n\r\n/**\r\n * Data structure for split expenses\r\n * \r\n * A split expense represents a single expense that is shared between multiple participants.\r\n * Each participant can have their own share of the expense, and their own payment status.\r\n */\r\n\r\n/**\r\n * Creates a new split expense\r\n * @param {Object} expense - The base expense object\r\n * @param {Array} participants - Array of participants\r\n * @returns {Object} Split expense object\r\n */\r\nexport const createSplitExpense = (expense, participants) => {\r\n    // Create a unique ID for the split expense\r\n    const splitId = Date.now();\r\n    \r\n    // Calculate shares if not provided\r\n    const calculatedParticipants = participants.map(participant => {\r\n      // If share percentage is not specified, calculate it as equal split\r\n      if (!participant.sharePercentage) {\r\n        const equalShare = 100 / participants.length;\r\n        return {\r\n          ...participant,\r\n          sharePercentage: equalShare,\r\n          shareAmount: (expense.amount * equalShare) / 100\r\n        };\r\n      }\r\n      // If share amount is not specified, calculate it from percentage\r\n      if (!participant.shareAmount) {\r\n        return {\r\n          ...participant,\r\n          shareAmount: (expense.amount * participant.sharePercentage) / 100\r\n        };\r\n      }\r\n      return participant;\r\n    });\r\n    \r\n    // Create the split expense object\r\n    return {\r\n      id: splitId,\r\n      expenseId: expense.id,\r\n      createdAt: new Date().toISOString(),\r\n      status: 'pending', // pending, settled, partial\r\n      totalAmount: expense.amount,\r\n      category: expense.category,\r\n      description: expense.description,\r\n      date: expense.date,\r\n      userId: expense.userId, // The user who created the split\r\n      receiptImageUrl: expense.receiptImageUrl || null,\r\n      participants: calculatedParticipants,\r\n      notes: expense.notes || ''\r\n    };\r\n  };\r\n  \r\n  /**\r\n   * Participant object structure\r\n   * @typedef {Object} Participant\r\n   * @property {string} id - Unique identifier for the participant\r\n   * @property {string} name - Name of the participant\r\n   * @property {string} email - Optional email for the participant\r\n   * @property {number} sharePercentage - Percentage of the expense this participant is responsible for\r\n   * @property {number} shareAmount - Actual amount this participant is responsible for\r\n   * @property {string} status - Payment status (unpaid, paid, declined)\r\n   * @property {string} paymentMethod - How they paid (cash, transfer, etc.)\r\n   * @property {Date} paidDate - When they paid their share\r\n   */\r\n  \r\n  /**\r\n   * Creates a new participant\r\n   * @param {string} name - Name of the participant\r\n   * @param {string} email - Email of the participant (optional)\r\n   * @param {number} sharePercentage - Percentage of the expense (optional)\r\n   * @param {number} shareAmount - Actual amount (optional)\r\n   * @returns {Participant} Participant object\r\n   */\r\n  export const createParticipant = (name, email = '', sharePercentage = null, shareAmount = null) => {\r\n    return {\r\n      id: `p_${Date.now()}_${Math.random().toString(36).slice(2, 9)}`,\r\n      name,\r\n      email,\r\n      sharePercentage,\r\n      shareAmount,\r\n      status: 'unpaid',\r\n      paymentMethod: null,\r\n      paidDate: null\r\n    };\r\n  };\r\n  \r\n  /**\r\n   * Update a participant's payment status\r\n   * @param {Participant} participant - The participant to update\r\n   * @param {string} status - New status (paid, unpaid, declined)\r\n   * @param {string} paymentMethod - Method of payment\r\n   * @returns {Participant} Updated participant\r\n   */\r\n  export const updateParticipantStatus = (participant, status, paymentMethod = null) => {\r\n    return {\r\n      ...participant,\r\n      status,\r\n      paymentMethod,\r\n      paidDate: status === 'paid' ? new Date().toISOString() : participant.paidDate\r\n    };\r\n  };\r\n  \r\n  /**\r\n   * Calculate the overall status of a split expense\r\n   * @param {Object} splitExpense - The split expense to evaluate\r\n   * @returns {string} Status (pending, settled, partial)\r\n   */\r\n  export const calculateSplitStatus = (splitExpense) => {\r\n    if (!splitExpense || !Array.isArray(splitExpense.participants)) {\r\n      return 'pending';\r\n    }\r\n    \r\n    const paidCount = splitExpense.participants.filter(p => p.status === 'paid').length;\r\n    \r\n    if (paidCount === 0) {\r\n      return 'pending';\r\n    } else if (paidCount === splitExpense.participants.length) {\r\n      return 'settled';\r\n    } else {\r\n      return 'partial';\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get a summary of a split expense\r\n   * @param {Object} splitExpense - The split expense\r\n   * @returns {Object} Summary information\r\n   */\r\n  export const getSplitSummary = (splitExpense) => {\r\n    if (!splitExpense || !Array.isArray(splitExpense.participants)) {\r\n      return {\r\n        totalAmount: 0,\r\n        paidAmount: 0,\r\n        pendingAmount: 0,\r\n        participantCount: 0,\r\n        paidCount: 0,\r\n        status: 'pending'\r\n      };\r\n    }\r\n    \r\n    const paidAmount = splitExpense.participants\r\n      .filter(p => p.status === 'paid')\r\n      .reduce((sum, p) => sum + (p.shareAmount || 0), 0);\r\n      \r\n    const pendingAmount = splitExpense.participants\r\n      .filter(p => p.status !== 'paid')\r\n      .reduce((sum, p) => sum + (p.shareAmount || 0), 0);\r\n      \r\n    const paidCount = splitExpense.participants.filter(p => p.status === 'paid').length;\r\n    \r\n    return {\r\n      totalAmount: splitExpense.totalAmount,\r\n      paidAmount,\r\n      pendingAmount,\r\n      participantCount: splitExpense.participants.length,\r\n      paidCount,\r\n      status: calculateSplitStatus(splitExpense)\r\n    };\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}