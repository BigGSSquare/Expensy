{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence-tracker - Copy\\\\expence-tracker\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ExpenseContext } from '../context/ExpenseContext';\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\nimport BudgetAlerts from './BudgetAlerts';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    expenses,\n    budgets,\n    alerts,\n    incomes\n  } = useContext(ExpenseContext);\n  const [chartData, setChartData] = useState([]);\n  const [categoryData, setCategoryData] = useState([]);\n  const [timeframe, setTimeframe] = useState('month');\n  const [isLoading, setIsLoading] = useState(true);\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28AD3', '#FF6B6B', '#4ECDC4'];\n\n  // Initialize data on first load and when dependencies change\n  useEffect(() => {\n    setIsLoading(true);\n    prepareChartData();\n    prepareCategoryData();\n    setIsLoading(false);\n  }, [expenses, timeframe, incomes, budgets]);\n\n  // Safely calculate current month's data\n  const currentMonthData = () => {\n    // Default empty state\n    const defaultData = {\n      totalExpenses: 0,\n      totalIncome: 0,\n      balance: 0\n    };\n\n    // Return default if no data\n    if (!Array.isArray(expenses) || !Array.isArray(incomes)) {\n      return defaultData;\n    }\n    try {\n      const now = new Date();\n      const currentMonth = now.getMonth();\n      const currentYear = now.getFullYear();\n\n      // Filter expenses for current month with error handling\n      const monthlyExpenses = expenses.filter(expense => {\n        if (!expense || !expense.date) return false;\n        try {\n          const expenseDate = new Date(expense.date);\n          return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear;\n        } catch (e) {\n          return false;\n        }\n      });\n\n      // Filter incomes for current month with error handling\n      const monthlyIncome = incomes.filter(income => {\n        if (!income || !income.date) return false;\n        try {\n          const incomeDate = new Date(income.date);\n          return incomeDate.getMonth() === currentMonth && incomeDate.getFullYear() === currentYear;\n        } catch (e) {\n          return false;\n        }\n      });\n\n      // Calculate totals with safeguards against NaN\n      const totalExpenses = monthlyExpenses.reduce((sum, expense) => {\n        const amount = parseFloat(expense.amount);\n        return sum + (isNaN(amount) ? 0 : amount);\n      }, 0);\n      const totalIncome = monthlyIncome.reduce((sum, income) => {\n        const amount = parseFloat(income.amount);\n        return sum + (isNaN(amount) ? 0 : amount);\n      }, 0);\n      return {\n        totalExpenses,\n        totalIncome,\n        balance: totalIncome - totalExpenses\n      };\n    } catch (error) {\n      console.error('Error calculating monthly data:', error);\n      return defaultData;\n    }\n  };\n\n  // Safely prepare chart data\n  const prepareChartData = () => {\n    if (!Array.isArray(expenses) || expenses.length === 0) {\n      setChartData([]);\n      return;\n    }\n    try {\n      const now = new Date();\n      let filteredExpenses = [];\n      if (timeframe === 'week') {\n        // Last 7 days - use a safer approach with milliseconds\n        const lastWeek = new Date(now);\n        lastWeek.setDate(lastWeek.getDate() - 7);\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate >= lastWeek;\n          } catch (error) {\n            return false;\n          }\n        });\n      } else if (timeframe === 'month') {\n        // Current month\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate.getMonth() === now.getMonth() && expenseDate.getFullYear() === now.getFullYear();\n          } catch (error) {\n            return false;\n          }\n        });\n      } else if (timeframe === 'year') {\n        // Current year\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate.getFullYear() === now.getFullYear();\n          } catch (error) {\n            return false;\n          }\n        });\n      }\n\n      // Group by date\n      const groupedData = {};\n      filteredExpenses.forEach(expense => {\n        if (!expense || !expense.date) return;\n        const date = expense.date;\n        if (!groupedData[date]) {\n          groupedData[date] = 0;\n        }\n        const amount = parseFloat(expense.amount);\n        groupedData[date] += isNaN(amount) ? 0 : amount;\n      });\n\n      // Convert to array for recharts\n      const chartDataArray = Object.keys(groupedData).sort().map(date => ({\n        date,\n        amount: groupedData[date]\n      }));\n      setChartData(chartDataArray);\n    } catch (error) {\n      console.error('Error preparing chart data:', error);\n      setChartData([]);\n    }\n  };\n\n  // Safely prepare category data\n  const prepareCategoryData = () => {\n    if (!Array.isArray(expenses) || expenses.length === 0) {\n      setCategoryData([]);\n      return;\n    }\n    try {\n      const now = new Date();\n      let filteredExpenses = [];\n      if (timeframe === 'week') {\n        const lastWeek = new Date(now);\n        lastWeek.setDate(lastWeek.getDate() - 7);\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate >= lastWeek;\n          } catch (error) {\n            return false;\n          }\n        });\n      } else if (timeframe === 'month') {\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate.getMonth() === now.getMonth() && expenseDate.getFullYear() === now.getFullYear();\n          } catch (error) {\n            return false;\n          }\n        });\n      } else if (timeframe === 'year') {\n        filteredExpenses = expenses.filter(expense => {\n          if (!expense || !expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate.getFullYear() === now.getFullYear();\n          } catch (error) {\n            return false;\n          }\n        });\n      }\n\n      // Group by category\n      const categoryTotals = {};\n      filteredExpenses.forEach(expense => {\n        if (!expense || !expense.category) return;\n        const {\n          category,\n          amount\n        } = expense;\n        if (!categoryTotals[category]) {\n          categoryTotals[category] = 0;\n        }\n        const parsedAmount = parseFloat(amount);\n        categoryTotals[category] += isNaN(parsedAmount) ? 0 : parsedAmount;\n      });\n\n      // Convert to array for recharts\n      const categoryDataArray = Object.keys(categoryTotals).filter(category => categoryTotals[category] > 0) // Only include categories with values\n      .map(category => ({\n        name: category,\n        value: categoryTotals[category]\n      }));\n      setCategoryData(categoryDataArray);\n    } catch (error) {\n      console.error('Error preparing category data:', error);\n      setCategoryData([]);\n    }\n  };\n\n  // Safely render the expense line chart\n  const renderExpenseLineChart = () => {\n    if (!chartData || chartData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for the selected timeframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          tick: {\n            fontSize: 12\n          },\n          tickFormatter: date => {\n            try {\n              if (timeframe === 'year') {\n                return new Date(date).toLocaleDateString(undefined, {\n                  month: 'short'\n                });\n              }\n              return new Date(date).toLocaleDateString(undefined, {\n                month: 'numeric',\n                day: 'numeric'\n              });\n            } catch (e) {\n              return date;\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          tickFormatter: value => `$${value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => [`$${parseFloat(value).toFixed(2)}`, 'Amount'],\n          labelFormatter: label => {\n            try {\n              return new Date(label).toLocaleDateString();\n            } catch (e) {\n              return label;\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"amount\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          },\n          name: \"Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Safely render the category pie chart\n  const renderCategoryPieChart = () => {\n    if (!categoryData || categoryData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for the selected timeframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Calculate total for percentage\n    const total = categoryData.reduce((sum, item) => sum + item.value, 0);\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(PieChart, {\n        children: [/*#__PURE__*/_jsxDEV(Pie, {\n          data: categoryData,\n          cx: \"50%\",\n          cy: \"50%\",\n          labelLine: true,\n          outerRadius: 80,\n          fill: \"#8884d8\",\n          dataKey: \"value\",\n          label: ({\n            name,\n            value\n          }) => {\n            const percent = total > 0 ? (value / total * 100).toFixed(0) : 0;\n            return `${name}: ${percent}%`;\n          },\n          children: categoryData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n            fill: COLORS[index % COLORS.length]\n          }, `cell-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => [`$${parseFloat(value).toFixed(2)}`, 'Amount'],\n          labelFormatter: name => name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Safely render the budget comparison bar chart\n  const renderBudgetComparisonChart = () => {\n    if (!categoryData || categoryData.length === 0 || !budgets) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for the selected timeframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Map budget data with safeguards\n    const budgetData = categoryData.filter(item => item.name && typeof item.value === 'number').map(item => {\n      const budgetAmount = parseFloat(budgets[item.name] || 0);\n      return {\n        name: item.name,\n        actual: item.value,\n        budget: isNaN(budgetAmount) ? 0 : budgetAmount\n      };\n    }).filter(item => item.actual > 0 || item.budget > 0); // Only include items with values\n\n    if (budgetData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No budget data available for comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: budgetData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\",\n          tick: {\n            fontSize: 12\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          tickFormatter: value => `$${value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => [`$${parseFloat(value).toFixed(2)}`, 'Amount'],\n          labelFormatter: name => name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"actual\",\n          fill: \"#FF8042\",\n          name: \"Actual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"budget\",\n          fill: \"#8884d8\",\n          name: \"Budget\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Calculate monthly data outside the JSX\n  const monthlyData = currentMonthData();\n  const totalExpenses = monthlyData.totalExpenses;\n  const totalIncome = monthlyData.totalIncome;\n  const balance = monthlyData.balance;\n\n  // Format currency values\n  const formatCurrency = value => {\n    return `$${parseFloat(value).toFixed(2)}`;\n  };\n\n  // Loading indicator\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard loading\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading dashboard data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Expense Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/add\",\n        className: \"action-btn expense-btn\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/add-income\",\n        className: \"action-btn income-btn\",\n        children: \"Add Income\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this), Array.isArray(alerts) && alerts.filter(alert => !alert.read).length > 0 && /*#__PURE__*/_jsxDEV(BudgetAlerts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-boxes\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-box income-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-title\",\n          children: \"Monthly Income\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-value\",\n          children: formatCurrency(totalIncome)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-box expense-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-title\",\n          children: \"Monthly Expenses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-value\",\n          children: formatCurrency(totalExpenses)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `summary-box balance-box ${balance >= 0 ? 'positive' : 'negative'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-title\",\n          children: \"Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-value\",\n          children: formatCurrency(Math.abs(balance))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-label\",\n          children: balance >= 0 ? 'Surplus' : 'Deficit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeframe-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'week' ? 'active' : '',\n        onClick: () => setTimeframe('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'month' ? 'active' : '',\n        onClick: () => setTimeframe('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'year' ? 'active' : '',\n        onClick: () => setTimeframe('year'),\n        children: \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Spending Over Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), renderExpenseLineChart()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Spending by Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this), renderCategoryPieChart()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Budget vs. Actual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this), renderBudgetComparisonChart()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"MIE+TZJoiLWybwRyZNfCpFGX1eI=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useContext","useState","useEffect","Link","ExpenseContext","LineChart","Line","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","BudgetAlerts","jsxDEV","_jsxDEV","Dashboard","_s","expenses","budgets","alerts","incomes","chartData","setChartData","categoryData","setCategoryData","timeframe","setTimeframe","isLoading","setIsLoading","COLORS","prepareChartData","prepareCategoryData","currentMonthData","defaultData","totalExpenses","totalIncome","balance","Array","isArray","now","Date","currentMonth","getMonth","currentYear","getFullYear","monthlyExpenses","filter","expense","date","expenseDate","e","monthlyIncome","income","incomeDate","reduce","sum","amount","parseFloat","isNaN","error","console","length","filteredExpenses","lastWeek","setDate","getDate","groupedData","forEach","chartDataArray","Object","keys","sort","map","categoryTotals","category","parsedAmount","categoryDataArray","name","value","renderExpenseLineChart","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","data","strokeDasharray","dataKey","tick","fontSize","tickFormatter","toLocaleDateString","undefined","month","day","formatter","toFixed","labelFormatter","label","type","stroke","activeDot","r","renderCategoryPieChart","total","item","cx","cy","labelLine","outerRadius","fill","percent","entry","index","renderBudgetComparisonChart","budgetData","budgetAmount","actual","budget","monthlyData","formatCurrency","className","to","alert","read","Math","abs","onClick","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker - Copy/expence-tracker/src/components/Dashboard.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; \r\nimport { ExpenseContext } from '../context/ExpenseContext';\r\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\r\nimport BudgetAlerts from './BudgetAlerts';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard = () => {\r\n  const { expenses, budgets, alerts, incomes } = useContext(ExpenseContext);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [categoryData, setCategoryData] = useState([]);\r\n  const [timeframe, setTimeframe] = useState('month');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28AD3', '#FF6B6B', '#4ECDC4'];\r\n  \r\n  // Initialize data on first load and when dependencies change\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    prepareChartData();\r\n    prepareCategoryData();\r\n    setIsLoading(false);\r\n  }, [expenses, timeframe, incomes, budgets]);\r\n  \r\n  // Safely calculate current month's data\r\n  const currentMonthData = () => {\r\n    // Default empty state\r\n    const defaultData = {\r\n      totalExpenses: 0,\r\n      totalIncome: 0,\r\n      balance: 0\r\n    };\r\n    \r\n    // Return default if no data\r\n    if (!Array.isArray(expenses) || !Array.isArray(incomes)) {\r\n      return defaultData;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      const currentMonth = now.getMonth();\r\n      const currentYear = now.getFullYear();\r\n      \r\n      // Filter expenses for current month with error handling\r\n      const monthlyExpenses = expenses.filter(expense => {\r\n        if (!expense || !expense.date) return false;\r\n        \r\n        try {\r\n          const expenseDate = new Date(expense.date);\r\n          return expenseDate.getMonth() === currentMonth && \r\n                 expenseDate.getFullYear() === currentYear;\r\n        } catch (e) {\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      // Filter incomes for current month with error handling\r\n      const monthlyIncome = incomes.filter(income => {\r\n        if (!income || !income.date) return false;\r\n        \r\n        try {\r\n          const incomeDate = new Date(income.date);\r\n          return incomeDate.getMonth() === currentMonth && \r\n                 incomeDate.getFullYear() === currentYear;\r\n        } catch (e) {\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      // Calculate totals with safeguards against NaN\r\n      const totalExpenses = monthlyExpenses.reduce((sum, expense) => {\r\n        const amount = parseFloat(expense.amount);\r\n        return sum + (isNaN(amount) ? 0 : amount);\r\n      }, 0);\r\n      \r\n      const totalIncome = monthlyIncome.reduce((sum, income) => {\r\n        const amount = parseFloat(income.amount);\r\n        return sum + (isNaN(amount) ? 0 : amount);\r\n      }, 0);\r\n      \r\n      return {\r\n        totalExpenses,\r\n        totalIncome,\r\n        balance: totalIncome - totalExpenses\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating monthly data:', error);\r\n      return defaultData;\r\n    }\r\n  };\r\n  \r\n  // Safely prepare chart data\r\n  const prepareChartData = () => {\r\n    if (!Array.isArray(expenses) || expenses.length === 0) {\r\n      setChartData([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      let filteredExpenses = [];\r\n      \r\n      if (timeframe === 'week') {\r\n        // Last 7 days - use a safer approach with milliseconds\r\n        const lastWeek = new Date(now);\r\n        lastWeek.setDate(lastWeek.getDate() - 7);\r\n        \r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate >= lastWeek;\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'month') {\r\n        // Current month\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getMonth() === now.getMonth() && \r\n                   expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'year') {\r\n        // Current year\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Group by date\r\n      const groupedData = {};\r\n      \r\n      filteredExpenses.forEach(expense => {\r\n        if (!expense || !expense.date) return;\r\n        \r\n        const date = expense.date;\r\n        if (!groupedData[date]) {\r\n          groupedData[date] = 0;\r\n        }\r\n        \r\n        const amount = parseFloat(expense.amount);\r\n        groupedData[date] += isNaN(amount) ? 0 : amount;\r\n      });\r\n      \r\n      // Convert to array for recharts\r\n      const chartDataArray = Object.keys(groupedData)\r\n        .sort()\r\n        .map(date => ({\r\n          date,\r\n          amount: groupedData[date]\r\n        }));\r\n        \r\n      setChartData(chartDataArray);\r\n    } catch (error) {\r\n      console.error('Error preparing chart data:', error);\r\n      setChartData([]);\r\n    }\r\n  };\r\n  \r\n  // Safely prepare category data\r\n  const prepareCategoryData = () => {\r\n    if (!Array.isArray(expenses) || expenses.length === 0) {\r\n      setCategoryData([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const now = new Date();\r\n      let filteredExpenses = [];\r\n      \r\n      if (timeframe === 'week') {\r\n        const lastWeek = new Date(now);\r\n        lastWeek.setDate(lastWeek.getDate() - 7);\r\n        \r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate >= lastWeek;\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'month') {\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getMonth() === now.getMonth() && \r\n                   expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (timeframe === 'year') {\r\n        filteredExpenses = expenses.filter(expense => {\r\n          if (!expense || !expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getFullYear() === now.getFullYear();\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Group by category\r\n      const categoryTotals = {};\r\n      \r\n      filteredExpenses.forEach(expense => {\r\n        if (!expense || !expense.category) return;\r\n        \r\n        const { category, amount } = expense;\r\n        if (!categoryTotals[category]) {\r\n          categoryTotals[category] = 0;\r\n        }\r\n        \r\n        const parsedAmount = parseFloat(amount);\r\n        categoryTotals[category] += isNaN(parsedAmount) ? 0 : parsedAmount;\r\n      });\r\n      \r\n      // Convert to array for recharts\r\n      const categoryDataArray = Object.keys(categoryTotals)\r\n        .filter(category => categoryTotals[category] > 0) // Only include categories with values\r\n        .map(category => ({\r\n          name: category,\r\n          value: categoryTotals[category]\r\n        }));\r\n      \r\n      setCategoryData(categoryDataArray);\r\n    } catch (error) {\r\n      console.error('Error preparing category data:', error);\r\n      setCategoryData([]);\r\n    }\r\n  };\r\n  \r\n  // Safely render the expense line chart\r\n  const renderExpenseLineChart = () => {\r\n    if (!chartData || chartData.length === 0) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <LineChart data={chartData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"date\"\r\n            tick={{ fontSize: 12 }}\r\n            tickFormatter={(date) => {\r\n              try {\r\n                if (timeframe === 'year') {\r\n                  return new Date(date).toLocaleDateString(undefined, { month: 'short' });\r\n                }\r\n                return new Date(date).toLocaleDateString(undefined, { month: 'numeric', day: 'numeric' });\r\n              } catch (e) {\r\n                return date;\r\n              }\r\n            }}\r\n          />\r\n          <YAxis \r\n            tickFormatter={(value) => `$${value}`}\r\n          />\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(label) => {\r\n              try {\r\n                return new Date(label).toLocaleDateString();\r\n              } catch (e) {\r\n                return label;\r\n              }\r\n            }}\r\n          />\r\n          <Legend />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"amount\" \r\n            stroke=\"#8884d8\" \r\n            activeDot={{ r: 8 }} \r\n            name=\"Expense\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n\r\n  // Safely render the category pie chart\r\n  const renderCategoryPieChart = () => {\r\n    if (!categoryData || categoryData.length === 0) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    // Calculate total for percentage\r\n    const total = categoryData.reduce((sum, item) => sum + item.value, 0);\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <PieChart>\r\n          <Pie\r\n            data={categoryData}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            labelLine={true}\r\n            outerRadius={80}\r\n            fill=\"#8884d8\"\r\n            dataKey=\"value\"\r\n            label={({ name, value }) => {\r\n              const percent = total > 0 ? ((value / total) * 100).toFixed(0) : 0;\r\n              return `${name}: ${percent}%`;\r\n            }}\r\n          >\r\n            {categoryData.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(name) => name}\r\n          />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n\r\n  // Safely render the budget comparison bar chart\r\n  const renderBudgetComparisonChart = () => {\r\n    if (!categoryData || categoryData.length === 0 || !budgets) {\r\n      return <p>No data available for the selected timeframe</p>;\r\n    }\r\n\r\n    // Map budget data with safeguards\r\n    const budgetData = categoryData\r\n      .filter(item => item.name && typeof item.value === 'number')\r\n      .map(item => {\r\n        const budgetAmount = parseFloat(budgets[item.name] || 0);\r\n        return {\r\n          name: item.name,\r\n          actual: item.value,\r\n          budget: isNaN(budgetAmount) ? 0 : budgetAmount\r\n        };\r\n      })\r\n      .filter(item => item.actual > 0 || item.budget > 0); // Only include items with values\r\n\r\n    if (budgetData.length === 0) {\r\n      return <p>No budget data available for comparison</p>;\r\n    }\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart data={budgetData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"name\"\r\n            tick={{ fontSize: 12 }}\r\n          />\r\n          <YAxis \r\n            tickFormatter={(value) => `$${value}`}\r\n          />\r\n          <Tooltip \r\n            formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Amount']}\r\n            labelFormatter={(name) => name}\r\n          />\r\n          <Legend />\r\n          <Bar dataKey=\"actual\" fill=\"#FF8042\" name=\"Actual\" />\r\n          <Bar dataKey=\"budget\" fill=\"#8884d8\" name=\"Budget\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n  \r\n  // Calculate monthly data outside the JSX\r\n  const monthlyData = currentMonthData();\r\n  const totalExpenses = monthlyData.totalExpenses;\r\n  const totalIncome = monthlyData.totalIncome;\r\n  const balance = monthlyData.balance;\r\n  \r\n  // Format currency values\r\n  const formatCurrency = (value) => {\r\n    return `$${parseFloat(value).toFixed(2)}`;\r\n  };\r\n  \r\n  // Loading indicator\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"dashboard loading\">\r\n        <p>Loading dashboard data...</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h1>Expense Dashboard</h1>\r\n      \r\n      <div className=\"action-buttons\">\r\n        <Link to=\"/add\" className=\"action-btn expense-btn\">Add Expense</Link>\r\n        <Link to=\"/add-income\" className=\"action-btn income-btn\">Add Income</Link>\r\n      </div>\r\n      \r\n      {/* Show budget alerts if any exist */}\r\n      {Array.isArray(alerts) && alerts.filter(alert => !alert.read).length > 0 && (\r\n        <BudgetAlerts />\r\n      )}\r\n      \r\n      <div className=\"summary-boxes\">\r\n        <div className=\"summary-box income-box\">\r\n          <div className=\"summary-title\">Monthly Income</div>\r\n          <div className=\"summary-value\">{formatCurrency(totalIncome)}</div>\r\n        </div>\r\n        \r\n        <div className=\"summary-box expense-box\">\r\n          <div className=\"summary-title\">Monthly Expenses</div>\r\n          <div className=\"summary-value\">{formatCurrency(totalExpenses)}</div>\r\n        </div>\r\n        \r\n        <div className={`summary-box balance-box ${balance >= 0 ? 'positive' : 'negative'}`}>\r\n          <div className=\"summary-title\">Balance</div>\r\n          <div className=\"summary-value\">{formatCurrency(Math.abs(balance))}</div>\r\n          <div className=\"summary-label\">{balance >= 0 ? 'Surplus' : 'Deficit'}</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"timeframe-selector\">\r\n        <button \r\n          className={timeframe === 'week' ? 'active' : ''} \r\n          onClick={() => setTimeframe('week')}\r\n        >\r\n          Week\r\n        </button>\r\n        <button \r\n          className={timeframe === 'month' ? 'active' : ''} \r\n          onClick={() => setTimeframe('month')}\r\n        >\r\n          Month\r\n        </button>\r\n        <button \r\n          className={timeframe === 'year' ? 'active' : ''} \r\n          onClick={() => setTimeframe('year')}\r\n        >\r\n          Year\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"chart-container\">\r\n        <h2>Spending Over Time</h2>\r\n        {renderExpenseLineChart()}\r\n      </div>\r\n      \r\n      <div className=\"charts-row\">\r\n        <div className=\"chart-container\">\r\n          <h2>Spending by Category</h2>\r\n          {renderCategoryPieChart()}\r\n        </div>\r\n        \r\n        <div className=\"chart-container\">\r\n          <h2>Budget vs. Actual</h2>\r\n          {renderBudgetComparisonChart()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}