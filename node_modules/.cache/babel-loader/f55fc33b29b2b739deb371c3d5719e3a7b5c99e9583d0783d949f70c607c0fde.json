{"ast":null,"code":"// src/services/EmailService.js\nimport emailjs from 'emailjs-com';\n\n// Initialize EmailJS with your user ID\n// You need to sign up for EmailJS and get these values\nconst EMAILJS_USER_ID = 'YOUR_USER_ID'; // Replace with your actual EmailJS user ID\nconst EMAILJS_SERVICE_ID = 'YOUR_SERVICE_ID'; // Replace with your EmailJS service ID\nconst EMAILJS_TEMPLATE_ID = 'YOUR_TEMPLATE_ID'; // Replace with your template ID\n\n// Initialize EmailJS\nemailjs.init(EMAILJS_USER_ID);\n\n// Function to send budget alert email\nexport const sendBudgetAlertEmail = async (user, category, budget, spent) => {\n  // Verify that we have a user with an email address\n  if (!user || !user.email) {\n    console.error('Cannot send email: User email is missing', user);\n    return {\n      success: false,\n      message: 'User email is missing'\n    };\n  }\n  console.log('Preparing to send budget alert email to:', user.email);\n  const to = user.email; // This is the user's email from their account\n  const over_amount = (spent - budget).toFixed(2);\n\n  // Create template parameters that EmailJS will use\n  // These must match the variables in your EmailJS template\n  const templateParams = {\n    to_email: to,\n    // The recipient's email (user's email)\n    to_name: user.name || to.split('@')[0],\n    category: category,\n    budget: budget.toFixed(2),\n    spent: spent.toFixed(2),\n    over_amount: over_amount\n    // If your EmailJS template uses different variable names, adjust them here\n  };\n  console.log('Email template parameters:', templateParams);\n  try {\n    // Send email using EmailJS\n    const response = await emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, templateParams);\n    console.log('Email sent successfully:', response);\n    return {\n      success: true,\n      message: 'Email sent successfully'\n    };\n  } catch (error) {\n    console.error('Error sending email:', error);\n    return {\n      success: false,\n      message: 'Failed to send email',\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["emailjs","EMAILJS_USER_ID","EMAILJS_SERVICE_ID","EMAILJS_TEMPLATE_ID","init","sendBudgetAlertEmail","user","category","budget","spent","email","console","error","success","message","log","to","over_amount","toFixed","templateParams","to_email","to_name","name","split","response","send"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker/src/services/EmailService.js"],"sourcesContent":["// src/services/EmailService.js\r\nimport emailjs from 'emailjs-com';\r\n\r\n// Initialize EmailJS with your user ID\r\n// You need to sign up for EmailJS and get these values\r\nconst EMAILJS_USER_ID = 'YOUR_USER_ID'; // Replace with your actual EmailJS user ID\r\nconst EMAILJS_SERVICE_ID = 'YOUR_SERVICE_ID'; // Replace with your EmailJS service ID\r\nconst EMAILJS_TEMPLATE_ID = 'YOUR_TEMPLATE_ID'; // Replace with your template ID\r\n\r\n// Initialize EmailJS\r\nemailjs.init(EMAILJS_USER_ID);\r\n\r\n// Function to send budget alert email\r\nexport const sendBudgetAlertEmail = async (user, category, budget, spent) => {\r\n  // Verify that we have a user with an email address\r\n  if (!user || !user.email) {\r\n    console.error('Cannot send email: User email is missing', user);\r\n    return {\r\n      success: false,\r\n      message: 'User email is missing'\r\n    };\r\n  }\r\n  \r\n  console.log('Preparing to send budget alert email to:', user.email);\r\n  \r\n  const to = user.email; // This is the user's email from their account\r\n  const over_amount = (spent - budget).toFixed(2);\r\n  \r\n  // Create template parameters that EmailJS will use\r\n  // These must match the variables in your EmailJS template\r\n  const templateParams = {\r\n    to_email: to, // The recipient's email (user's email)\r\n    to_name: user.name || to.split('@')[0],\r\n    category: category,\r\n    budget: budget.toFixed(2),\r\n    spent: spent.toFixed(2),\r\n    over_amount: over_amount,\r\n    // If your EmailJS template uses different variable names, adjust them here\r\n  };\r\n  \r\n  console.log('Email template parameters:', templateParams);\r\n  \r\n  try {\r\n    // Send email using EmailJS\r\n    const response = await emailjs.send(\r\n      EMAILJS_SERVICE_ID,\r\n      EMAILJS_TEMPLATE_ID,\r\n      templateParams\r\n    );\r\n    \r\n    console.log('Email sent successfully:', response);\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Failed to send email',\r\n      error: error.message\r\n    };\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAOA,OAAO,MAAM,aAAa;;AAEjC;AACA;AACA,MAAMC,eAAe,GAAG,cAAc,CAAC,CAAC;AACxC,MAAMC,kBAAkB,GAAG,iBAAiB,CAAC,CAAC;AAC9C,MAAMC,mBAAmB,GAAG,kBAAkB,CAAC,CAAC;;AAEhD;AACAH,OAAO,CAACI,IAAI,CAACH,eAAe,CAAC;;AAE7B;AACA,OAAO,MAAMI,oBAAoB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,KAAK;EAC3E;EACA,IAAI,CAACH,IAAI,IAAI,CAACA,IAAI,CAACI,KAAK,EAAE;IACxBC,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAEN,IAAI,CAAC;IAC/D,OAAO;MACLO,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;IACX,CAAC;EACH;EAEAH,OAAO,CAACI,GAAG,CAAC,0CAA0C,EAAET,IAAI,CAACI,KAAK,CAAC;EAEnE,MAAMM,EAAE,GAAGV,IAAI,CAACI,KAAK,CAAC,CAAC;EACvB,MAAMO,WAAW,GAAG,CAACR,KAAK,GAAGD,MAAM,EAAEU,OAAO,CAAC,CAAC,CAAC;;EAE/C;EACA;EACA,MAAMC,cAAc,GAAG;IACrBC,QAAQ,EAAEJ,EAAE;IAAE;IACdK,OAAO,EAAEf,IAAI,CAACgB,IAAI,IAAIN,EAAE,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtChB,QAAQ,EAAEA,QAAQ;IAClBC,MAAM,EAAEA,MAAM,CAACU,OAAO,CAAC,CAAC,CAAC;IACzBT,KAAK,EAAEA,KAAK,CAACS,OAAO,CAAC,CAAC,CAAC;IACvBD,WAAW,EAAEA;IACb;EACF,CAAC;EAEDN,OAAO,CAACI,GAAG,CAAC,4BAA4B,EAAEI,cAAc,CAAC;EAEzD,IAAI;IACF;IACA,MAAMK,QAAQ,GAAG,MAAMxB,OAAO,CAACyB,IAAI,CACjCvB,kBAAkB,EAClBC,mBAAmB,EACnBgB,cACF,CAAC;IAEDR,OAAO,CAACI,GAAG,CAAC,0BAA0B,EAAES,QAAQ,CAAC;IAEjD,OAAO;MACLX,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACLC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,sBAAsB;MAC/BF,KAAK,EAAEA,KAAK,CAACE;IACf,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}