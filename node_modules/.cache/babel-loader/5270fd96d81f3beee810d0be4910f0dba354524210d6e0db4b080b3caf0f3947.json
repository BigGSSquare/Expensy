{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence-tracker - Copy\\\\expence-tracker\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is already logged in on initial render\n  useEffect(() => {\n    const userData = localStorage.getItem('currentUser');\n    if (userData) {\n      try {\n        setCurrentUser(JSON.parse(userData));\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n        localStorage.removeItem('currentUser'); // Clear corrupted data\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Login function with improved error handling\n  const login = (email, password) => {\n    if (!email || !password) return false;\n    try {\n      const users = JSON.parse(localStorage.getItem('users')) || [];\n      const user = users.find(user => user.email === email && user.password === password);\n      if (user) {\n        // Don't store password in currentUser for security\n        const {\n          password: _,\n          ...userWithoutPassword\n        } = user;\n\n        // Ensure email is included\n        const userToStore = {\n          ...userWithoutPassword,\n          email: email // Ensure email is always present\n        };\n        setCurrentUser(userToStore);\n        localStorage.setItem('currentUser', JSON.stringify(userToStore));\n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n    }\n    return false;\n  };\n\n  // Register a new user with better validation\n  const register = (name, email, password) => {\n    if (!name || !email || !password) return false;\n    try {\n      const users = JSON.parse(localStorage.getItem('users')) || [];\n\n      // Check if user already exists\n      const existingUser = users.find(user => user.email === email);\n      if (existingUser) {\n        return false;\n      }\n\n      // Create new user\n      const newUser = {\n        id: Date.now(),\n        name,\n        email,\n        password,\n        created: new Date().toISOString(),\n        preferences: {\n          emailNotifications: true\n        }\n      };\n\n      // Save to localStorage\n      localStorage.setItem('users', JSON.stringify([...users, newUser]));\n\n      // Auto login after registration\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = newUser;\n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    }\n  };\n\n  // Log out user\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n  };\n\n  // Update user profile with error handling\n  const updateProfile = updatedData => {\n    if (!currentUser) return false;\n    try {\n      const users = JSON.parse(localStorage.getItem('users')) || [];\n\n      // Find and update user\n      const updatedUsers = users.map(user => {\n        if (user.id === currentUser.id) {\n          return {\n            ...user,\n            ...updatedData\n          };\n        }\n        return user;\n      });\n\n      // Update localStorage\n      localStorage.setItem('users', JSON.stringify(updatedUsers));\n\n      // Update current user in state and localStorage\n      const updatedUser = {\n        ...currentUser,\n        ...updatedData\n      };\n      setCurrentUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      return true;\n    } catch (error) {\n      console.error('Update profile error:', error);\n      return false;\n    }\n  };\n\n  // Change password with improved validation\n  const changePassword = (oldPassword, newPassword) => {\n    if (!currentUser || !oldPassword || !newPassword) return false;\n    try {\n      const users = JSON.parse(localStorage.getItem('users')) || [];\n\n      // Find user and verify old password\n      const userIndex = users.findIndex(user => user.id === currentUser.id && user.password === oldPassword);\n      if (userIndex === -1) {\n        return false;\n      }\n\n      // Update password\n      users[userIndex].password = newPassword;\n\n      // Update localStorage\n      localStorage.setItem('users', JSON.stringify(users));\n      return true;\n    } catch (error) {\n      console.error('Change password error:', error);\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      loading,\n      login,\n      register,\n      logout,\n      updateProfile,\n      changePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","userData","localStorage","getItem","JSON","parse","error","console","removeItem","login","email","password","users","user","find","_","userWithoutPassword","userToStore","setItem","stringify","register","name","existingUser","newUser","id","Date","now","created","toISOString","preferences","emailNotifications","logout","updateProfile","updatedData","updatedUsers","map","updatedUser","changePassword","oldPassword","newPassword","userIndex","findIndex","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker - Copy/expence-tracker/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Check if user is already logged in on initial render\r\n  useEffect(() => {\r\n    const userData = localStorage.getItem('currentUser');\r\n    if (userData) {\r\n      try {\r\n        setCurrentUser(JSON.parse(userData));\r\n      } catch (error) {\r\n        console.error('Error parsing user data:', error);\r\n        localStorage.removeItem('currentUser'); // Clear corrupted data\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Login function with improved error handling\r\n  const login = (email, password) => {\r\n    if (!email || !password) return false;\r\n    \r\n    try {\r\n      const users = JSON.parse(localStorage.getItem('users')) || [];\r\n      const user = users.find(\r\n        (user) => user.email === email && user.password === password\r\n      );\r\n\r\n      if (user) {\r\n        // Don't store password in currentUser for security\r\n        const { password: _, ...userWithoutPassword } = user;\r\n        \r\n        // Ensure email is included\r\n        const userToStore = {\r\n          ...userWithoutPassword,\r\n          email: email // Ensure email is always present\r\n        };\r\n        \r\n        setCurrentUser(userToStore);\r\n        localStorage.setItem('currentUser', JSON.stringify(userToStore));\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Register a new user with better validation\r\n  const register = (name, email, password) => {\r\n    if (!name || !email || !password) return false;\r\n    \r\n    try {\r\n      const users = JSON.parse(localStorage.getItem('users')) || [];\r\n      \r\n      // Check if user already exists\r\n      const existingUser = users.find((user) => user.email === email);\r\n      if (existingUser) {\r\n        return false;\r\n      }\r\n      \r\n      // Create new user\r\n      const newUser = {\r\n        id: Date.now(),\r\n        name,\r\n        email,\r\n        password,\r\n        created: new Date().toISOString(),\r\n        preferences: {\r\n          emailNotifications: true\r\n        }\r\n      };\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem('users', JSON.stringify([...users, newUser]));\r\n      \r\n      // Auto login after registration\r\n      const { password: _, ...userWithoutPassword } = newUser;\r\n      setCurrentUser(userWithoutPassword);\r\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Log out user\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('currentUser');\r\n  };\r\n\r\n  // Update user profile with error handling\r\n  const updateProfile = (updatedData) => {\r\n    if (!currentUser) return false;\r\n    \r\n    try {\r\n      const users = JSON.parse(localStorage.getItem('users')) || [];\r\n      \r\n      // Find and update user\r\n      const updatedUsers = users.map(user => {\r\n        if (user.id === currentUser.id) {\r\n          return { ...user, ...updatedData };\r\n        }\r\n        return user;\r\n      });\r\n      \r\n      // Update localStorage\r\n      localStorage.setItem('users', JSON.stringify(updatedUsers));\r\n      \r\n      // Update current user in state and localStorage\r\n      const updatedUser = { ...currentUser, ...updatedData };\r\n      setCurrentUser(updatedUser);\r\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Update profile error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Change password with improved validation\r\n  const changePassword = (oldPassword, newPassword) => {\r\n    if (!currentUser || !oldPassword || !newPassword) return false;\r\n    \r\n    try {\r\n      const users = JSON.parse(localStorage.getItem('users')) || [];\r\n      \r\n      // Find user and verify old password\r\n      const userIndex = users.findIndex(user => \r\n        user.id === currentUser.id && user.password === oldPassword\r\n      );\r\n      \r\n      if (userIndex === -1) {\r\n        return false;\r\n      }\r\n      \r\n      // Update password\r\n      users[userIndex].password = newPassword;\r\n      \r\n      // Update localStorage\r\n      localStorage.setItem('users', JSON.stringify(users));\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Change password error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        currentUser,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n        updateProfile,\r\n        changePassword\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}