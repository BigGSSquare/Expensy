{"ast":null,"code":"// src/services/EmailService.js\nimport emailjs from 'emailjs-com';\n\n// Your EmailJS credentials\nconst EMAILJS_PUBLIC_KEY = 'g0Zv3mEDUVljCuJyL'; // This should be your public key\nconst EMAILJS_SERVICE_ID = 'service_uk2jyu5';\nconst EMAILJS_TEMPLATE_ID = 'template_kjrzsq6';\nconst EMAILJS_SPLIT_TEMPLATE_ID = 'template_mtp8afi'; // Your split expense template ID\n\n// Initialize EmailJS (only needed once in your application)\n// Note: As of EmailJS v3, we should use init with the public key\nemailjs.init(EMAILJS_PUBLIC_KEY);\n\n/**\r\n * Sends a budget alert email when a user exceeds their budget\r\n * @param {object} user - The user object containing email and name\r\n * @param {string} category - The budget category that was exceeded\r\n * @param {number} budget - The budget amount\r\n * @param {number} spent - The amount spent\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\nexport const sendBudgetAlertEmail = async (user, category, budget, spent) => {\n  console.log('ðŸ“§ Attempting to send budget alert email...');\n  console.log('ðŸ“§ Service ID:', EMAILJS_SERVICE_ID);\n  console.log('ðŸ“§ Template ID:', EMAILJS_TEMPLATE_ID);\n\n  // Verify that we have a user with an email address\n  if (!user || !user.email) {\n    console.error('ðŸ“§ Cannot send email: User email is missing', user);\n    return {\n      success: false,\n      message: 'User email is missing'\n    };\n  }\n  console.log(`ðŸ“§ Sending budget alert email to: ${user.email}`);\n  const to = user.email;\n  const userName = user.name || to.split('@')[0];\n  const over_amount = (spent - budget).toFixed(2);\n\n  // Create template parameters that EmailJS will use\n  // These must match the variables in your EmailJS template\n  const templateParams = {\n    to_email: to,\n    to_name: userName,\n    category: category,\n    budget: budget.toFixed(2),\n    spent: spent.toFixed(2),\n    over_amount: over_amount\n  };\n  console.log('ðŸ“§ Email template parameters:', templateParams);\n  try {\n    // Send email using EmailJS\n    console.log('ðŸ“§ Sending email via EmailJS...');\n    const response = await emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, templateParams);\n    console.log('ðŸ“§ Email sent successfully!', response);\n    console.log('ðŸ“§ Response status:', response.status);\n    console.log('ðŸ“§ Response text:', response.text);\n    return {\n      success: true,\n      message: 'Email sent successfully',\n      response: response\n    };\n  } catch (error) {\n    console.error('ðŸ“§ Error sending email:', error);\n\n    // Provide detailed error information\n    let errorMessage = 'Failed to send email';\n    if (error.text) {\n      errorMessage += `: ${error.text}`;\n    }\n    if (error.status) {\n      errorMessage += ` (Status: ${error.status})`;\n    }\n\n    // Additional debugging for common issues\n    if (error.message && error.message.includes('Network Error')) {\n      console.error('ðŸ“§ Network issue detected. Check your internet connection.');\n      errorMessage = 'Network error: Check your internet connection';\n    }\n    if (error.message && error.message.includes('Invalid ID format')) {\n      console.error('ðŸ“§ EmailJS ID format issue detected.');\n      errorMessage = 'EmailJS configuration error: Invalid ID format';\n    }\n    return {\n      success: false,\n      message: errorMessage,\n      error: error\n    };\n  }\n};\n\n/**\r\n * Sends a split expense notification email to a participant\r\n * @param {object} participant - The participant object containing email and name\r\n * @param {object} splitExpense - The split expense details\r\n * @param {object} creator - The user who created the split expense\r\n * @param {boolean} isReminder - Whether this is a reminder email\r\n * @param {object} customParams - Custom parameters to override defaults\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\nexport const sendSplitExpenseEmail = async (participant, splitExpense, creator, isReminder = false, customParams = null) => {\n  console.log(`ðŸ“§ Attempting to send ${isReminder ? 'reminder' : 'notification'} for split expense...`);\n  console.log('ðŸ“§ Service ID:', EMAILJS_SERVICE_ID);\n  console.log('ðŸ“§ Template ID:', EMAILJS_SPLIT_TEMPLATE_ID);\n\n  // Verify that we have a participant with an email address\n  if (!participant || !participant.email) {\n    console.error('ðŸ“§ Cannot send email: Participant email is missing', participant);\n    return {\n      success: false,\n      message: 'Participant email is missing'\n    };\n  }\n  console.log(`ðŸ“§ Sending split expense ${isReminder ? 'reminder' : 'notification'} to: ${participant.email}`);\n  const to = participant.email;\n  const participantName = participant.name || to.split('@')[0];\n  const creatorName = (creator === null || creator === void 0 ? void 0 : creator.name) || 'Someone';\n\n  // Create template parameters that EmailJS will use\n  // These must match the variables in your EmailJS template\n  let templateParams = {\n    to_email: to,\n    to_name: participantName,\n    expense_description: splitExpense.description || 'Split expense',\n    expense_amount: (splitExpense.totalAmount || 0).toFixed(2),\n    share_amount: (participant.shareAmount || 0).toFixed(2),\n    creator_name: creatorName,\n    expense_date: new Date(splitExpense.date || new Date()).toLocaleDateString(),\n    expense_category: splitExpense.category || 'Uncategorized',\n    is_reminder: isReminder,\n    reminder_message: isReminder ? `This is a friendly reminder that your payment of $${(participant.shareAmount || 0).toFixed(2)} is still pending.` : '',\n    // These are for the From Name and Reply To in EmailJS\n    name: (creator === null || creator === void 0 ? void 0 : creator.name) || 'FinTrack',\n    email: (creator === null || creator === void 0 ? void 0 : creator.email) || ''\n  };\n\n  // Override with custom params if provided\n  if (customParams) {\n    templateParams = {\n      ...templateParams,\n      ...customParams\n    };\n  }\n  console.log('ðŸ“§ Email template parameters:', templateParams);\n  try {\n    // Send email using EmailJS\n    console.log('ðŸ“§ Sending email via EmailJS...');\n    const response = await emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_SPLIT_TEMPLATE_ID, templateParams);\n    console.log('ðŸ“§ Email sent successfully!', response);\n    console.log('ðŸ“§ Response status:', response.status);\n    console.log('ðŸ“§ Response text:', response.text);\n    return {\n      success: true,\n      message: 'Email sent successfully',\n      response: response\n    };\n  } catch (error) {\n    console.error('ðŸ“§ Error sending split expense email:', error);\n\n    // Provide detailed error information\n    let errorMessage = 'Failed to send email';\n    if (error.text) {\n      errorMessage += `: ${error.text}`;\n    }\n    if (error.status) {\n      errorMessage += ` (Status: ${error.status})`;\n    }\n\n    // Additional debugging for common issues\n    if (error.message && error.message.includes('Network Error')) {\n      console.error('ðŸ“§ Network issue detected. Check your internet connection.');\n      errorMessage = 'Network error: Check your internet connection';\n    }\n    if (error.message && error.message.includes('Invalid ID format')) {\n      console.error('ðŸ“§ EmailJS ID format issue detected.');\n      errorMessage = 'EmailJS configuration error: Invalid ID format';\n    }\n    return {\n      success: false,\n      message: errorMessage,\n      error: error\n    };\n  }\n};\n\n/**\r\n * Send a test email to verify the configuration\r\n * @param {object} user - The user object containing email and name\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\nexport const sendTestEmail = async user => {\n  if (!user || !user.email) {\n    console.error('ðŸ“§ Cannot send test email: User email is missing', user);\n    return {\n      success: false,\n      message: 'User email is missing'\n    };\n  }\n  return sendBudgetAlertEmail(user, 'Test Category', 100.00,\n  // Budget\n  150.00 // Spent\n  );\n};\n\n/**\r\n * Send a test split expense email to verify the configuration\r\n * @param {object} user - The user object containing email and name\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\nexport const sendTestSplitEmail = async user => {\n  if (!user || !user.email) {\n    console.error('ðŸ“§ Cannot send test split email: User email is missing', user);\n    return {\n      success: false,\n      message: 'User email is missing'\n    };\n  }\n\n  // Create a test participant (the user themselves)\n  const participant = {\n    name: user.name || user.email.split('@')[0],\n    email: user.email,\n    shareAmount: 25.00\n  };\n\n  // Create a test split expense\n  const testSplitExpense = {\n    description: 'Test Split Expense',\n    totalAmount: 100.00,\n    date: new Date().toISOString(),\n    category: 'Dining'\n  };\n\n  // Include the name and email parameters for From Name and Reply To\n  const customParams = {\n    name: 'FinTrack',\n    email: user.email\n  };\n  return sendSplitExpenseEmail(participant, testSplitExpense, user, false,\n  // Not a reminder\n  customParams);\n};","map":{"version":3,"names":["emailjs","EMAILJS_PUBLIC_KEY","EMAILJS_SERVICE_ID","EMAILJS_TEMPLATE_ID","EMAILJS_SPLIT_TEMPLATE_ID","init","sendBudgetAlertEmail","user","category","budget","spent","console","log","email","error","success","message","to","userName","name","split","over_amount","toFixed","templateParams","to_email","to_name","response","send","status","text","errorMessage","includes","sendSplitExpenseEmail","participant","splitExpense","creator","isReminder","customParams","participantName","creatorName","expense_description","description","expense_amount","totalAmount","share_amount","shareAmount","creator_name","expense_date","Date","date","toLocaleDateString","expense_category","is_reminder","reminder_message","sendTestEmail","sendTestSplitEmail","testSplitExpense","toISOString"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence tracker final/expence-tracker/src/services/EmailService.js"],"sourcesContent":["// src/services/EmailService.js\r\nimport emailjs from 'emailjs-com';\r\n\r\n// Your EmailJS credentials\r\nconst EMAILJS_PUBLIC_KEY = 'g0Zv3mEDUVljCuJyL';  // This should be your public key\r\nconst EMAILJS_SERVICE_ID = 'service_uk2jyu5';\r\nconst EMAILJS_TEMPLATE_ID = 'template_kjrzsq6';\r\nconst EMAILJS_SPLIT_TEMPLATE_ID = 'template_mtp8afi'; // Your split expense template ID\r\n\r\n// Initialize EmailJS (only needed once in your application)\r\n// Note: As of EmailJS v3, we should use init with the public key\r\nemailjs.init(EMAILJS_PUBLIC_KEY);\r\n\r\n/**\r\n * Sends a budget alert email when a user exceeds their budget\r\n * @param {object} user - The user object containing email and name\r\n * @param {string} category - The budget category that was exceeded\r\n * @param {number} budget - The budget amount\r\n * @param {number} spent - The amount spent\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\r\nexport const sendBudgetAlertEmail = async (user, category, budget, spent) => {\r\n  console.log('ðŸ“§ Attempting to send budget alert email...');\r\n  console.log('ðŸ“§ Service ID:', EMAILJS_SERVICE_ID);\r\n  console.log('ðŸ“§ Template ID:', EMAILJS_TEMPLATE_ID);\r\n  \r\n  // Verify that we have a user with an email address\r\n  if (!user || !user.email) {\r\n    console.error('ðŸ“§ Cannot send email: User email is missing', user);\r\n    return {\r\n      success: false,\r\n      message: 'User email is missing'\r\n    };\r\n  }\r\n\r\n  console.log(`ðŸ“§ Sending budget alert email to: ${user.email}`);\r\n  \r\n  const to = user.email;\r\n  const userName = user.name || to.split('@')[0];\r\n  const over_amount = (spent - budget).toFixed(2);\r\n  \r\n  // Create template parameters that EmailJS will use\r\n  // These must match the variables in your EmailJS template\r\n  const templateParams = {\r\n    to_email: to,\r\n    to_name: userName,\r\n    category: category,\r\n    budget: budget.toFixed(2),\r\n    spent: spent.toFixed(2),\r\n    over_amount: over_amount\r\n  };\r\n  \r\n  console.log('ðŸ“§ Email template parameters:', templateParams);\r\n  \r\n  try {\r\n    // Send email using EmailJS\r\n    console.log('ðŸ“§ Sending email via EmailJS...');\r\n    const response = await emailjs.send(\r\n      EMAILJS_SERVICE_ID,\r\n      EMAILJS_TEMPLATE_ID,\r\n      templateParams\r\n    );\r\n    \r\n    console.log('ðŸ“§ Email sent successfully!', response);\r\n    console.log('ðŸ“§ Response status:', response.status);\r\n    console.log('ðŸ“§ Response text:', response.text);\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n      response: response\r\n    };\r\n  } catch (error) {\r\n    console.error('ðŸ“§ Error sending email:', error);\r\n    \r\n    // Provide detailed error information\r\n    let errorMessage = 'Failed to send email';\r\n    \r\n    if (error.text) {\r\n      errorMessage += `: ${error.text}`;\r\n    }\r\n    \r\n    if (error.status) {\r\n      errorMessage += ` (Status: ${error.status})`;\r\n    }\r\n    \r\n    // Additional debugging for common issues\r\n    if (error.message && error.message.includes('Network Error')) {\r\n      console.error('ðŸ“§ Network issue detected. Check your internet connection.');\r\n      errorMessage = 'Network error: Check your internet connection';\r\n    }\r\n    \r\n    if (error.message && error.message.includes('Invalid ID format')) {\r\n      console.error('ðŸ“§ EmailJS ID format issue detected.');\r\n      errorMessage = 'EmailJS configuration error: Invalid ID format';\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: errorMessage,\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Sends a split expense notification email to a participant\r\n * @param {object} participant - The participant object containing email and name\r\n * @param {object} splitExpense - The split expense details\r\n * @param {object} creator - The user who created the split expense\r\n * @param {boolean} isReminder - Whether this is a reminder email\r\n * @param {object} customParams - Custom parameters to override defaults\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\r\nexport const sendSplitExpenseEmail = async (participant, splitExpense, creator, isReminder = false, customParams = null) => {\r\n  console.log(`ðŸ“§ Attempting to send ${isReminder ? 'reminder' : 'notification'} for split expense...`);\r\n  console.log('ðŸ“§ Service ID:', EMAILJS_SERVICE_ID);\r\n  console.log('ðŸ“§ Template ID:', EMAILJS_SPLIT_TEMPLATE_ID);\r\n  \r\n  // Verify that we have a participant with an email address\r\n  if (!participant || !participant.email) {\r\n    console.error('ðŸ“§ Cannot send email: Participant email is missing', participant);\r\n    return {\r\n      success: false,\r\n      message: 'Participant email is missing'\r\n    };\r\n  }\r\n\r\n  console.log(`ðŸ“§ Sending split expense ${isReminder ? 'reminder' : 'notification'} to: ${participant.email}`);\r\n  \r\n  const to = participant.email;\r\n  const participantName = participant.name || to.split('@')[0];\r\n  const creatorName = creator?.name || 'Someone';\r\n  \r\n  // Create template parameters that EmailJS will use\r\n  // These must match the variables in your EmailJS template\r\n  let templateParams = {\r\n    to_email: to,\r\n    to_name: participantName,\r\n    expense_description: splitExpense.description || 'Split expense',\r\n    expense_amount: (splitExpense.totalAmount || 0).toFixed(2),\r\n    share_amount: (participant.shareAmount || 0).toFixed(2),\r\n    creator_name: creatorName,\r\n    expense_date: new Date(splitExpense.date || new Date()).toLocaleDateString(),\r\n    expense_category: splitExpense.category || 'Uncategorized',\r\n    is_reminder: isReminder,\r\n    reminder_message: isReminder \r\n      ? `This is a friendly reminder that your payment of $${(participant.shareAmount || 0).toFixed(2)} is still pending.` \r\n      : '',\r\n    // These are for the From Name and Reply To in EmailJS\r\n    name: creator?.name || 'FinTrack',\r\n    email: creator?.email || ''\r\n  };\r\n  \r\n  // Override with custom params if provided\r\n  if (customParams) {\r\n    templateParams = {\r\n      ...templateParams,\r\n      ...customParams\r\n    };\r\n  }\r\n  \r\n  console.log('ðŸ“§ Email template parameters:', templateParams);\r\n  \r\n  try {\r\n    // Send email using EmailJS\r\n    console.log('ðŸ“§ Sending email via EmailJS...');\r\n    const response = await emailjs.send(\r\n      EMAILJS_SERVICE_ID,\r\n      EMAILJS_SPLIT_TEMPLATE_ID,\r\n      templateParams\r\n    );\r\n    \r\n    console.log('ðŸ“§ Email sent successfully!', response);\r\n    console.log('ðŸ“§ Response status:', response.status);\r\n    console.log('ðŸ“§ Response text:', response.text);\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n      response: response\r\n    };\r\n  } catch (error) {\r\n    console.error('ðŸ“§ Error sending split expense email:', error);\r\n    \r\n    // Provide detailed error information\r\n    let errorMessage = 'Failed to send email';\r\n    \r\n    if (error.text) {\r\n      errorMessage += `: ${error.text}`;\r\n    }\r\n    \r\n    if (error.status) {\r\n      errorMessage += ` (Status: ${error.status})`;\r\n    }\r\n    \r\n    // Additional debugging for common issues\r\n    if (error.message && error.message.includes('Network Error')) {\r\n      console.error('ðŸ“§ Network issue detected. Check your internet connection.');\r\n      errorMessage = 'Network error: Check your internet connection';\r\n    }\r\n    \r\n    if (error.message && error.message.includes('Invalid ID format')) {\r\n      console.error('ðŸ“§ EmailJS ID format issue detected.');\r\n      errorMessage = 'EmailJS configuration error: Invalid ID format';\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: errorMessage,\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Send a test email to verify the configuration\r\n * @param {object} user - The user object containing email and name\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\r\nexport const sendTestEmail = async (user) => {\r\n  if (!user || !user.email) {\r\n    console.error('ðŸ“§ Cannot send test email: User email is missing', user);\r\n    return {\r\n      success: false,\r\n      message: 'User email is missing'\r\n    };\r\n  }\r\n  \r\n  return sendBudgetAlertEmail(\r\n    user,\r\n    'Test Category',\r\n    100.00, // Budget\r\n    150.00  // Spent\r\n  );\r\n};\r\n\r\n/**\r\n * Send a test split expense email to verify the configuration\r\n * @param {object} user - The user object containing email and name\r\n * @returns {Promise<object>} - Result of the email sending operation\r\n */\r\nexport const sendTestSplitEmail = async (user) => {\r\n  if (!user || !user.email) {\r\n    console.error('ðŸ“§ Cannot send test split email: User email is missing', user);\r\n    return {\r\n      success: false,\r\n      message: 'User email is missing'\r\n    };\r\n  }\r\n  \r\n  // Create a test participant (the user themselves)\r\n  const participant = {\r\n    name: user.name || user.email.split('@')[0],\r\n    email: user.email,\r\n    shareAmount: 25.00\r\n  };\r\n  \r\n  // Create a test split expense\r\n  const testSplitExpense = {\r\n    description: 'Test Split Expense',\r\n    totalAmount: 100.00,\r\n    date: new Date().toISOString(),\r\n    category: 'Dining'\r\n  };\r\n  \r\n  // Include the name and email parameters for From Name and Reply To\r\n  const customParams = {\r\n    name: 'FinTrack',\r\n    email: user.email\r\n  };\r\n  \r\n  return sendSplitExpenseEmail(\r\n    participant,\r\n    testSplitExpense,\r\n    user,\r\n    false, // Not a reminder\r\n    customParams\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}