{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence-tracker\\\\src\\\\context\\\\ExpenseContext.js\",\n  _s = $RefreshSig$();\n// src/context/ExpenseContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { sendBudgetAlertEmail } from '../services/EmailService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ExpenseContext = /*#__PURE__*/createContext();\nexport const ExpenseProvider = ({\n  children\n}) => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const [budgets, setBudgets] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [emailStatus, setEmailStatus] = useState({\n    sent: false,\n    error: null\n  });\n  const [categories, setCategories] = useState([]);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n\n  // Generate unique storage keys for current user\n  const getUserStorageKey = key => {\n    if (!currentUser) return key;\n    return `${key}_${currentUser.id}`;\n  };\n\n  // Load data from localStorage on initial render or when user changes\n  useEffect(() => {\n    if (currentUser) {\n      const savedExpenses = JSON.parse(localStorage.getItem(getUserStorageKey('expenses'))) || [];\n      const savedIncomes = JSON.parse(localStorage.getItem(getUserStorageKey('incomes'))) || [];\n      const savedBudgets = JSON.parse(localStorage.getItem(getUserStorageKey('budgets'))) || {};\n      const savedAlerts = JSON.parse(localStorage.getItem(getUserStorageKey('alerts'))) || [];\n      const savedCategories = JSON.parse(localStorage.getItem(`categories_${currentUser.id}`)) || ['Food', 'Housing', 'Transportation', 'Entertainment', 'Utilities', 'Healthcare', 'Shopping', 'Personal Care', 'Education', 'Other'];\n      setExpenses(savedExpenses);\n      setIncomes(savedIncomes);\n      setBudgets(savedBudgets);\n      setAlerts(savedAlerts);\n      setCategories(savedCategories);\n    } else {\n      // Clear data when logged out\n      setExpenses([]);\n      setIncomes([]);\n      setBudgets({});\n      setAlerts([]);\n      setCategories([]);\n    }\n  }, [currentUser]);\n\n  // Save data to localStorage whenever it changes\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem(getUserStorageKey('expenses'), JSON.stringify(expenses));\n    }\n  }, [expenses, currentUser]);\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem(getUserStorageKey('incomes'), JSON.stringify(incomes));\n    }\n  }, [incomes, currentUser]);\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem(getUserStorageKey('budgets'), JSON.stringify(budgets));\n    }\n  }, [budgets, currentUser]);\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem(getUserStorageKey('alerts'), JSON.stringify(alerts));\n    }\n  }, [alerts, currentUser]);\n\n  // Save categories to localStorage whenever they change\n  useEffect(() => {\n    if (currentUser && categories.length > 0) {\n      localStorage.setItem(`categories_${currentUser.id}`, JSON.stringify(categories));\n    }\n  }, [categories, currentUser]);\n\n  // Clear email status after some time\n  useEffect(() => {\n    if (emailStatus.sent || emailStatus.error) {\n      const timer = setTimeout(() => {\n        setEmailStatus({\n          sent: false,\n          error: null\n        });\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [emailStatus]);\n\n  // Add a new expense\n  const addExpense = expense => {\n    const newExpense = {\n      ...expense,\n      id: Date.now(),\n      date: expense.date || new Date().toISOString().slice(0, 10),\n      userId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n    };\n    setExpenses(prevExpenses => {\n      const updatedExpenses = [...prevExpenses, newExpense];\n\n      // Check for budget alerts after state update\n      setTimeout(() => {\n        checkBudgetAlerts(newExpense, updatedExpenses);\n      }, 0);\n      return updatedExpenses;\n    });\n  };\n\n  // Add a new income\n  const addIncome = income => {\n    const newIncome = {\n      ...income,\n      id: Date.now(),\n      date: income.date || new Date().toISOString().slice(0, 10),\n      userId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n    };\n    setIncomes([...incomes, newIncome]);\n  };\n\n  // Delete an expense\n  const deleteExpense = id => {\n    setExpenses(expenses.filter(expense => expense.id !== id));\n  };\n\n  // Delete an income\n  const deleteIncome = id => {\n    setIncomes(incomes.filter(income => income.id !== id));\n  };\n\n  // Update budget settings\n  const updateBudget = (category, amount) => {\n    setBudgets({\n      ...budgets,\n      [category]: amount\n    });\n  };\n\n  // Delete a budget\n  const deleteBudget = category => {\n    const updatedBudgets = {\n      ...budgets\n    };\n    delete updatedBudgets[category];\n    setBudgets(updatedBudgets);\n  };\n\n  // Check if adding this expense exceeds the budget\n  const checkBudgetAlerts = (newExpense, allExpenses = expenses) => {\n    const {\n      category\n    } = newExpense;\n    if (budgets[category]) {\n      // Get current month expenses for this category\n      const currentDate = new Date();\n      const currentMonth = currentDate.getMonth();\n      const currentYear = currentDate.getFullYear();\n      const monthlyExpenses = allExpenses.filter(expense => {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear && expense.category === category && expense.userId === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n      });\n      const totalSpent = monthlyExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n      const budgetAmount = parseFloat(budgets[category]);\n      if (totalSpent > budgetAmount) {\n        var _currentUser$preferen;\n        const newAlert = {\n          id: Date.now(),\n          message: `Budget alert: You've exceeded your ${category} budget of $${budgetAmount.toFixed(2)}`,\n          category: category,\n          read: false,\n          date: new Date().toISOString(),\n          userId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id\n        };\n        setAlerts(prevAlerts => [...prevAlerts, newAlert]);\n\n        // Send email alert if user has enabled email notifications\n        if ((currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$preferen = currentUser.preferences) === null || _currentUser$preferen === void 0 ? void 0 : _currentUser$preferen.emailNotifications) !== false) {\n          console.log(\"Attempting to send email to user:\", currentUser);\n\n          // Verify currentUser has email\n          if (!currentUser.email) {\n            console.error(\"User has no email address:\", currentUser);\n            setEmailStatus({\n              sent: false,\n              error: \"No email address found for user\"\n            });\n            return;\n          }\n          sendBudgetAlertEmail(currentUser, category, budgetAmount, totalSpent).then(result => {\n            console.log('Email alert result:', result);\n            setEmailStatus({\n              sent: result.success,\n              error: result.success ? null : result.message\n            });\n          }).catch(error => {\n            console.error('Failed to send email alert:', error);\n            setEmailStatus({\n              sent: false,\n              error: error.message\n            });\n          });\n        }\n      }\n    }\n  };\n\n  // Mark an alert as read\n  const markAlertAsRead = id => {\n    setAlerts(alerts.map(alert => alert.id === id ? {\n      ...alert,\n      read: true\n    } : alert));\n  };\n\n  // Get available categories\n  const getCategories = () => {\n    return categories;\n  };\n\n  // Add a category\n  const addCategory = category => {\n    if (!categories.includes(category)) {\n      setCategories([...categories, category]);\n      return true;\n    }\n    return false;\n  };\n\n  // Delete a category\n  const deleteCategory = category => {\n    // Don't allow deleting the \"Other\" category\n    if (category === 'Other') return false;\n\n    // Check if the category is in use\n    const isCategoryInUse = expenses.some(expense => expense.category === category);\n    if (isCategoryInUse) return false;\n    setCategories(categories.filter(cat => cat !== category));\n\n    // Also delete any budget for this category\n    if (budgets[category]) {\n      deleteBudget(category);\n    }\n    return true;\n  };\n\n  // Edit a category\n  const editCategory = (oldCategory, newCategory) => {\n    // Don't allow editing the \"Other\" category\n    if (oldCategory === 'Other') return false;\n\n    // Check if the new category name already exists\n    if (categories.includes(newCategory) && newCategory !== oldCategory) return false;\n\n    // Check if the category is in use\n    const isCategoryInUse = expenses.some(expense => expense.category === oldCategory);\n    if (isCategoryInUse) return false;\n    setCategories(categories.map(cat => cat === oldCategory ? newCategory : cat));\n\n    // Update any budget for this category\n    if (budgets[oldCategory]) {\n      const budgetAmount = budgets[oldCategory];\n      deleteBudget(oldCategory);\n      updateBudget(newCategory, budgetAmount);\n    }\n    return true;\n  };\n  return /*#__PURE__*/_jsxDEV(ExpenseContext.Provider, {\n    value: {\n      expenses,\n      addExpense,\n      deleteExpense,\n      incomes,\n      addIncome,\n      deleteIncome,\n      budgets,\n      updateBudget,\n      deleteBudget,\n      alerts,\n      markAlertAsRead,\n      emailStatus,\n      categories,\n      getCategories,\n      addCategory,\n      deleteCategory,\n      editCategory\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseProvider, \"0dkTWPBxw3cYsD1yf5+mOJO4E+U=\");\n_c = ExpenseProvider;\nvar _c;\n$RefreshReg$(_c, \"ExpenseProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AuthContext","sendBudgetAlertEmail","jsxDEV","_jsxDEV","ExpenseContext","ExpenseProvider","children","_s","expenses","setExpenses","incomes","setIncomes","budgets","setBudgets","alerts","setAlerts","emailStatus","setEmailStatus","sent","error","categories","setCategories","currentUser","getUserStorageKey","key","id","savedExpenses","JSON","parse","localStorage","getItem","savedIncomes","savedBudgets","savedAlerts","savedCategories","setItem","stringify","length","timer","setTimeout","clearTimeout","addExpense","expense","newExpense","Date","now","date","toISOString","slice","userId","prevExpenses","updatedExpenses","checkBudgetAlerts","addIncome","income","newIncome","deleteExpense","filter","deleteIncome","updateBudget","category","amount","deleteBudget","updatedBudgets","allExpenses","currentDate","currentMonth","getMonth","currentYear","getFullYear","monthlyExpenses","expenseDate","totalSpent","reduce","sum","parseFloat","budgetAmount","_currentUser$preferen","newAlert","message","toFixed","read","prevAlerts","preferences","emailNotifications","console","log","email","then","result","success","catch","markAlertAsRead","map","alert","getCategories","addCategory","includes","deleteCategory","isCategoryInUse","some","cat","editCategory","oldCategory","newCategory","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker/src/context/ExpenseContext.js"],"sourcesContent":["// src/context/ExpenseContext.js\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from './AuthContext';\r\nimport { sendBudgetAlertEmail } from '../services/EmailService';\r\n\r\nexport const ExpenseContext = createContext();\r\n\r\nexport const ExpenseProvider = ({ children }) => {\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [incomes, setIncomes] = useState([]);\r\n  const [budgets, setBudgets] = useState({});\r\n  const [alerts, setAlerts] = useState([]);\r\n  const [emailStatus, setEmailStatus] = useState({ sent: false, error: null });\r\n  const [categories, setCategories] = useState([]);\r\n  \r\n  const { currentUser } = useContext(AuthContext);\r\n  \r\n  // Generate unique storage keys for current user\r\n  const getUserStorageKey = (key) => {\r\n    if (!currentUser) return key;\r\n    return `${key}_${currentUser.id}`;\r\n  };\r\n  \r\n  // Load data from localStorage on initial render or when user changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      const savedExpenses = JSON.parse(localStorage.getItem(getUserStorageKey('expenses'))) || [];\r\n      const savedIncomes = JSON.parse(localStorage.getItem(getUserStorageKey('incomes'))) || [];\r\n      const savedBudgets = JSON.parse(localStorage.getItem(getUserStorageKey('budgets'))) || {};\r\n      const savedAlerts = JSON.parse(localStorage.getItem(getUserStorageKey('alerts'))) || [];\r\n      const savedCategories = JSON.parse(localStorage.getItem(`categories_${currentUser.id}`)) || [\r\n        'Food', 'Housing', 'Transportation', 'Entertainment', \r\n        'Utilities', 'Healthcare', 'Shopping', 'Personal Care', 'Education', 'Other'\r\n      ];\r\n      \r\n      setExpenses(savedExpenses);\r\n      setIncomes(savedIncomes);\r\n      setBudgets(savedBudgets);\r\n      setAlerts(savedAlerts);\r\n      setCategories(savedCategories);\r\n    } else {\r\n      // Clear data when logged out\r\n      setExpenses([]);\r\n      setIncomes([]);\r\n      setBudgets({});\r\n      setAlerts([]);\r\n      setCategories([]);\r\n    }\r\n  }, [currentUser]);\r\n  \r\n  // Save data to localStorage whenever it changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem(getUserStorageKey('expenses'), JSON.stringify(expenses));\r\n    }\r\n  }, [expenses, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem(getUserStorageKey('incomes'), JSON.stringify(incomes));\r\n    }\r\n  }, [incomes, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem(getUserStorageKey('budgets'), JSON.stringify(budgets));\r\n    }\r\n  }, [budgets, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem(getUserStorageKey('alerts'), JSON.stringify(alerts));\r\n    }\r\n  }, [alerts, currentUser]);\r\n  \r\n  // Save categories to localStorage whenever they change\r\n  useEffect(() => {\r\n    if (currentUser && categories.length > 0) {\r\n      localStorage.setItem(`categories_${currentUser.id}`, JSON.stringify(categories));\r\n    }\r\n  }, [categories, currentUser]);\r\n  \r\n  // Clear email status after some time\r\n  useEffect(() => {\r\n    if (emailStatus.sent || emailStatus.error) {\r\n      const timer = setTimeout(() => {\r\n        setEmailStatus({ sent: false, error: null });\r\n      }, 5000);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [emailStatus]);\r\n  \r\n  // Add a new expense\r\n  const addExpense = (expense) => {\r\n    const newExpense = {\r\n      ...expense,\r\n      id: Date.now(),\r\n      date: expense.date || new Date().toISOString().slice(0, 10),\r\n      userId: currentUser?.id\r\n    };\r\n    \r\n    setExpenses(prevExpenses => {\r\n      const updatedExpenses = [...prevExpenses, newExpense];\r\n      \r\n      // Check for budget alerts after state update\r\n      setTimeout(() => {\r\n        checkBudgetAlerts(newExpense, updatedExpenses);\r\n      }, 0);\r\n      \r\n      return updatedExpenses;\r\n    });\r\n  };\r\n  \r\n  // Add a new income\r\n  const addIncome = (income) => {\r\n    const newIncome = {\r\n      ...income,\r\n      id: Date.now(),\r\n      date: income.date || new Date().toISOString().slice(0, 10),\r\n      userId: currentUser?.id\r\n    };\r\n    \r\n    setIncomes([...incomes, newIncome]);\r\n  };\r\n  \r\n  // Delete an expense\r\n  const deleteExpense = (id) => {\r\n    setExpenses(expenses.filter(expense => expense.id !== id));\r\n  };\r\n  \r\n  // Delete an income\r\n  const deleteIncome = (id) => {\r\n    setIncomes(incomes.filter(income => income.id !== id));\r\n  };\r\n  \r\n  // Update budget settings\r\n  const updateBudget = (category, amount) => {\r\n    setBudgets({\r\n      ...budgets,\r\n      [category]: amount\r\n    });\r\n  };\r\n  \r\n  // Delete a budget\r\n  const deleteBudget = (category) => {\r\n    const updatedBudgets = { ...budgets };\r\n    delete updatedBudgets[category];\r\n    setBudgets(updatedBudgets);\r\n  };\r\n  \r\n  // Check if adding this expense exceeds the budget\r\n  const checkBudgetAlerts = (newExpense, allExpenses = expenses) => {\r\n    const { category } = newExpense;\r\n    \r\n    if (budgets[category]) {\r\n      // Get current month expenses for this category\r\n      const currentDate = new Date();\r\n      const currentMonth = currentDate.getMonth();\r\n      const currentYear = currentDate.getFullYear();\r\n      \r\n      const monthlyExpenses = allExpenses.filter(expense => {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getMonth() === currentMonth && \r\n               expenseDate.getFullYear() === currentYear &&\r\n               expense.category === category &&\r\n               expense.userId === currentUser?.id;\r\n      });\r\n      \r\n      const totalSpent = monthlyExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\r\n      const budgetAmount = parseFloat(budgets[category]);\r\n      \r\n      if (totalSpent > budgetAmount) {\r\n        const newAlert = {\r\n          id: Date.now(),\r\n          message: `Budget alert: You've exceeded your ${category} budget of $${budgetAmount.toFixed(2)}`,\r\n          category: category,\r\n          read: false,\r\n          date: new Date().toISOString(),\r\n          userId: currentUser?.id\r\n        };\r\n        \r\n        setAlerts(prevAlerts => [...prevAlerts, newAlert]);\r\n        \r\n        // Send email alert if user has enabled email notifications\r\n        if (currentUser?.preferences?.emailNotifications !== false) {\r\n          console.log(\"Attempting to send email to user:\", currentUser);\r\n          \r\n          // Verify currentUser has email\r\n          if (!currentUser.email) {\r\n            console.error(\"User has no email address:\", currentUser);\r\n            setEmailStatus({ \r\n              sent: false, \r\n              error: \"No email address found for user\" \r\n            });\r\n            return;\r\n          }\r\n          \r\n          sendBudgetAlertEmail(\r\n            currentUser,\r\n            category,\r\n            budgetAmount,\r\n            totalSpent\r\n          ).then(result => {\r\n            console.log('Email alert result:', result);\r\n            setEmailStatus({ \r\n              sent: result.success, \r\n              error: result.success ? null : result.message \r\n            });\r\n          }).catch(error => {\r\n            console.error('Failed to send email alert:', error);\r\n            setEmailStatus({ \r\n              sent: false, \r\n              error: error.message \r\n            });\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Mark an alert as read\r\n  const markAlertAsRead = (id) => {\r\n    setAlerts(alerts.map(alert => \r\n      alert.id === id ? { ...alert, read: true } : alert\r\n    ));\r\n  };\r\n  \r\n  // Get available categories\r\n  const getCategories = () => {\r\n    return categories;\r\n  };\r\n  \r\n  // Add a category\r\n  const addCategory = (category) => {\r\n    if (!categories.includes(category)) {\r\n      setCategories([...categories, category]);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  // Delete a category\r\n  const deleteCategory = (category) => {\r\n    // Don't allow deleting the \"Other\" category\r\n    if (category === 'Other') return false;\r\n    \r\n    // Check if the category is in use\r\n    const isCategoryInUse = expenses.some(expense => expense.category === category);\r\n    if (isCategoryInUse) return false;\r\n    \r\n    setCategories(categories.filter(cat => cat !== category));\r\n    \r\n    // Also delete any budget for this category\r\n    if (budgets[category]) {\r\n      deleteBudget(category);\r\n    }\r\n    \r\n    return true;\r\n  };\r\n  \r\n  // Edit a category\r\n  const editCategory = (oldCategory, newCategory) => {\r\n    // Don't allow editing the \"Other\" category\r\n    if (oldCategory === 'Other') return false;\r\n    \r\n    // Check if the new category name already exists\r\n    if (categories.includes(newCategory) && newCategory !== oldCategory) return false;\r\n    \r\n    // Check if the category is in use\r\n    const isCategoryInUse = expenses.some(expense => expense.category === oldCategory);\r\n    if (isCategoryInUse) return false;\r\n    \r\n    setCategories(categories.map(cat => cat === oldCategory ? newCategory : cat));\r\n    \r\n    // Update any budget for this category\r\n    if (budgets[oldCategory]) {\r\n      const budgetAmount = budgets[oldCategory];\r\n      deleteBudget(oldCategory);\r\n      updateBudget(newCategory, budgetAmount);\r\n    }\r\n    \r\n    return true;\r\n  };\r\n  \r\n  return (\r\n    <ExpenseContext.Provider \r\n      value={{ \r\n        expenses, \r\n        addExpense, \r\n        deleteExpense, \r\n        incomes, \r\n        addIncome,\r\n        deleteIncome,\r\n        budgets, \r\n        updateBudget,\r\n        deleteBudget,\r\n        alerts,\r\n        markAlertAsRead,\r\n        emailStatus,\r\n        categories,\r\n        getCategories,\r\n        addCategory,\r\n        deleteCategory,\r\n        editCategory\r\n      }}>\r\n      {children}\r\n    </ExpenseContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}