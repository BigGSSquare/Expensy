{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence-tracker\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport { ExpenseContext } from '../context/ExpenseContext';\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\nimport BudgetAlerts from './BudgetAlerts';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    expenses,\n    budgets,\n    alerts\n  } = useContext(ExpenseContext);\n  const [chartData, setChartData] = useState([]);\n  const [categoryData, setCategoryData] = useState([]);\n  const [timeframe, setTimeframe] = useState('month');\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28AD3', '#FF6B6B', '#4ECDC4'];\n  useEffect(() => {\n    prepareChartData();\n    prepareCategoryData();\n  }, [expenses, timeframe]);\n  const prepareChartData = () => {\n    if (expenses.length === 0) return;\n    const now = new Date();\n    let filteredExpenses = [];\n    if (timeframe === 'week') {\n      // Last 7 days\n      const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      filteredExpenses = expenses.filter(expense => new Date(expense.date) >= lastWeek);\n    } else if (timeframe === 'month') {\n      // Current month\n      filteredExpenses = expenses.filter(expense => {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getMonth() === now.getMonth() && expenseDate.getFullYear() === now.getFullYear();\n      });\n    } else if (timeframe === 'year') {\n      // Current year\n      filteredExpenses = expenses.filter(expense => {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getFullYear() === now.getFullYear();\n      });\n    }\n\n    // Group by date\n    const groupedData = {};\n    filteredExpenses.forEach(expense => {\n      const date = expense.date;\n      if (!groupedData[date]) {\n        groupedData[date] = 0;\n      }\n      groupedData[date] += parseFloat(expense.amount);\n    });\n\n    // Convert to array for recharts\n    const chartDataArray = Object.keys(groupedData).sort().map(date => ({\n      date,\n      amount: groupedData[date]\n    }));\n    setChartData(chartDataArray);\n  };\n  const prepareCategoryData = () => {\n    if (expenses.length === 0) return;\n    const now = new Date();\n    let filteredExpenses = [];\n    if (timeframe === 'week') {\n      const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      filteredExpenses = expenses.filter(expense => new Date(expense.date) >= lastWeek);\n    } else if (timeframe === 'month') {\n      filteredExpenses = expenses.filter(expense => {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getMonth() === now.getMonth() && expenseDate.getFullYear() === now.getFullYear();\n      });\n    } else if (timeframe === 'year') {\n      filteredExpenses = expenses.filter(expense => {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getFullYear() === now.getFullYear();\n      });\n    }\n\n    // Group by category\n    const categoryTotals = {};\n    filteredExpenses.forEach(expense => {\n      const {\n        category,\n        amount\n      } = expense;\n      if (!categoryTotals[category]) {\n        categoryTotals[category] = 0;\n      }\n      categoryTotals[category] += parseFloat(amount);\n    });\n\n    // Convert to array for recharts\n    const categoryDataArray = Object.keys(categoryTotals).map(category => ({\n      name: category,\n      value: categoryTotals[category]\n    }));\n    setCategoryData(categoryDataArray);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Expense Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), alerts.filter(alert => !alert.read).length > 0 && /*#__PURE__*/_jsxDEV(BudgetAlerts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeframe-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'week' ? 'active' : '',\n        onClick: () => setTimeframe('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'month' ? 'active' : '',\n        onClick: () => setTimeframe('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: timeframe === 'year' ? 'active' : '',\n        onClick: () => setTimeframe('year'),\n        children: \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Spending Over Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), chartData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: chartData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => [`$${value}`, 'Amount']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"amount\",\n            stroke: \"#8884d8\",\n            activeDot: {\n              r: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for the selected timeframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Spending by Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), categoryData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: categoryData,\n              cx: \"50%\",\n              cy: \"50%\",\n              labelLine: true,\n              outerRadius: 80,\n              fill: \"#8884d8\",\n              dataKey: \"value\",\n              label: ({\n                name,\n                percent\n              }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n              children: categoryData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: COLORS[index % COLORS.length]\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Amount']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No data available for the selected timeframe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Budget vs. Actual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), categoryData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: categoryData.map(item => ({\n              name: item.name,\n              actual: item.value,\n              budget: budgets[item.name] || 0\n            })),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Amount']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"actual\",\n              fill: \"#FF8042\",\n              name: \"Actual\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"budget\",\n              fill: \"#8884d8\",\n              name: \"Budget\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No data available for the selected timeframe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recent-expenses\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recent Expenses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"expenses-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: expenses.sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5).map(expense => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: expense.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: expense.category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: expense.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"amount\",\n              children: [\"$\", parseFloat(expense.amount).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 19\n            }, this)]\n          }, expense.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"SSv5KaCcmehGMalEdDf+r7X9xZo=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useContext","useState","useEffect","ExpenseContext","LineChart","Line","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","BudgetAlerts","jsxDEV","_jsxDEV","Dashboard","_s","expenses","budgets","alerts","chartData","setChartData","categoryData","setCategoryData","timeframe","setTimeframe","COLORS","prepareChartData","prepareCategoryData","length","now","Date","filteredExpenses","lastWeek","getTime","filter","expense","date","expenseDate","getMonth","getFullYear","groupedData","forEach","parseFloat","amount","chartDataArray","Object","keys","sort","map","categoryTotals","category","categoryDataArray","name","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","alert","read","onClick","width","height","data","strokeDasharray","dataKey","formatter","type","stroke","activeDot","r","cx","cy","labelLine","outerRadius","fill","label","percent","toFixed","entry","index","item","actual","budget","a","b","slice","description","id","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence-tracker/src/components/Dashboard.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { ExpenseContext } from '../context/ExpenseContext';\r\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\r\nimport BudgetAlerts from './BudgetAlerts';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard = () => {\r\n  const { expenses, budgets, alerts } = useContext(ExpenseContext);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [categoryData, setCategoryData] = useState([]);\r\n  const [timeframe, setTimeframe] = useState('month');\r\n  \r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28AD3', '#FF6B6B', '#4ECDC4'];\r\n  \r\n  useEffect(() => {\r\n    prepareChartData();\r\n    prepareCategoryData();\r\n  }, [expenses, timeframe]);\r\n  \r\n  const prepareChartData = () => {\r\n    if (expenses.length === 0) return;\r\n    \r\n    const now = new Date();\r\n    let filteredExpenses = [];\r\n    \r\n    if (timeframe === 'week') {\r\n      // Last 7 days\r\n      const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n      filteredExpenses = expenses.filter(expense => new Date(expense.date) >= lastWeek);\r\n    } else if (timeframe === 'month') {\r\n      // Current month\r\n      filteredExpenses = expenses.filter(expense => {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getMonth() === now.getMonth() && \r\n               expenseDate.getFullYear() === now.getFullYear();\r\n      });\r\n    } else if (timeframe === 'year') {\r\n      // Current year\r\n      filteredExpenses = expenses.filter(expense => {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getFullYear() === now.getFullYear();\r\n      });\r\n    }\r\n    \r\n    // Group by date\r\n    const groupedData = {};\r\n    \r\n    filteredExpenses.forEach(expense => {\r\n      const date = expense.date;\r\n      if (!groupedData[date]) {\r\n        groupedData[date] = 0;\r\n      }\r\n      groupedData[date] += parseFloat(expense.amount);\r\n    });\r\n    \r\n    // Convert to array for recharts\r\n    const chartDataArray = Object.keys(groupedData)\r\n      .sort()\r\n      .map(date => ({\r\n        date,\r\n        amount: groupedData[date]\r\n      }));\r\n      \r\n    setChartData(chartDataArray);\r\n  };\r\n  \r\n  const prepareCategoryData = () => {\r\n    if (expenses.length === 0) return;\r\n    \r\n    const now = new Date();\r\n    let filteredExpenses = [];\r\n    \r\n    if (timeframe === 'week') {\r\n      const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n      filteredExpenses = expenses.filter(expense => new Date(expense.date) >= lastWeek);\r\n    } else if (timeframe === 'month') {\r\n      filteredExpenses = expenses.filter(expense => {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getMonth() === now.getMonth() && \r\n               expenseDate.getFullYear() === now.getFullYear();\r\n      });\r\n    } else if (timeframe === 'year') {\r\n      filteredExpenses = expenses.filter(expense => {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getFullYear() === now.getFullYear();\r\n      });\r\n    }\r\n    \r\n    // Group by category\r\n    const categoryTotals = {};\r\n    \r\n    filteredExpenses.forEach(expense => {\r\n      const { category, amount } = expense;\r\n      if (!categoryTotals[category]) {\r\n        categoryTotals[category] = 0;\r\n      }\r\n      categoryTotals[category] += parseFloat(amount);\r\n    });\r\n    \r\n    // Convert to array for recharts\r\n    const categoryDataArray = Object.keys(categoryTotals).map(category => ({\r\n      name: category,\r\n      value: categoryTotals[category]\r\n    }));\r\n    \r\n    setCategoryData(categoryDataArray);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h1>Expense Dashboard</h1>\r\n      \r\n      {alerts.filter(alert => !alert.read).length > 0 && (\r\n        <BudgetAlerts />\r\n      )}\r\n      \r\n      <div className=\"timeframe-selector\">\r\n        <button \r\n          className={timeframe === 'week' ? 'active' : ''} \r\n          onClick={() => setTimeframe('week')}>\r\n          Week\r\n        </button>\r\n        <button \r\n          className={timeframe === 'month' ? 'active' : ''} \r\n          onClick={() => setTimeframe('month')}>\r\n          Month\r\n        </button>\r\n        <button \r\n          className={timeframe === 'year' ? 'active' : ''} \r\n          onClick={() => setTimeframe('year')}>\r\n          Year\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"chart-container\">\r\n        <h2>Spending Over Time</h2>\r\n        {chartData.length > 0 ? (\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <LineChart data={chartData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip formatter={(value) => [`$${value}`, 'Amount']} />\r\n              <Legend />\r\n              <Line type=\"monotone\" dataKey=\"amount\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        ) : (\r\n          <p>No data available for the selected timeframe</p>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"charts-row\">\r\n        <div className=\"chart-container\">\r\n          <h2>Spending by Category</h2>\r\n          {categoryData.length > 0 ? (\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <PieChart>\r\n                <Pie\r\n                  data={categoryData}\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  labelLine={true}\r\n                  outerRadius={80}\r\n                  fill=\"#8884d8\"\r\n                  dataKey=\"value\"\r\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                >\r\n                  {categoryData.map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                  ))}\r\n                </Pie>\r\n                <Tooltip formatter={(value) => [`$${value.toFixed(2)}`, 'Amount']} />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n          ) : (\r\n            <p>No data available for the selected timeframe</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"chart-container\">\r\n          <h2>Budget vs. Actual</h2>\r\n          {categoryData.length > 0 ? (\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <BarChart\r\n                data={categoryData.map(item => ({\r\n                  name: item.name,\r\n                  actual: item.value,\r\n                  budget: budgets[item.name] || 0\r\n                }))}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis />\r\n                <Tooltip formatter={(value) => [`$${value.toFixed(2)}`, 'Amount']} />\r\n                <Legend />\r\n                <Bar dataKey=\"actual\" fill=\"#FF8042\" name=\"Actual\" />\r\n                <Bar dataKey=\"budget\" fill=\"#8884d8\" name=\"Budget\" />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          ) : (\r\n            <p>No data available for the selected timeframe</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"recent-expenses\">\r\n        <h2>Recent Expenses</h2>\r\n        <table className=\"expenses-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Category</th>\r\n              <th>Description</th>\r\n              <th>Amount</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {expenses.sort((a, b) => new Date(b.date) - new Date(a.date))\r\n              .slice(0, 5)\r\n              .map(expense => (\r\n                <tr key={expense.id}>\r\n                  <td>{expense.date}</td>\r\n                  <td>{expense.category}</td>\r\n                  <td>{expense.description}</td>\r\n                  <td className=\"amount\">${parseFloat(expense.amount).toFixed(2)}</td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}