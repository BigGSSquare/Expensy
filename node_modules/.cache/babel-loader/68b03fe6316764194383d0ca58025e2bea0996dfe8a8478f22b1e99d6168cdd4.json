{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejit\\\\OneDrive\\\\Desktop\\\\expence tracker final\\\\expence-tracker\\\\src\\\\context\\\\ExpenseContext.js\",\n  _s = $RefreshSig$();\n// src/context/ExpenseContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { sendBudgetAlertEmail } from '../services/EmailService';\n// Import the receipt scanning service\nimport { scanReceiptImage, parseReceiptData } from '../services/ReceiptScanningService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ExpenseContext = /*#__PURE__*/createContext();\nexport const ExpenseProvider = ({\n  children\n}) => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const [budgets, setBudgets] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [emailStatus, setEmailStatus] = useState({\n    sent: false,\n    error: null\n  });\n  const [expenseCategories, setExpenseCategories] = useState([]);\n  const [incomeCategories, setIncomeCategories] = useState([]);\n  // Add new state for receipt scanning\n  const [receiptScanStatus, setReceiptScanStatus] = useState({\n    scanning: false,\n    error: null,\n    data: null\n  });\n  // Track receipt scan history\n  const [receiptScans, setReceiptScans] = useState([]);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n\n  // Default categories if none are found\n  const DEFAULT_EXPENSE_CATEGORIES = ['Food', 'Housing', 'Transportation', 'Entertainment', 'Utilities', 'Healthcare', 'Shopping', 'Personal Care', 'Education', 'Other'];\n  const DEFAULT_INCOME_CATEGORIES = ['Salary', 'Freelance', 'Investment', 'Gift', 'Business', 'Side Hustle', 'Rental', 'Other'];\n\n  // Generate unique storage keys for current user\n  const getUserStorageKey = key => {\n    if (!currentUser) return key;\n    return `${key}_${currentUser.id}`;\n  };\n\n  // Load data from localStorage on initial render or when user changes\n  useEffect(() => {\n    if (currentUser) {\n      try {\n        // Load expenses\n        const savedExpenses = JSON.parse(localStorage.getItem(getUserStorageKey('expenses'))) || [];\n        setExpenses(Array.isArray(savedExpenses) ? savedExpenses : []);\n\n        // Load incomes\n        const savedIncomes = JSON.parse(localStorage.getItem(getUserStorageKey('incomes'))) || [];\n        setIncomes(Array.isArray(savedIncomes) ? savedIncomes : []);\n\n        // Load budgets\n        const savedBudgets = JSON.parse(localStorage.getItem(getUserStorageKey('budgets'))) || {};\n        setBudgets(typeof savedBudgets === 'object' ? savedBudgets : {});\n\n        // Load alerts\n        const savedAlerts = JSON.parse(localStorage.getItem(getUserStorageKey('alerts'))) || [];\n        setAlerts(Array.isArray(savedAlerts) ? savedAlerts : []);\n\n        // Load expense categories\n        const savedExpenseCategories = JSON.parse(localStorage.getItem(getUserStorageKey('expenseCategories'))) || DEFAULT_EXPENSE_CATEGORIES;\n        setExpenseCategories(Array.isArray(savedExpenseCategories) ? savedExpenseCategories : DEFAULT_EXPENSE_CATEGORIES);\n\n        // Load income categories\n        const savedIncomeCategories = JSON.parse(localStorage.getItem(getUserStorageKey('incomeCategories'))) || DEFAULT_INCOME_CATEGORIES;\n        setIncomeCategories(Array.isArray(savedIncomeCategories) ? savedIncomeCategories : DEFAULT_INCOME_CATEGORIES);\n\n        // Load receipt scans\n        const savedReceiptScans = JSON.parse(localStorage.getItem(getUserStorageKey('receiptScans'))) || [];\n        setReceiptScans(Array.isArray(savedReceiptScans) ? savedReceiptScans : []);\n      } catch (error) {\n        console.error('Error loading data from localStorage:', error);\n        // Set defaults if there's an error\n        setExpenses([]);\n        setIncomes([]);\n        setBudgets({});\n        setAlerts([]);\n        setExpenseCategories(DEFAULT_EXPENSE_CATEGORIES);\n        setIncomeCategories(DEFAULT_INCOME_CATEGORIES);\n        setReceiptScans([]);\n      }\n    } else {\n      // Clear data when logged out\n      setExpenses([]);\n      setIncomes([]);\n      setBudgets({});\n      setAlerts([]);\n      setExpenseCategories(DEFAULT_EXPENSE_CATEGORIES);\n      setIncomeCategories(DEFAULT_INCOME_CATEGORIES);\n      setReceiptScans([]);\n    }\n  }, [currentUser]);\n\n  // Save data to localStorage whenever it changes\n  useEffect(() => {\n    if (currentUser && Array.isArray(expenses)) {\n      localStorage.setItem(getUserStorageKey('expenses'), JSON.stringify(expenses));\n    }\n  }, [expenses, currentUser]);\n  useEffect(() => {\n    if (currentUser && Array.isArray(incomes)) {\n      localStorage.setItem(getUserStorageKey('incomes'), JSON.stringify(incomes));\n    }\n  }, [incomes, currentUser]);\n  useEffect(() => {\n    if (currentUser && budgets && typeof budgets === 'object') {\n      localStorage.setItem(getUserStorageKey('budgets'), JSON.stringify(budgets));\n    }\n  }, [budgets, currentUser]);\n  useEffect(() => {\n    if (currentUser && Array.isArray(alerts)) {\n      localStorage.setItem(getUserStorageKey('alerts'), JSON.stringify(alerts));\n    }\n  }, [alerts, currentUser]);\n\n  // Save categories to localStorage whenever they change\n  useEffect(() => {\n    if (currentUser && Array.isArray(expenseCategories) && expenseCategories.length > 0) {\n      localStorage.setItem(getUserStorageKey('expenseCategories'), JSON.stringify(expenseCategories));\n    }\n  }, [expenseCategories, currentUser]);\n  useEffect(() => {\n    if (currentUser && Array.isArray(incomeCategories) && incomeCategories.length > 0) {\n      localStorage.setItem(getUserStorageKey('incomeCategories'), JSON.stringify(incomeCategories));\n    }\n  }, [incomeCategories, currentUser]);\n\n  // Save receipt scans to localStorage\n  useEffect(() => {\n    if (currentUser && Array.isArray(receiptScans)) {\n      localStorage.setItem(getUserStorageKey('receiptScans'), JSON.stringify(receiptScans));\n    }\n  }, [receiptScans, currentUser]);\n\n  // Clear email status after some time\n  useEffect(() => {\n    if (emailStatus.sent || emailStatus.error) {\n      const timer = setTimeout(() => {\n        setEmailStatus({\n          sent: false,\n          error: null\n        });\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [emailStatus]);\n\n  // Clear receipt scan data after processing\n  useEffect(() => {\n    if (receiptScanStatus.data && !receiptScanStatus.scanning) {\n      const timer = setTimeout(() => {\n        setReceiptScanStatus(prevState => ({\n          ...prevState,\n          data: null\n        }));\n      }, 30000); // Give user 30 seconds to review before clearing\n\n      return () => clearTimeout(timer);\n    }\n  }, [receiptScanStatus]);\n\n  // Add a new expense with validation\n  const addExpense = expense => {\n    if (!currentUser) return false; // Don't proceed if not logged in\n\n    try {\n      // Validate expense data\n      if (!expense.category) {\n        console.error('Missing category in expense');\n        return false;\n      }\n      const amount = parseFloat(expense.amount);\n      if (isNaN(amount) || amount <= 0) {\n        console.error('Invalid expense amount:', expense.amount);\n        return false;\n      }\n\n      // Ensure we have a valid date\n      let expenseDate = expense.date;\n      if (!expenseDate) {\n        expenseDate = new Date().toISOString().slice(0, 10);\n      }\n\n      // Create new expense object\n      const newExpense = {\n        ...expense,\n        amount: amount,\n        id: Date.now(),\n        date: expenseDate,\n        userId: currentUser.id,\n        // Add a flag to identify if this expense was added via receipt scanning\n        fromReceipt: expense.fromReceipt || false,\n        // Store receipt image reference if available\n        receiptImageUrl: expense.receiptImageUrl || null,\n        // Store receipt scan data ID if available\n        receiptScanId: expense.receiptScanId || null\n      };\n      setExpenses(prevExpenses => {\n        const updatedExpenses = [...prevExpenses, newExpense];\n\n        // Check for budget alerts after state update\n        setTimeout(() => {\n          checkBudgetAlerts(newExpense, updatedExpenses);\n        }, 0);\n        return updatedExpenses;\n      });\n      return true;\n    } catch (error) {\n      console.error('Error adding expense:', error);\n      return false;\n    }\n  };\n\n  // New function to handle receipt scanning\n  const scanReceipt = async imageFile => {\n    if (!currentUser) return {\n      success: false,\n      error: 'User not logged in'\n    };\n    if (!imageFile) {\n      setReceiptScanStatus({\n        scanning: false,\n        error: 'No image provided',\n        data: null\n      });\n      return {\n        success: false,\n        error: 'No image provided'\n      };\n    }\n    try {\n      var _parsedData$items;\n      // Set scanning status\n      setReceiptScanStatus({\n        scanning: true,\n        error: null,\n        data: null\n      });\n\n      // Call the receipt scanning service\n      const scanResult = await scanReceiptImage(imageFile);\n      if (!scanResult || !scanResult.success) {\n        const errorMessage = (scanResult === null || scanResult === void 0 ? void 0 : scanResult.error) || 'Failed to scan receipt';\n        setReceiptScanStatus({\n          scanning: false,\n          error: errorMessage,\n          data: null\n        });\n        return {\n          success: false,\n          error: errorMessage\n        };\n      }\n\n      // Process the scanned data\n      const parsedData = parseReceiptData(scanResult);\n      if (!parsedData) {\n        setReceiptScanStatus({\n          scanning: false,\n          error: 'Failed to parse receipt data',\n          data: null\n        });\n        return {\n          success: false,\n          error: 'Failed to parse receipt data'\n        };\n      }\n\n      // Create a scan record\n      const scanId = Date.now();\n      const scanRecord = {\n        id: scanId,\n        date: new Date().toISOString(),\n        rawData: scanResult,\n        parsedData: parsedData,\n        userId: currentUser.id,\n        status: 'pending',\n        // pending, applied, rejected\n        imageUrl: scanResult.imageUrl\n      };\n\n      // Store the scan record\n      setReceiptScans(prevScans => [...prevScans, scanRecord]);\n\n      // Prepare the extracted data for the UI\n      const extractedExpense = {\n        amount: parsedData.amount,\n        description: parsedData.merchantName || 'Receipt expense',\n        category: mapVendorToCategory(parsedData.merchantName || ''),\n        date: parsedData.date || new Date().toISOString().slice(0, 10),\n        fromReceipt: true,\n        receiptImageUrl: parsedData.imageUrl || null,\n        receiptScanId: scanId,\n        notes: `Receipt from ${parsedData.merchantName || 'unknown vendor'}${((_parsedData$items = parsedData.items) === null || _parsedData$items === void 0 ? void 0 : _parsedData$items.length) > 0 ? `, Items: ${parsedData.items.join(', ')}` : ''}`\n      };\n\n      // Update scan status with the extracted data\n      setReceiptScanStatus({\n        scanning: false,\n        error: null,\n        data: extractedExpense\n      });\n      return {\n        success: true,\n        data: extractedExpense,\n        scanId\n      };\n    } catch (error) {\n      console.error('Error scanning receipt:', error);\n      setReceiptScanStatus({\n        scanning: false,\n        error: error.message || 'Error scanning receipt',\n        data: null\n      });\n      return {\n        success: false,\n        error: error.message || 'Error scanning receipt'\n      };\n    }\n  };\n\n  // Function to add the expense from a scanned receipt\n  const addExpenseFromReceipt = async (expenseData, modifications = {}) => {\n    if (!currentUser) return false;\n    try {\n      // Combine scanned data with any user modifications\n      const finalExpenseData = {\n        ...expenseData,\n        ...modifications,\n        fromReceipt: true\n      };\n\n      // Use the existing addExpense function\n      const result = addExpense(finalExpenseData);\n      if (result && finalExpenseData.receiptScanId) {\n        // Update the scan record status\n        setReceiptScans(prevScans => prevScans.map(scan => scan.id === finalExpenseData.receiptScanId ? {\n          ...scan,\n          status: 'applied'\n        } : scan));\n\n        // Clear the scanned data after successful addition\n        setReceiptScanStatus(prevState => ({\n          ...prevState,\n          data: null\n        }));\n      }\n      return result;\n    } catch (error) {\n      console.error('Error adding expense from receipt:', error);\n      return false;\n    }\n  };\n\n  // Function to reject a scanned receipt\n  const rejectScannedReceipt = scanId => {\n    if (!scanId) return false;\n    try {\n      var _receiptScanStatus$da;\n      // Update the scan record status\n      setReceiptScans(prevScans => prevScans.map(scan => scan.id === scanId ? {\n        ...scan,\n        status: 'rejected'\n      } : scan));\n\n      // Clear any pending scan data with this ID\n      if (((_receiptScanStatus$da = receiptScanStatus.data) === null || _receiptScanStatus$da === void 0 ? void 0 : _receiptScanStatus$da.receiptScanId) === scanId) {\n        setReceiptScanStatus({\n          scanning: false,\n          error: null,\n          data: null\n        });\n      }\n      return true;\n    } catch (error) {\n      console.error('Error rejecting scanned receipt:', error);\n      return false;\n    }\n  };\n\n  // Helper function to map vendor names to appropriate categories\n  const mapVendorToCategory = vendorName => {\n    const vendorNameLower = vendorName.toLowerCase();\n\n    // Simple mapping logic - can be expanded based on common vendors\n    if (!vendorName) return 'Other';\n    const categoryMappings = {\n      'restaurant': 'Food',\n      'café': 'Food',\n      'cafe': 'Food',\n      'grocery': 'Food',\n      'supermarket': 'Food',\n      'market': 'Food',\n      'gas': 'Transportation',\n      'fuel': 'Transportation',\n      'uber': 'Transportation',\n      'lyft': 'Transportation',\n      'taxi': 'Transportation',\n      'pharmacy': 'Healthcare',\n      'drug': 'Healthcare',\n      'doctor': 'Healthcare',\n      'clinic': 'Healthcare',\n      'hospital': 'Healthcare',\n      'rent': 'Housing',\n      'mortgage': 'Housing',\n      'netflix': 'Entertainment',\n      'spotify': 'Entertainment',\n      'cinema': 'Entertainment',\n      'movie': 'Entertainment',\n      'theater': 'Entertainment',\n      'amazon': 'Shopping',\n      'walmart': 'Shopping',\n      'target': 'Shopping',\n      'utility': 'Utilities',\n      'electric': 'Utilities',\n      'water': 'Utilities',\n      'gas bill': 'Utilities',\n      'phone': 'Utilities',\n      'internet': 'Utilities',\n      'school': 'Education',\n      'college': 'Education',\n      'university': 'Education',\n      'tuition': 'Education',\n      'book': 'Education',\n      'haircut': 'Personal Care',\n      'salon': 'Personal Care',\n      'spa': 'Personal Care',\n      'gym': 'Personal Care'\n    };\n    for (const [keyword, category] of Object.entries(categoryMappings)) {\n      if (vendorNameLower.includes(keyword)) {\n        return category;\n      }\n    }\n    return 'Other';\n  };\n\n  // Add a new income with validation\n  const addIncome = income => {\n    if (!currentUser) return false;\n    try {\n      // Validate income data\n      if (!income.source) {\n        console.error('Missing source in income');\n        return false;\n      }\n      const amount = parseFloat(income.amount);\n      if (isNaN(amount) || amount <= 0) {\n        console.error('Invalid income amount:', income.amount);\n        return false;\n      }\n\n      // Ensure we have a valid date\n      let incomeDate = income.date;\n      if (!incomeDate) {\n        incomeDate = new Date().toISOString().slice(0, 10);\n      }\n\n      // Create new income object\n      const newIncome = {\n        ...income,\n        amount: amount,\n        id: Date.now(),\n        date: incomeDate,\n        userId: currentUser.id\n      };\n      setIncomes(prevIncomes => [...prevIncomes, newIncome]);\n      return true;\n    } catch (error) {\n      console.error('Error adding income:', error);\n      return false;\n    }\n  };\n\n  // Delete an expense\n  const deleteExpense = id => {\n    if (!id) return false;\n    try {\n      // Get the expense before deleting it\n      const expenseToDelete = expenses.find(expense => expense.id === id);\n      setExpenses(expenses.filter(expense => expense.id !== id));\n\n      // If this was a receipt-based expense, update the scan record\n      if (expenseToDelete && expenseToDelete.receiptScanId) {\n        setReceiptScans(prevScans => prevScans.map(scan => scan.id === expenseToDelete.receiptScanId ? {\n          ...scan,\n          status: 'rejected'\n        } : scan));\n      }\n      return true;\n    } catch (error) {\n      console.error('Error deleting expense:', error);\n      return false;\n    }\n  };\n\n  // Delete an income\n  const deleteIncome = id => {\n    if (!id) return false;\n    try {\n      setIncomes(incomes.filter(income => income.id !== id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting income:', error);\n      return false;\n    }\n  };\n\n  // Update budget settings\n  const updateBudget = (category, amount) => {\n    if (!category || category.trim() === '' || isNaN(parseFloat(amount))) {\n      return false;\n    }\n    try {\n      setBudgets(prevBudgets => ({\n        ...prevBudgets,\n        [category]: parseFloat(amount)\n      }));\n      return true;\n    } catch (error) {\n      console.error('Error updating budget:', error);\n      return false;\n    }\n  };\n\n  // Delete a budget\n  const deleteBudget = category => {\n    if (!category) return false;\n    try {\n      const updatedBudgets = {\n        ...budgets\n      };\n      delete updatedBudgets[category];\n      setBudgets(updatedBudgets);\n      return true;\n    } catch (error) {\n      console.error('Error deleting budget:', error);\n      return false;\n    }\n  };\n\n  // Check if adding this expense exceeds the budget\n  const checkBudgetAlerts = (newExpense, allExpenses = expenses) => {\n    if (!currentUser) return; // Don't process if no user is logged in\n    if (!newExpense || !newExpense.category) return;\n    const {\n      category\n    } = newExpense;\n\n    // Check if there's a budget for this category\n    if (budgets[category]) {\n      try {\n        // Get current month expenses for this category\n        const currentDate = new Date();\n        const currentMonth = currentDate.getMonth();\n        const currentYear = currentDate.getFullYear();\n        const monthlyExpenses = allExpenses.filter(expense => {\n          if (!expense.date) return false;\n          try {\n            const expenseDate = new Date(expense.date);\n            return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear && expense.category === category && expense.userId === currentUser.id;\n          } catch (e) {\n            console.error('Invalid date format:', expense.date);\n            return false;\n          }\n        });\n        const totalSpent = monthlyExpenses.reduce((sum, expense) => {\n          const amount = parseFloat(expense.amount);\n          return sum + (isNaN(amount) ? 0 : amount);\n        }, 0);\n        const budgetAmount = parseFloat(budgets[category]);\n        if (!isNaN(budgetAmount) && totalSpent > budgetAmount) {\n          var _currentUser$preferen;\n          // Create new alert\n          const newAlert = {\n            id: Date.now(),\n            message: `Budget alert: You've exceeded your ${category} budget of $${budgetAmount.toFixed(2)}`,\n            category: category,\n            read: false,\n            date: new Date().toISOString(),\n            userId: currentUser.id\n          };\n          setAlerts(prevAlerts => [...prevAlerts, newAlert]);\n\n          // Send email alert if user has enabled email notifications\n          if ((currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$preferen = currentUser.preferences) === null || _currentUser$preferen === void 0 ? void 0 : _currentUser$preferen.emailNotifications) !== false) {\n            if (currentUser.email) {\n              sendBudgetAlertEmail(currentUser, category, budgetAmount, totalSpent).then(result => {\n                setEmailStatus({\n                  sent: result.success,\n                  error: result.success ? null : result.message\n                });\n              }).catch(error => {\n                setEmailStatus({\n                  sent: false,\n                  error: error.message || 'Error sending email'\n                });\n              });\n            } else {\n              setEmailStatus({\n                sent: false,\n                error: \"No email address found for user\"\n              });\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error checking budget alerts:', error);\n      }\n    }\n  };\n\n  // Mark an alert as read\n  const markAlertAsRead = id => {\n    if (!id) return false;\n    try {\n      setAlerts(prevAlerts => prevAlerts.map(alert => alert.id === id ? {\n        ...alert,\n        read: true\n      } : alert));\n      return true;\n    } catch (error) {\n      console.error('Error marking alert as read:', error);\n      return false;\n    }\n  };\n\n  // Delete an alert\n  const deleteAlert = id => {\n    if (!id) return false;\n    try {\n      setAlerts(alerts.filter(alert => alert.id !== id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting alert:', error);\n      return false;\n    }\n  };\n\n  // Add a new expense category\n  const addExpenseCategory = category => {\n    if (!category || category.trim() === '') return false;\n    if (expenseCategories.includes(category)) return false;\n    try {\n      setExpenseCategories([...expenseCategories, category]);\n      return true;\n    } catch (error) {\n      console.error('Error adding expense category:', error);\n      return false;\n    }\n  };\n\n  // Delete an expense category\n  const deleteExpenseCategory = category => {\n    if (!category) return false;\n    try {\n      // Don't delete if there are expenses using this category\n      const expensesUsingCategory = expenses.some(expense => expense.category === category);\n      if (expensesUsingCategory) {\n        return {\n          success: false,\n          reason: 'Category in use by existing expenses'\n        };\n      }\n\n      // Remove from categories\n      setExpenseCategories(expenseCategories.filter(cat => cat !== category));\n\n      // Also remove any budgets for this category\n      if (budgets[category]) {\n        const updatedBudgets = {\n          ...budgets\n        };\n        delete updatedBudgets[category];\n        setBudgets(updatedBudgets);\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error deleting expense category:', error);\n      return {\n        success: false,\n        reason: error.message\n      };\n    }\n  };\n\n  // Edit an expense category\n  const editExpenseCategory = (oldCategory, newCategory) => {\n    if (!oldCategory || !newCategory || newCategory.trim() === '') return false;\n    try {\n      // Don't allow editing the \"Other\" category\n      if (oldCategory === 'Other') return false;\n\n      // Check if the new category name already exists\n      if (expenseCategories.includes(newCategory) && newCategory !== oldCategory) return false;\n\n      // Check if the category is in use\n      const isCategoryInUse = expenses.some(expense => expense.category === oldCategory);\n      if (isCategoryInUse) return false;\n      setExpenseCategories(expenseCategories.map(cat => cat === oldCategory ? newCategory : cat));\n\n      // Update any budget for this category\n      if (budgets[oldCategory]) {\n        const budgetAmount = budgets[oldCategory];\n        deleteBudget(oldCategory);\n        updateBudget(newCategory, budgetAmount);\n      }\n      return true;\n    } catch (error) {\n      console.error('Error editing expense category:', error);\n      return false;\n    }\n  };\n\n  // Add a new income category\n  const addIncomeCategory = category => {\n    if (!category || category.trim() === '') return false;\n    if (incomeCategories.includes(category)) return false;\n    try {\n      setIncomeCategories([...incomeCategories, category]);\n      return true;\n    } catch (error) {\n      console.error('Error adding income category:', error);\n      return false;\n    }\n  };\n\n  // Delete an income category\n  const deleteIncomeCategory = category => {\n    if (!category) return false;\n    try {\n      // Don't delete if there are incomes using this category\n      const incomesUsingCategory = incomes.some(income => income.source === category);\n      if (incomesUsingCategory) {\n        return {\n          success: false,\n          reason: 'Category in use by existing incomes'\n        };\n      }\n\n      // Remove from categories\n      setIncomeCategories(incomeCategories.filter(cat => cat !== category));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error deleting income category:', error);\n      return {\n        success: false,\n        reason: error.message\n      };\n    }\n  };\n\n  // Edit an income category\n  const editIncomeCategory = (oldCategory, newCategory) => {\n    if (!oldCategory || !newCategory || newCategory.trim() === '') return false;\n    try {\n      // Don't allow editing the \"Other\" category\n      if (oldCategory === 'Other') return false;\n\n      // Check if the new category name already exists\n      if (incomeCategories.includes(newCategory) && newCategory !== oldCategory) return false;\n\n      // Check if the category is in use\n      const isCategoryInUse = incomes.some(income => income.source === oldCategory);\n      if (isCategoryInUse) return false;\n      setIncomeCategories(incomeCategories.map(cat => cat === oldCategory ? newCategory : cat));\n      return true;\n    } catch (error) {\n      console.error('Error editing income category:', error);\n      return false;\n    }\n  };\n\n  // Get expenses for a specific month\n  const getMonthlyExpenses = (month, year) => {\n    if (!currentUser) return [];\n    const targetDate = new Date(year, month);\n    const targetMonth = targetDate.getMonth();\n    const targetYear = targetDate.getFullYear();\n    return expenses.filter(expense => {\n      if (!expense.date) return false;\n      try {\n        const expenseDate = new Date(expense.date);\n        return expenseDate.getMonth() === targetMonth && expenseDate.getFullYear() === targetYear && expense.userId === currentUser.id;\n      } catch (e) {\n        return false;\n      }\n    });\n  };\n\n  // Get incomes for a specific month\n  const getMonthlyIncomes = (month, year) => {\n    if (!currentUser) return [];\n    const targetDate = new Date(year, month);\n    const targetMonth = targetDate.getMonth();\n    const targetYear = targetDate.getFullYear();\n    return incomes.filter(income => {\n      if (!income.date) return false;\n      try {\n        const incomeDate = new Date(income.date);\n        return incomeDate.getMonth() === targetMonth && incomeDate.getFullYear() === targetYear && income.userId === currentUser.id;\n      } catch (e) {\n        return false;\n      }\n    });\n  };\n\n  // Get historical receipt scans\n  const getReceiptScans = () => {\n    if (!currentUser) return [];\n    return receiptScans.filter(scan => scan.userId === currentUser.id);\n  };\n\n  // Update an existing expense\n  const updateExpense = (id, updatedData) => {\n    if (!id || !updatedData) return false;\n    try {\n      setExpenses(prevExpenses => prevExpenses.map(expense => expense.id === id ? {\n        ...expense,\n        ...updatedData,\n        // Ensure amount is properly parsed\n        amount: updatedData.amount ? parseFloat(updatedData.amount) : expense.amount\n      } : expense));\n      return true;\n    } catch (error) {\n      console.error('Error updating expense:', error);\n      return false;\n    }\n  };\n\n  // Update an existing income\n  const updateIncome = (id, updatedData) => {\n    if (!id || !updatedData) return false;\n    try {\n      setIncomes(prevIncomes => prevIncomes.map(income => income.id === id ? {\n        ...income,\n        ...updatedData,\n        // Ensure amount is properly parsed\n        amount: updatedData.amount ? parseFloat(updatedData.amount) : income.amount\n      } : income));\n      return true;\n    } catch (error) {\n      console.error('Error updating income:', error);\n      return false;\n    }\n  };\n\n  // Export data for backups\n  const exportData = () => {\n    if (!currentUser) return null;\n    try {\n      const exportData = {\n        expenses: expenses.filter(expense => expense.userId === currentUser.id),\n        incomes: incomes.filter(income => income.userId === currentUser.id),\n        budgets,\n        expenseCategories,\n        incomeCategories,\n        receiptScans: receiptScans.filter(scan => scan.userId === currentUser.id),\n        exportDate: new Date().toISOString(),\n        userId: currentUser.id\n      };\n      return exportData;\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      return null;\n    }\n  };\n\n  // Import data from backups\n  const importData = data => {\n    if (!currentUser || !data) return false;\n    try {\n      // Validate data structure\n      if (!data.expenses || !data.incomes || !data.budgets || !data.expenseCategories || !data.incomeCategories) {\n        console.error('Invalid import data structure');\n        return false;\n      }\n\n      // Update all data with import\n      // Ensure all imported items have the correct user ID\n      const processedExpenses = Array.isArray(data.expenses) ? data.expenses.map(expense => ({\n        ...expense,\n        userId: currentUser.id\n      })) : [];\n      const processedIncomes = Array.isArray(data.incomes) ? data.incomes.map(income => ({\n        ...income,\n        userId: currentUser.id\n      })) : [];\n      const processedReceiptScans = Array.isArray(data.receiptScans) ? data.receiptScans.map(scan => ({\n        ...scan,\n        userId: currentUser.id\n      })) : [];\n      setExpenses(processedExpenses);\n      setIncomes(processedIncomes);\n      setBudgets(data.budgets);\n      setExpenseCategories(data.expenseCategories);\n      setIncomeCategories(data.incomeCategories);\n      setReceiptScans(processedReceiptScans);\n      return true;\n    } catch (error) {\n      console.error('Error importing data:', error);\n      return false;\n    }\n  };\n\n  // Get spending insights\n  const getSpendingInsights = (months = 3) => {\n    if (!currentUser || months < 1) return null;\n    try {\n      const currentDate = new Date();\n      const insights = {\n        topCategories: [],\n        monthlyTotals: [],\n        yearlyComparison: {},\n        receiptUsage: {\n          total: 0,\n          percentage: 0\n        }\n      };\n\n      // Process expenses for insights\n      const relevantExpenses = expenses.filter(expense => {\n        if (!expense.date || expense.userId !== currentUser.id) return false;\n        const expenseDate = new Date(expense.date);\n        const monthsDiff = (currentDate.getFullYear() - expenseDate.getFullYear()) * 12 + (currentDate.getMonth() - expenseDate.getMonth());\n        return monthsDiff < months;\n      });\n\n      // Calculate top spending categories\n      const categoryTotals = {};\n      relevantExpenses.forEach(expense => {\n        const {\n          category,\n          amount\n        } = expense;\n        if (!category) return;\n        categoryTotals[category] = (categoryTotals[category] || 0) + parseFloat(amount || 0);\n      });\n      insights.topCategories = Object.entries(categoryTotals).map(([category, total]) => ({\n        category,\n        total\n      })).sort((a, b) => b.total - a.total).slice(0, 5); // Get top 5\n\n      // Calculate monthly totals\n      const monthlyData = {};\n      relevantExpenses.forEach(expense => {\n        if (!expense.date) return;\n        const expenseDate = new Date(expense.date);\n        const monthYear = `${expenseDate.getFullYear()}-${expenseDate.getMonth() + 1}`;\n        if (!monthlyData[monthYear]) {\n          monthlyData[monthYear] = {\n            month: expenseDate.getMonth(),\n            year: expenseDate.getFullYear(),\n            total: 0,\n            label: expenseDate.toLocaleString('default', {\n              month: 'short',\n              year: 'numeric'\n            })\n          };\n        }\n        monthlyData[monthYear].total += parseFloat(expense.amount || 0);\n      });\n      insights.monthlyTotals = Object.values(monthlyData).sort((a, b) => {\n        if (a.year !== b.year) return a.year - b.year;\n        return a.month - b.month;\n      });\n\n      // Calculate receipt usage statistics\n      const receiptsCount = relevantExpenses.filter(expense => expense.fromReceipt).length;\n      insights.receiptUsage = {\n        total: receiptsCount,\n        percentage: relevantExpenses.length > 0 ? receiptsCount / relevantExpenses.length * 100 : 0\n      };\n      return insights;\n    } catch (error) {\n      console.error('Error generating spending insights:', error);\n      return null;\n    }\n  };\n\n  // Value object to be provided by the context\n  const value = {\n    expenses,\n    incomes,\n    budgets,\n    alerts,\n    expenseCategories,\n    incomeCategories,\n    receiptScanStatus,\n    receiptScans,\n    emailStatus,\n    addExpense,\n    addIncome,\n    deleteExpense,\n    deleteIncome,\n    updateExpense,\n    updateIncome,\n    updateBudget,\n    deleteBudget,\n    markAlertAsRead,\n    deleteAlert,\n    addExpenseCategory,\n    deleteExpenseCategory,\n    editExpenseCategory,\n    addIncomeCategory,\n    deleteIncomeCategory,\n    editIncomeCategory,\n    scanReceipt,\n    addExpenseFromReceipt,\n    rejectScannedReceipt,\n    getMonthlyExpenses,\n    getMonthlyIncomes,\n    getReceiptScans,\n    exportData,\n    importData,\n    getSpendingInsights\n  };\n  return /*#__PURE__*/_jsxDEV(ExpenseContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1097,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseProvider, \"JqKdXX6B2vUwiUzagw0KvzCk9E4=\");\n_c = ExpenseProvider;\nexport default ExpenseContext;\nvar _c;\n$RefreshReg$(_c, \"ExpenseProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AuthContext","sendBudgetAlertEmail","scanReceiptImage","parseReceiptData","jsxDEV","_jsxDEV","ExpenseContext","ExpenseProvider","children","_s","expenses","setExpenses","incomes","setIncomes","budgets","setBudgets","alerts","setAlerts","emailStatus","setEmailStatus","sent","error","expenseCategories","setExpenseCategories","incomeCategories","setIncomeCategories","receiptScanStatus","setReceiptScanStatus","scanning","data","receiptScans","setReceiptScans","currentUser","DEFAULT_EXPENSE_CATEGORIES","DEFAULT_INCOME_CATEGORIES","getUserStorageKey","key","id","savedExpenses","JSON","parse","localStorage","getItem","Array","isArray","savedIncomes","savedBudgets","savedAlerts","savedExpenseCategories","savedIncomeCategories","savedReceiptScans","console","setItem","stringify","length","timer","setTimeout","clearTimeout","prevState","addExpense","expense","category","amount","parseFloat","isNaN","expenseDate","date","Date","toISOString","slice","newExpense","now","userId","fromReceipt","receiptImageUrl","receiptScanId","prevExpenses","updatedExpenses","checkBudgetAlerts","scanReceipt","imageFile","success","_parsedData$items","scanResult","errorMessage","parsedData","scanId","scanRecord","rawData","status","imageUrl","prevScans","extractedExpense","description","merchantName","mapVendorToCategory","notes","items","join","message","addExpenseFromReceipt","expenseData","modifications","finalExpenseData","result","map","scan","rejectScannedReceipt","_receiptScanStatus$da","vendorName","vendorNameLower","toLowerCase","categoryMappings","keyword","Object","entries","includes","addIncome","income","source","incomeDate","newIncome","prevIncomes","deleteExpense","expenseToDelete","find","filter","deleteIncome","updateBudget","trim","prevBudgets","deleteBudget","updatedBudgets","allExpenses","currentDate","currentMonth","getMonth","currentYear","getFullYear","monthlyExpenses","e","totalSpent","reduce","sum","budgetAmount","_currentUser$preferen","newAlert","toFixed","read","prevAlerts","preferences","emailNotifications","email","then","catch","markAlertAsRead","alert","deleteAlert","addExpenseCategory","deleteExpenseCategory","expensesUsingCategory","some","reason","cat","editExpenseCategory","oldCategory","newCategory","isCategoryInUse","addIncomeCategory","deleteIncomeCategory","incomesUsingCategory","editIncomeCategory","getMonthlyExpenses","month","year","targetDate","targetMonth","targetYear","getMonthlyIncomes","getReceiptScans","updateExpense","updatedData","updateIncome","exportData","exportDate","importData","processedExpenses","processedIncomes","processedReceiptScans","getSpendingInsights","months","insights","topCategories","monthlyTotals","yearlyComparison","receiptUsage","total","percentage","relevantExpenses","monthsDiff","categoryTotals","forEach","sort","a","b","monthlyData","monthYear","label","toLocaleString","values","receiptsCount","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tejit/OneDrive/Desktop/expence tracker final/expence-tracker/src/context/ExpenseContext.js"],"sourcesContent":["// src/context/ExpenseContext.js\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from './AuthContext';\r\nimport { sendBudgetAlertEmail } from '../services/EmailService';\r\n// Import the receipt scanning service\r\nimport { scanReceiptImage, parseReceiptData } from '../services/ReceiptScanningService';\r\n\r\nexport const ExpenseContext = createContext();\r\n\r\nexport const ExpenseProvider = ({ children }) => {\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [incomes, setIncomes] = useState([]);\r\n  const [budgets, setBudgets] = useState({});\r\n  const [alerts, setAlerts] = useState([]);\r\n  const [emailStatus, setEmailStatus] = useState({ sent: false, error: null });\r\n  const [expenseCategories, setExpenseCategories] = useState([]);\r\n  const [incomeCategories, setIncomeCategories] = useState([]);\r\n  // Add new state for receipt scanning\r\n  const [receiptScanStatus, setReceiptScanStatus] = useState({ \r\n    scanning: false, \r\n    error: null, \r\n    data: null \r\n  });\r\n  // Track receipt scan history\r\n  const [receiptScans, setReceiptScans] = useState([]);\r\n  \r\n  const { currentUser } = useContext(AuthContext);\r\n  \r\n  // Default categories if none are found\r\n  const DEFAULT_EXPENSE_CATEGORIES = [\r\n    'Food', 'Housing', 'Transportation', 'Entertainment', \r\n    'Utilities', 'Healthcare', 'Shopping', 'Personal Care', 'Education', 'Other'\r\n  ];\r\n  \r\n  const DEFAULT_INCOME_CATEGORIES = [\r\n    'Salary', 'Freelance', 'Investment', 'Gift', \r\n    'Business', 'Side Hustle', 'Rental', 'Other'\r\n  ];\r\n  \r\n  // Generate unique storage keys for current user\r\n  const getUserStorageKey = (key) => {\r\n    if (!currentUser) return key;\r\n    return `${key}_${currentUser.id}`;\r\n  };\r\n  \r\n  // Load data from localStorage on initial render or when user changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      try {\r\n        // Load expenses\r\n        const savedExpenses = JSON.parse(localStorage.getItem(getUserStorageKey('expenses'))) || [];\r\n        setExpenses(Array.isArray(savedExpenses) ? savedExpenses : []);\r\n        \r\n        // Load incomes\r\n        const savedIncomes = JSON.parse(localStorage.getItem(getUserStorageKey('incomes'))) || [];\r\n        setIncomes(Array.isArray(savedIncomes) ? savedIncomes : []);\r\n        \r\n        // Load budgets\r\n        const savedBudgets = JSON.parse(localStorage.getItem(getUserStorageKey('budgets'))) || {};\r\n        setBudgets(typeof savedBudgets === 'object' ? savedBudgets : {});\r\n        \r\n        // Load alerts\r\n        const savedAlerts = JSON.parse(localStorage.getItem(getUserStorageKey('alerts'))) || [];\r\n        setAlerts(Array.isArray(savedAlerts) ? savedAlerts : []);\r\n        \r\n        // Load expense categories\r\n        const savedExpenseCategories = JSON.parse(localStorage.getItem(getUserStorageKey('expenseCategories'))) || DEFAULT_EXPENSE_CATEGORIES;\r\n        setExpenseCategories(Array.isArray(savedExpenseCategories) ? savedExpenseCategories : DEFAULT_EXPENSE_CATEGORIES);\r\n        \r\n        // Load income categories\r\n        const savedIncomeCategories = JSON.parse(localStorage.getItem(getUserStorageKey('incomeCategories'))) || DEFAULT_INCOME_CATEGORIES;\r\n        setIncomeCategories(Array.isArray(savedIncomeCategories) ? savedIncomeCategories : DEFAULT_INCOME_CATEGORIES);\r\n        \r\n        // Load receipt scans\r\n        const savedReceiptScans = JSON.parse(localStorage.getItem(getUserStorageKey('receiptScans'))) || [];\r\n        setReceiptScans(Array.isArray(savedReceiptScans) ? savedReceiptScans : []);\r\n      } catch (error) {\r\n        console.error('Error loading data from localStorage:', error);\r\n        // Set defaults if there's an error\r\n        setExpenses([]);\r\n        setIncomes([]);\r\n        setBudgets({});\r\n        setAlerts([]);\r\n        setExpenseCategories(DEFAULT_EXPENSE_CATEGORIES);\r\n        setIncomeCategories(DEFAULT_INCOME_CATEGORIES);\r\n        setReceiptScans([]);\r\n      }\r\n    } else {\r\n      // Clear data when logged out\r\n      setExpenses([]);\r\n      setIncomes([]);\r\n      setBudgets({});\r\n      setAlerts([]);\r\n      setExpenseCategories(DEFAULT_EXPENSE_CATEGORIES);\r\n      setIncomeCategories(DEFAULT_INCOME_CATEGORIES);\r\n      setReceiptScans([]);\r\n    }\r\n  }, [currentUser]);\r\n  \r\n  // Save data to localStorage whenever it changes\r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(expenses)) {\r\n      localStorage.setItem(getUserStorageKey('expenses'), JSON.stringify(expenses));\r\n    }\r\n  }, [expenses, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(incomes)) {\r\n      localStorage.setItem(getUserStorageKey('incomes'), JSON.stringify(incomes));\r\n    }\r\n  }, [incomes, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser && budgets && typeof budgets === 'object') {\r\n      localStorage.setItem(getUserStorageKey('budgets'), JSON.stringify(budgets));\r\n    }\r\n  }, [budgets, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(alerts)) {\r\n      localStorage.setItem(getUserStorageKey('alerts'), JSON.stringify(alerts));\r\n    }\r\n  }, [alerts, currentUser]);\r\n  \r\n  // Save categories to localStorage whenever they change\r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(expenseCategories) && expenseCategories.length > 0) {\r\n      localStorage.setItem(getUserStorageKey('expenseCategories'), JSON.stringify(expenseCategories));\r\n    }\r\n  }, [expenseCategories, currentUser]);\r\n  \r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(incomeCategories) && incomeCategories.length > 0) {\r\n      localStorage.setItem(getUserStorageKey('incomeCategories'), JSON.stringify(incomeCategories));\r\n    }\r\n  }, [incomeCategories, currentUser]);\r\n  \r\n  // Save receipt scans to localStorage\r\n  useEffect(() => {\r\n    if (currentUser && Array.isArray(receiptScans)) {\r\n      localStorage.setItem(getUserStorageKey('receiptScans'), JSON.stringify(receiptScans));\r\n    }\r\n  }, [receiptScans, currentUser]);\r\n  \r\n  // Clear email status after some time\r\n  useEffect(() => {\r\n    if (emailStatus.sent || emailStatus.error) {\r\n      const timer = setTimeout(() => {\r\n        setEmailStatus({ sent: false, error: null });\r\n      }, 5000);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [emailStatus]);\r\n  \r\n  // Clear receipt scan data after processing\r\n  useEffect(() => {\r\n    if (receiptScanStatus.data && !receiptScanStatus.scanning) {\r\n      const timer = setTimeout(() => {\r\n        setReceiptScanStatus(prevState => ({\r\n          ...prevState, \r\n          data: null\r\n        }));\r\n      }, 30000); // Give user 30 seconds to review before clearing\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [receiptScanStatus]);\r\n  \r\n  // Add a new expense with validation\r\n  const addExpense = (expense) => {\r\n    if (!currentUser) return false; // Don't proceed if not logged in\r\n    \r\n    try {\r\n      // Validate expense data\r\n      if (!expense.category) {\r\n        console.error('Missing category in expense');\r\n        return false;\r\n      }\r\n      \r\n      const amount = parseFloat(expense.amount);\r\n      if (isNaN(amount) || amount <= 0) {\r\n        console.error('Invalid expense amount:', expense.amount);\r\n        return false;\r\n      }\r\n      \r\n      // Ensure we have a valid date\r\n      let expenseDate = expense.date;\r\n      if (!expenseDate) {\r\n        expenseDate = new Date().toISOString().slice(0, 10);\r\n      }\r\n      \r\n      // Create new expense object\r\n      const newExpense = {\r\n        ...expense,\r\n        amount: amount,\r\n        id: Date.now(),\r\n        date: expenseDate,\r\n        userId: currentUser.id,\r\n        // Add a flag to identify if this expense was added via receipt scanning\r\n        fromReceipt: expense.fromReceipt || false,\r\n        // Store receipt image reference if available\r\n        receiptImageUrl: expense.receiptImageUrl || null,\r\n        // Store receipt scan data ID if available\r\n        receiptScanId: expense.receiptScanId || null\r\n      };\r\n      \r\n      setExpenses(prevExpenses => {\r\n        const updatedExpenses = [...prevExpenses, newExpense];\r\n        \r\n        // Check for budget alerts after state update\r\n        setTimeout(() => {\r\n          checkBudgetAlerts(newExpense, updatedExpenses);\r\n        }, 0);\r\n        \r\n        return updatedExpenses;\r\n      });\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error adding expense:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // New function to handle receipt scanning\r\n  const scanReceipt = async (imageFile) => {\r\n    if (!currentUser) return { success: false, error: 'User not logged in' };\r\n    if (!imageFile) {\r\n      setReceiptScanStatus({\r\n        scanning: false,\r\n        error: 'No image provided',\r\n        data: null\r\n      });\r\n      return { success: false, error: 'No image provided' };\r\n    }\r\n    \r\n    try {\r\n      // Set scanning status\r\n      setReceiptScanStatus({\r\n        scanning: true,\r\n        error: null,\r\n        data: null\r\n      });\r\n      \r\n      // Call the receipt scanning service\r\n      const scanResult = await scanReceiptImage(imageFile);\r\n      \r\n      if (!scanResult || !scanResult.success) {\r\n        const errorMessage = scanResult?.error || 'Failed to scan receipt';\r\n        setReceiptScanStatus({\r\n          scanning: false,\r\n          error: errorMessage,\r\n          data: null\r\n        });\r\n        \r\n        return { success: false, error: errorMessage };\r\n      }\r\n      \r\n      // Process the scanned data\r\n      const parsedData = parseReceiptData(scanResult);\r\n      \r\n      if (!parsedData) {\r\n        setReceiptScanStatus({\r\n          scanning: false,\r\n          error: 'Failed to parse receipt data',\r\n          data: null\r\n        });\r\n        \r\n        return { success: false, error: 'Failed to parse receipt data' };\r\n      }\r\n      \r\n      // Create a scan record\r\n      const scanId = Date.now();\r\n      const scanRecord = {\r\n        id: scanId,\r\n        date: new Date().toISOString(),\r\n        rawData: scanResult,\r\n        parsedData: parsedData,\r\n        userId: currentUser.id,\r\n        status: 'pending', // pending, applied, rejected\r\n        imageUrl: scanResult.imageUrl\r\n      };\r\n      \r\n      // Store the scan record\r\n      setReceiptScans(prevScans => [...prevScans, scanRecord]);\r\n      \r\n      // Prepare the extracted data for the UI\r\n      const extractedExpense = {\r\n        amount: parsedData.amount,\r\n        description: parsedData.merchantName || 'Receipt expense',\r\n        category: mapVendorToCategory(parsedData.merchantName || ''),\r\n        date: parsedData.date || new Date().toISOString().slice(0, 10),\r\n        fromReceipt: true,\r\n        receiptImageUrl: parsedData.imageUrl || null,\r\n        receiptScanId: scanId,\r\n        notes: `Receipt from ${parsedData.merchantName || 'unknown vendor'}${parsedData.items?.length > 0 ? `, Items: ${parsedData.items.join(', ')}` : ''}`\r\n      };\r\n      \r\n      // Update scan status with the extracted data\r\n      setReceiptScanStatus({\r\n        scanning: false,\r\n        error: null,\r\n        data: extractedExpense\r\n      });\r\n      \r\n      return {\r\n        success: true,\r\n        data: extractedExpense,\r\n        scanId\r\n      };\r\n    } catch (error) {\r\n      console.error('Error scanning receipt:', error);\r\n      \r\n      setReceiptScanStatus({\r\n        scanning: false,\r\n        error: error.message || 'Error scanning receipt',\r\n        data: null\r\n      });\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error scanning receipt'\r\n      };\r\n    }\r\n  };\r\n  \r\n  // Function to add the expense from a scanned receipt\r\n  const addExpenseFromReceipt = async (expenseData, modifications = {}) => {\r\n    if (!currentUser) return false;\r\n    \r\n    try {\r\n      // Combine scanned data with any user modifications\r\n      const finalExpenseData = {\r\n        ...expenseData,\r\n        ...modifications,\r\n        fromReceipt: true\r\n      };\r\n      \r\n      // Use the existing addExpense function\r\n      const result = addExpense(finalExpenseData);\r\n      \r\n      if (result && finalExpenseData.receiptScanId) {\r\n        // Update the scan record status\r\n        setReceiptScans(prevScans => \r\n          prevScans.map(scan => \r\n            scan.id === finalExpenseData.receiptScanId \r\n              ? { ...scan, status: 'applied' } \r\n              : scan\r\n          )\r\n        );\r\n        \r\n        // Clear the scanned data after successful addition\r\n        setReceiptScanStatus(prevState => ({\r\n          ...prevState,\r\n          data: null\r\n        }));\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error adding expense from receipt:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Function to reject a scanned receipt\r\n  const rejectScannedReceipt = (scanId) => {\r\n    if (!scanId) return false;\r\n    \r\n    try {\r\n      // Update the scan record status\r\n      setReceiptScans(prevScans => \r\n        prevScans.map(scan => \r\n          scan.id === scanId ? { ...scan, status: 'rejected' } : scan\r\n        )\r\n      );\r\n      \r\n      // Clear any pending scan data with this ID\r\n      if (receiptScanStatus.data?.receiptScanId === scanId) {\r\n        setReceiptScanStatus({\r\n          scanning: false,\r\n          error: null,\r\n          data: null\r\n        });\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error rejecting scanned receipt:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Helper function to map vendor names to appropriate categories\r\n  const mapVendorToCategory = (vendorName) => {\r\n    const vendorNameLower = vendorName.toLowerCase();\r\n    \r\n    // Simple mapping logic - can be expanded based on common vendors\r\n    if (!vendorName) return 'Other';\r\n    \r\n    const categoryMappings = {\r\n      'restaurant': 'Food',\r\n      'café': 'Food',\r\n      'cafe': 'Food',\r\n      'grocery': 'Food',\r\n      'supermarket': 'Food',\r\n      'market': 'Food',\r\n      'gas': 'Transportation',\r\n      'fuel': 'Transportation',\r\n      'uber': 'Transportation',\r\n      'lyft': 'Transportation',\r\n      'taxi': 'Transportation',\r\n      'pharmacy': 'Healthcare',\r\n      'drug': 'Healthcare',\r\n      'doctor': 'Healthcare',\r\n      'clinic': 'Healthcare',\r\n      'hospital': 'Healthcare',\r\n      'rent': 'Housing',\r\n      'mortgage': 'Housing',\r\n      'netflix': 'Entertainment',\r\n      'spotify': 'Entertainment',\r\n      'cinema': 'Entertainment',\r\n      'movie': 'Entertainment',\r\n      'theater': 'Entertainment',\r\n      'amazon': 'Shopping',\r\n      'walmart': 'Shopping',\r\n      'target': 'Shopping',\r\n      'utility': 'Utilities',\r\n      'electric': 'Utilities',\r\n      'water': 'Utilities',\r\n      'gas bill': 'Utilities',\r\n      'phone': 'Utilities',\r\n      'internet': 'Utilities',\r\n      'school': 'Education',\r\n      'college': 'Education',\r\n      'university': 'Education',\r\n      'tuition': 'Education',\r\n      'book': 'Education',\r\n      'haircut': 'Personal Care',\r\n      'salon': 'Personal Care',\r\n      'spa': 'Personal Care',\r\n      'gym': 'Personal Care'\r\n    };\r\n    \r\n    for (const [keyword, category] of Object.entries(categoryMappings)) {\r\n      if (vendorNameLower.includes(keyword)) {\r\n        return category;\r\n      }\r\n    }\r\n    \r\n    return 'Other';\r\n  };\r\n  \r\n  // Add a new income with validation\r\n  const addIncome = (income) => {\r\n    if (!currentUser) return false;\r\n    \r\n    try {\r\n      // Validate income data\r\n      if (!income.source) {\r\n        console.error('Missing source in income');\r\n        return false;\r\n      }\r\n      \r\n      const amount = parseFloat(income.amount);\r\n      if (isNaN(amount) || amount <= 0) {\r\n        console.error('Invalid income amount:', income.amount);\r\n        return false;\r\n      }\r\n      \r\n      // Ensure we have a valid date\r\n      let incomeDate = income.date;\r\n      if (!incomeDate) {\r\n        incomeDate = new Date().toISOString().slice(0, 10);\r\n      }\r\n      \r\n      // Create new income object\r\n      const newIncome = {\r\n        ...income,\r\n        amount: amount,\r\n        id: Date.now(),\r\n        date: incomeDate,\r\n        userId: currentUser.id\r\n      };\r\n      \r\n      setIncomes(prevIncomes => [...prevIncomes, newIncome]);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error adding income:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete an expense\r\n  const deleteExpense = (id) => {\r\n    if (!id) return false;\r\n    \r\n    try {\r\n      // Get the expense before deleting it\r\n      const expenseToDelete = expenses.find(expense => expense.id === id);\r\n      \r\n      setExpenses(expenses.filter(expense => expense.id !== id));\r\n      \r\n      // If this was a receipt-based expense, update the scan record\r\n      if (expenseToDelete && expenseToDelete.receiptScanId) {\r\n        setReceiptScans(prevScans => \r\n          prevScans.map(scan => \r\n            scan.id === expenseToDelete.receiptScanId \r\n              ? { ...scan, status: 'rejected' } \r\n              : scan\r\n          )\r\n        );\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting expense:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete an income\r\n  const deleteIncome = (id) => {\r\n    if (!id) return false;\r\n    \r\n    try {\r\n      setIncomes(incomes.filter(income => income.id !== id));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting income:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Update budget settings\r\n  const updateBudget = (category, amount) => {\r\n    if (!category || category.trim() === '' || isNaN(parseFloat(amount))) {\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      setBudgets(prevBudgets => ({\r\n        ...prevBudgets,\r\n        [category]: parseFloat(amount)\r\n      }));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating budget:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete a budget\r\n  const deleteBudget = (category) => {\r\n    if (!category) return false;\r\n    \r\n    try {\r\n      const updatedBudgets = { ...budgets };\r\n      delete updatedBudgets[category];\r\n      setBudgets(updatedBudgets);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting budget:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Check if adding this expense exceeds the budget\r\n  const checkBudgetAlerts = (newExpense, allExpenses = expenses) => {\r\n    if (!currentUser) return; // Don't process if no user is logged in\r\n    if (!newExpense || !newExpense.category) return;\r\n    \r\n    const { category } = newExpense;\r\n    \r\n    // Check if there's a budget for this category\r\n    if (budgets[category]) {\r\n      try {\r\n        // Get current month expenses for this category\r\n        const currentDate = new Date();\r\n        const currentMonth = currentDate.getMonth();\r\n        const currentYear = currentDate.getFullYear();\r\n        \r\n        const monthlyExpenses = allExpenses.filter(expense => {\r\n          if (!expense.date) return false;\r\n          \r\n          try {\r\n            const expenseDate = new Date(expense.date);\r\n            return expenseDate.getMonth() === currentMonth && \r\n                  expenseDate.getFullYear() === currentYear &&\r\n                  expense.category === category &&\r\n                  expense.userId === currentUser.id;\r\n          } catch (e) {\r\n            console.error('Invalid date format:', expense.date);\r\n            return false;\r\n          }\r\n        });\r\n        \r\n        const totalSpent = monthlyExpenses.reduce((sum, expense) => {\r\n          const amount = parseFloat(expense.amount);\r\n          return sum + (isNaN(amount) ? 0 : amount);\r\n        }, 0);\r\n        \r\n        const budgetAmount = parseFloat(budgets[category]);\r\n        \r\n        if (!isNaN(budgetAmount) && totalSpent > budgetAmount) {\r\n          // Create new alert\r\n          const newAlert = {\r\n            id: Date.now(),\r\n            message: `Budget alert: You've exceeded your ${category} budget of $${budgetAmount.toFixed(2)}`,\r\n            category: category,\r\n            read: false,\r\n            date: new Date().toISOString(),\r\n            userId: currentUser.id\r\n          };\r\n          \r\n          setAlerts(prevAlerts => [...prevAlerts, newAlert]);\r\n          \r\n          // Send email alert if user has enabled email notifications\r\n          if (currentUser?.preferences?.emailNotifications !== false) {\r\n            if (currentUser.email) {\r\n              sendBudgetAlertEmail(\r\n                currentUser,\r\n                category,\r\n                budgetAmount,\r\n                totalSpent\r\n              ).then(result => {\r\n                setEmailStatus({ \r\n                  sent: result.success, \r\n                  error: result.success ? null : result.message \r\n                });\r\n              }).catch(error => {\r\n                setEmailStatus({ \r\n                  sent: false, \r\n                  error: error.message || 'Error sending email'\r\n                });\r\n              });\r\n            } else {\r\n              setEmailStatus({ \r\n                sent: false, \r\n                error: \"No email address found for user\"\r\n              });\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking budget alerts:', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Mark an alert as read\r\n  const markAlertAsRead = (id) => {\r\n    if (!id) return false;\r\n    \r\n    try {\r\n      setAlerts(prevAlerts => \r\n        prevAlerts.map(alert => \r\n          alert.id === id ? { ...alert, read: true } : alert\r\n        )\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error marking alert as read:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete an alert\r\n  const deleteAlert = (id) => {\r\n    if (!id) return false;\r\n    \r\n    try {\r\n      setAlerts(alerts.filter(alert => alert.id !== id));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting alert:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Add a new expense category\r\n  const addExpenseCategory = (category) => {\r\n    if (!category || category.trim() === '') return false;\r\n    if (expenseCategories.includes(category)) return false;\r\n    \r\n    try {\r\n      setExpenseCategories([...expenseCategories, category]);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error adding expense category:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete an expense category\r\n  const deleteExpenseCategory = (category) => {\r\n    if (!category) return false;\r\n    \r\n    try {\r\n      // Don't delete if there are expenses using this category\r\n      const expensesUsingCategory = expenses.some(expense => expense.category === category);\r\n      if (expensesUsingCategory) {\r\n        return { success: false, reason: 'Category in use by existing expenses' };\r\n      }\r\n      \r\n      // Remove from categories\r\n      setExpenseCategories(expenseCategories.filter(cat => cat !== category));\r\n      \r\n      // Also remove any budgets for this category\r\n      if (budgets[category]) {\r\n        const updatedBudgets = { ...budgets };\r\n        delete updatedBudgets[category];\r\n        setBudgets(updatedBudgets);\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Error deleting expense category:', error);\r\n      return { success: false, reason: error.message };\r\n    }\r\n  };\r\n  \r\n  // Edit an expense category\r\n  const editExpenseCategory = (oldCategory, newCategory) => {\r\n    if (!oldCategory || !newCategory || newCategory.trim() === '') return false;\r\n    \r\n    try {\r\n      // Don't allow editing the \"Other\" category\r\n      if (oldCategory === 'Other') return false;\r\n      \r\n      // Check if the new category name already exists\r\n      if (expenseCategories.includes(newCategory) && newCategory !== oldCategory) return false;\r\n      \r\n      // Check if the category is in use\r\n      const isCategoryInUse = expenses.some(expense => expense.category === oldCategory);\r\n      if (isCategoryInUse) return false;\r\n      \r\n      setExpenseCategories(expenseCategories.map(cat => cat === oldCategory ? newCategory : cat));\r\n      \r\n      // Update any budget for this category\r\n      if (budgets[oldCategory]) {\r\n        const budgetAmount = budgets[oldCategory];\r\n        deleteBudget(oldCategory);\r\n        updateBudget(newCategory, budgetAmount);\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error editing expense category:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Add a new income category\r\n  const addIncomeCategory = (category) => {\r\n    if (!category || category.trim() === '') return false;\r\n    if (incomeCategories.includes(category)) return false;\r\n    \r\n    try {\r\n      setIncomeCategories([...incomeCategories, category]);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error adding income category:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Delete an income category\r\n  const deleteIncomeCategory = (category) => {\r\n    if (!category) return false;\r\n    \r\n    try {\r\n      // Don't delete if there are incomes using this category\r\n      const incomesUsingCategory = incomes.some(income => income.source === category);\r\n      if (incomesUsingCategory) {\r\n        return { success: false, reason: 'Category in use by existing incomes' };\r\n      }\r\n      \r\n      // Remove from categories\r\n      setIncomeCategories(incomeCategories.filter(cat => cat !== category));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Error deleting income category:', error);\r\n      return { success: false, reason: error.message };\r\n    }\r\n  };\r\n  \r\n  // Edit an income category\r\n  const editIncomeCategory = (oldCategory, newCategory) => {\r\n    if (!oldCategory || !newCategory || newCategory.trim() === '') return false;\r\n    \r\n    try {\r\n      // Don't allow editing the \"Other\" category\r\n      if (oldCategory === 'Other') return false;\r\n      \r\n      // Check if the new category name already exists\r\n      if (incomeCategories.includes(newCategory) && newCategory !== oldCategory) return false;\r\n      \r\n      // Check if the category is in use\r\n      const isCategoryInUse = incomes.some(income => income.source === oldCategory);\r\n      if (isCategoryInUse) return false;\r\n      \r\n      setIncomeCategories(incomeCategories.map(cat => cat === oldCategory ? newCategory : cat));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error editing income category:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Get expenses for a specific month\r\n  const getMonthlyExpenses = (month, year) => {\r\n    if (!currentUser) return [];\r\n    \r\n    const targetDate = new Date(year, month);\r\n    const targetMonth = targetDate.getMonth();\r\n    const targetYear = targetDate.getFullYear();\r\n    \r\n    return expenses.filter(expense => {\r\n      if (!expense.date) return false;\r\n      \r\n      try {\r\n        const expenseDate = new Date(expense.date);\r\n        return expenseDate.getMonth() === targetMonth && \r\n              expenseDate.getFullYear() === targetYear &&\r\n              expense.userId === currentUser.id;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    });\r\n  };\r\n  \r\n  // Get incomes for a specific month\r\n  const getMonthlyIncomes = (month, year) => {\r\n    if (!currentUser) return [];\r\n    \r\n    const targetDate = new Date(year, month);\r\n    const targetMonth = targetDate.getMonth();\r\n    const targetYear = targetDate.getFullYear();\r\n    \r\n    return incomes.filter(income => {\r\n      if (!income.date) return false;\r\n      \r\n      try {\r\n        const incomeDate = new Date(income.date);\r\n        return incomeDate.getMonth() === targetMonth && \r\n              incomeDate.getFullYear() === targetYear &&\r\n              income.userId === currentUser.id;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    });\r\n  };\r\n  \r\n  // Get historical receipt scans\r\n  const getReceiptScans = () => {\r\n    if (!currentUser) return [];\r\n    \r\n    return receiptScans.filter(scan => scan.userId === currentUser.id);\r\n  };\r\n  \r\n  // Update an existing expense\r\n  const updateExpense = (id, updatedData) => {\r\n    if (!id || !updatedData) return false;\r\n    \r\n    try {\r\n      setExpenses(prevExpenses => \r\n        prevExpenses.map(expense => \r\n          expense.id === id \r\n            ? { \r\n                ...expense, \r\n                ...updatedData,\r\n                // Ensure amount is properly parsed\r\n                amount: updatedData.amount ? parseFloat(updatedData.amount) : expense.amount\r\n              } \r\n            : expense\r\n        )\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating expense:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Update an existing income\r\n  const updateIncome = (id, updatedData) => {\r\n    if (!id || !updatedData) return false;\r\n    \r\n    try {\r\n      setIncomes(prevIncomes => \r\n        prevIncomes.map(income => \r\n          income.id === id \r\n            ? { \r\n                ...income, \r\n                ...updatedData,\r\n                // Ensure amount is properly parsed\r\n                amount: updatedData.amount ? parseFloat(updatedData.amount) : income.amount\r\n              } \r\n            : income\r\n        )\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating income:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Export data for backups\r\n  const exportData = () => {\r\n    if (!currentUser) return null;\r\n    \r\n    try {\r\n      const exportData = {\r\n        expenses: expenses.filter(expense => expense.userId === currentUser.id),\r\n        incomes: incomes.filter(income => income.userId === currentUser.id),\r\n        budgets,\r\n        expenseCategories,\r\n        incomeCategories,\r\n        receiptScans: receiptScans.filter(scan => scan.userId === currentUser.id),\r\n        exportDate: new Date().toISOString(),\r\n        userId: currentUser.id\r\n      };\r\n      \r\n      return exportData;\r\n    } catch (error) {\r\n      console.error('Error exporting data:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Import data from backups\r\n  const importData = (data) => {\r\n    if (!currentUser || !data) return false;\r\n    \r\n    try {\r\n      // Validate data structure\r\n      if (!data.expenses || !data.incomes || !data.budgets || \r\n          !data.expenseCategories || !data.incomeCategories) {\r\n        console.error('Invalid import data structure');\r\n        return false;\r\n      }\r\n      \r\n      // Update all data with import\r\n      // Ensure all imported items have the correct user ID\r\n      const processedExpenses = Array.isArray(data.expenses) \r\n        ? data.expenses.map(expense => ({...expense, userId: currentUser.id}))\r\n        : [];\r\n        \r\n      const processedIncomes = Array.isArray(data.incomes)\r\n        ? data.incomes.map(income => ({...income, userId: currentUser.id}))\r\n        : [];\r\n        \r\n      const processedReceiptScans = Array.isArray(data.receiptScans)\r\n        ? data.receiptScans.map(scan => ({...scan, userId: currentUser.id}))\r\n        : [];\r\n      \r\n      setExpenses(processedExpenses);\r\n      setIncomes(processedIncomes);\r\n      setBudgets(data.budgets);\r\n      setExpenseCategories(data.expenseCategories);\r\n      setIncomeCategories(data.incomeCategories);\r\n      setReceiptScans(processedReceiptScans);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error importing data:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Get spending insights\r\n  const getSpendingInsights = (months = 3) => {\r\n    if (!currentUser || months < 1) return null;\r\n    \r\n    try {\r\n      const currentDate = new Date();\r\n      const insights = {\r\n        topCategories: [],\r\n        monthlyTotals: [],\r\n        yearlyComparison: {},\r\n        receiptUsage: {\r\n          total: 0,\r\n          percentage: 0\r\n        }\r\n      };\r\n      \r\n      // Process expenses for insights\r\n      const relevantExpenses = expenses.filter(expense => {\r\n        if (!expense.date || expense.userId !== currentUser.id) return false;\r\n        \r\n        const expenseDate = new Date(expense.date);\r\n        const monthsDiff = (currentDate.getFullYear() - expenseDate.getFullYear()) * 12 + \r\n                           (currentDate.getMonth() - expenseDate.getMonth());\r\n        \r\n        return monthsDiff < months;\r\n      });\r\n      \r\n      // Calculate top spending categories\r\n      const categoryTotals = {};\r\n      relevantExpenses.forEach(expense => {\r\n        const { category, amount } = expense;\r\n        if (!category) return;\r\n        \r\n        categoryTotals[category] = (categoryTotals[category] || 0) + parseFloat(amount || 0);\r\n      });\r\n      \r\n      insights.topCategories = Object.entries(categoryTotals)\r\n        .map(([category, total]) => ({ category, total }))\r\n        .sort((a, b) => b.total - a.total)\r\n        .slice(0, 5); // Get top 5\r\n      \r\n      // Calculate monthly totals\r\n      const monthlyData = {};\r\n      relevantExpenses.forEach(expense => {\r\n        if (!expense.date) return;\r\n        \r\n        const expenseDate = new Date(expense.date);\r\n        const monthYear = `${expenseDate.getFullYear()}-${expenseDate.getMonth()+1}`;\r\n        \r\n        if (!monthlyData[monthYear]) {\r\n          monthlyData[monthYear] = {\r\n            month: expenseDate.getMonth(),\r\n            year: expenseDate.getFullYear(),\r\n            total: 0,\r\n            label: expenseDate.toLocaleString('default', { month: 'short', year: 'numeric' })\r\n          };\r\n        }\r\n        \r\n        monthlyData[monthYear].total += parseFloat(expense.amount || 0);\r\n      });\r\n      \r\n      insights.monthlyTotals = Object.values(monthlyData)\r\n        .sort((a, b) => {\r\n          if (a.year !== b.year) return a.year - b.year;\r\n          return a.month - b.month;\r\n        });\r\n      \r\n      // Calculate receipt usage statistics\r\n      const receiptsCount = relevantExpenses.filter(expense => expense.fromReceipt).length;\r\n      insights.receiptUsage = {\r\n        total: receiptsCount,\r\n        percentage: relevantExpenses.length > 0 \r\n          ? (receiptsCount / relevantExpenses.length) * 100 \r\n          : 0\r\n      };\r\n      \r\n      return insights;\r\n    } catch (error) {\r\n      console.error('Error generating spending insights:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Value object to be provided by the context\r\n  const value = {\r\n    expenses,\r\n    incomes,\r\n    budgets,\r\n    alerts,\r\n    expenseCategories,\r\n    incomeCategories,\r\n    receiptScanStatus,\r\n    receiptScans,\r\n    emailStatus,\r\n    addExpense,\r\n    addIncome,\r\n    deleteExpense,\r\n    deleteIncome,\r\n    updateExpense,\r\n    updateIncome,\r\n    updateBudget,\r\n    deleteBudget,\r\n    markAlertAsRead,\r\n    deleteAlert,\r\n    addExpenseCategory,\r\n    deleteExpenseCategory,\r\n    editExpenseCategory,\r\n    addIncomeCategory,\r\n    deleteIncomeCategory,\r\n    editIncomeCategory,\r\n    scanReceipt,\r\n    addExpenseFromReceipt,\r\n    rejectScannedReceipt,\r\n    getMonthlyExpenses,\r\n    getMonthlyIncomes,\r\n    getReceiptScans,\r\n    exportData,\r\n    importData,\r\n    getSpendingInsights\r\n  };\r\n  \r\n  return (\r\n    <ExpenseContext.Provider value={value}>\r\n      {children}\r\n    </ExpenseContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ExpenseContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}